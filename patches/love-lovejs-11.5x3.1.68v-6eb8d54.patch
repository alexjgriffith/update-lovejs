From b1a44ced57e23f169588d16a51ec7a40c1d8de48 Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Fri, 10 May 2024 00:08:11 -0400
Subject: [PATCH 1/6] 11.5 working with emscripten 2.0.0

---
 .github/workflows/main.yml                   | 129 ---
 CMakeLists.txt                               |  59 +-
 readme.md                                    | 112 +--
 src/common/Exception.cpp                     |  12 +
 src/common/config.h                          |   5 +-
 src/common/runtime.cpp                       |  44 +-
 src/libraries/enet/libenet/unix.c            |   2 +-
 src/love.cpp                                 |  20 +-
 src/modules/audio/openal/Audio.h             |   7 +-
 src/modules/audio/openal/Effect.h            |   4 +-
 src/modules/audio/openal/Filter.h            |   2 +
 src/modules/audio/openal/Pool.h              |   3 +
 src/modules/event/sdl/Event_compat.cpp       | 877 +++++++++++++++++++
 src/modules/filesystem/Filesystem.cpp        |   3 +-
 src/modules/filesystem/Filesystem.h          |   2 +-
 src/modules/filesystem/physfs/Filesystem.cpp |   2 +-
 src/modules/love/love.cpp                    |   2 +
 src/modules/system/System.cpp                |  12 +-
 src/modules/timer/Timer.cpp                  |   8 +
 src/scripts/EmscriptenPersistence.js         |  21 +
 20 files changed, 1060 insertions(+), 266 deletions(-)
 delete mode 100644 .github/workflows/main.yml
 create mode 100644 src/modules/event/sdl/Event_compat.cpp
 create mode 100644 src/scripts/EmscriptenPersistence.js

diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
deleted file mode 100644
index 9e96663d..00000000
--- a/.github/workflows/main.yml
+++ /dev/null
@@ -1,129 +0,0 @@
-name: continuous-integration
-on: [push, pull_request]
-
-jobs:
-  linux-os:
-    runs-on: ubuntu-20.04
-    steps:
-    - name: Update APT
-      run: sudo apt-get update
-    - name: Install Dependencies
-      run: |
-        sudo apt-get install --assume-yes build-essential git make cmake autoconf automake \
-                                          libtool pkg-config libasound2-dev libpulse-dev libaudio-dev \
-                                          libjack-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev \
-                                          libxfixes-dev libxi-dev libxinerama-dev libxxf86vm-dev libxss-dev \
-                                          libgl1-mesa-dev libdbus-1-dev libudev-dev libgles2-mesa-dev \
-                                          libegl1-mesa-dev libibus-1.0-dev fcitx-libs-dev libsamplerate0-dev \
-                                          libsndio-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev
-    - name: Checkout love-appimage-source
-      uses: actions/checkout@v3
-      with:
-        repository: love2d/love-appimage-source
-    - name: Checkout LÖVE
-      uses: actions/checkout@v3
-      with:
-        path: love2d-${{ github.sha }}
-    - name: Get Dependencies for AppImage
-      shell: python
-      env:
-        LOVE_BRANCH: ${{ github.sha }}
-      run: |
-        import os
-        for i in range(250):
-            if os.system(f"make getdeps LOVE_BRANCH={os.environ['LOVE_BRANCH']}") == 0:
-                raise SystemExit(0)
-        raise Exception("make getdeps failed")
-    - name: Build AppImage
-      run: make LOVE_BRANCH=${{ github.sha }}
-    - name: Print LuaJIT branch
-      run: git -C LuaJIT-v2.1 branch -v
-    - name: Artifact
-      uses: actions/upload-artifact@v3
-      with:
-        name: love-x86_64.AppImage
-        path: love-${{ github.sha }}.AppImage
-    - name: Artifact Debug Symbols
-      uses: actions/upload-artifact@v3
-      with:
-        name: love-x86_64-AppImage-debug
-        path: love-${{ github.sha }}.AppImage-debug.tar.gz
-  windows-os:
-    runs-on: windows-latest
-    strategy:
-      matrix:
-        platform: [Win32, x64]
-    steps:
-    - name: Clone Megasource
-      uses: actions/checkout@v3
-      with:
-        path: megasource
-        repository: love2d/megasource
-        ref: main
-    - name: Checkout
-      uses: actions/checkout@v3
-      with:
-        path: megasource/libs/love
-    - name: Configure
-      shell: cmd
-      env:
-        PLATFORM: ${{ matrix.platform }}
-      run: cmake -Bbuild -Hmegasource -T v142 -A %PLATFORM% -DCMAKE_INSTALL_PREFIX=%CD%\install
-    - name: Install
-      shell: cmd
-      run: cmake --build build --config Release --target install -j2
-    - name: Artifact
-      uses: actions/upload-artifact@v3
-      with:
-        name: love-windows-${{ matrix.platform }}
-        path: install
-    - name: Artifact JIT Modules
-      uses: actions/upload-artifact@v3
-      with:
-        name: love-windows-jitmodules-${{ matrix.platform }}
-        path: build/libs/LuaJIT/src/jit/*.lua
-  macOS:
-    runs-on: macos-latest
-    steps:
-    - name: Checkout
-      uses: actions/checkout@v3
-    - name: Clone Dependencies
-      uses: actions/checkout@v3
-      with:
-        path: apple-dependencies
-        repository: love2d/love-apple-dependencies
-        ref: main
-    - name: Move Dependencies
-      run:
-        mv apple-dependencies/macOS/Frameworks platform/xcode/macosx
-    - name: Build
-      run:
-        xcodebuild clean archive -project platform/xcode/love.xcodeproj -scheme love-macosx -configuration Release -archivePath love-macos.xcarchive
-    - name: Export Archive
-      run:
-        xcodebuild -exportArchive -archivePath love-macos.xcarchive -exportPath love-macos -exportOptionsPlist platform/xcode/macosx/macos-copy-app.plist
-    - name: Zip Archive
-      run:
-        ditto -c -k --sequesterRsrc --keepParent love-macos/love.app love-macos.zip 
-    - name: Artifact
-      uses: actions/upload-artifact@v3
-      with:
-        name: love-macos
-        path: love-macos.zip
-  iOS-Simulator:
-    runs-on: macos-latest
-    steps:
-    - name: Checkout
-      uses: actions/checkout@v3
-    - name: Clone Dependencies
-      uses: actions/checkout@v3
-      with:
-        path: apple-dependencies
-        repository: love2d/love-apple-dependencies
-        ref: main
-    - name: Move Dependencies
-      run: |
-        mv apple-dependencies/iOS/libraries platform/xcode/ios
-    - name: Build
-      run:
-        xcodebuild -project platform/xcode/love.xcodeproj -scheme love-ios -configuration Release -destination 'platform=iOS Simulator,name=iPhone 11'
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dfb44de9..51517380 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,6 +59,7 @@ else()
 	option(LOVE_JIT "Use LuaJIT" TRUE)
 endif()
 option(LOVE_MPG123 "Use mpg123" TRUE)
+option(LOVEJS_COMPAT "Make compatability version of love.js (ie without pthreads)")
 
 if(LOVE_JIT)
 	if(APPLE)
@@ -106,7 +107,6 @@ if(MEGA)
 	set(LOVE_LINK_DIRS ${SDL_LINK_DIR})
 
 	set(LOVE_LINK_LIBRARIES
-		${OPENGL_gl_LIBRARY}
 		${MEGA_FREETYPE}
 		${MEGA_LIBOGG}
 		${MEGA_LIBVORBISFILE}
@@ -142,6 +142,13 @@ if(MEGA)
 		)
 	endif()
 
+	if (NOT EMSCRIPTEN)
+		set(LOVE_LINK_LIBRARIES
+			${OPENGL_gl_LIBRARY}
+			${LOVE_LINK_LIBRARIES}
+		)
+	endif ()
+                  
 	if(LOVE_JIT)
 		set(LOVE_LUA_LIBRARY ${MEGA_LUAJIT_LIB})
 		# LOVE_EXTRA_DLLS are non-runtime DLLs which should be bundled with the
@@ -441,6 +448,15 @@ set(LOVE_SRC_MODULE_EVENT_SDL
 	src/modules/event/sdl/Event.h
 )
 
+if(EMSCRIPTEN)
+	if(LOVEJS_COMPAT)
+		set(LOVE_SRC_MODULE_EVENT_SDL
+			src/modules/event/sdl/Event_compat.cpp
+			src/modules/event/sdl/Event.h
+		)
+	endif()
+endif()
+
 set(LOVE_SRC_MODULE_EVENT
 	${LOVE_SRC_MODULE_EVENT_ROOT}
 	${LOVE_SRC_MODULE_EVENT_SDL}
@@ -1801,8 +1817,45 @@ endif()
 #
 # love (executable)
 #
-add_executable(${LOVE_EXE_NAME} WIN32 src/love.cpp ${LOVE_RC})
-target_link_libraries(${LOVE_EXE_NAME} ${LOVE_LIB_NAME})
+
+if(EMSCRIPTEN)
+    # add_definitions is for other libraries
+	if(LOVEJS_COMPAT)
+		add_definitions("-s USE_SDL=2 -s FULL_ES2=1 -s INVOKE_RUN=0 --post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js")
+	else()
+		add_definitions("-s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=8 -s USE_SDL=2 -s FULL_ES2=1 -s INVOKE_RUN=0 --post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js")
+	endif()
+ 
+	add_executable(${LOVE_EXE_NAME} src/love.cpp)	
+	set(EMSCRIPTEN_ARGS	
+		"-s CASE_INSENSITIVE_FS=1" # I think this is probably what most users expect (sorry linuxers)	
+		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"	
+		"-s USE_SDL=2"
+		"-s MODULARIZE=1"	
+		"-s EXPORT_NAME=\"'Love'\""	
+		"-s WASM=1"
+		"-s FULL_ES2=1"	
+		"-s DISABLE_EXCEPTION_CATCHING=0" # Might be worth building a whitelist for EXCEPTION_CATCHING_WHITELIST
+		"-s ALLOW_MEMORY_GROWTH=1" # for dynamic resizing of memory, should not have a performance impact as using WASM
+		"-s FORCE_FILESYSTEM=1" # to fix Module.addDependency not existing
+		"-lidbfs.js" # to fix the ReferenceError: IDBFS is not defined
+        "-lwebsocket.js" # websocket API
+	)
+
+	if(NOT LOVEJS_COMPAT)
+		set(EMSCRIPTEN_ARGS
+			${EMSCRIPTEN_ARGS}
+			"-s USE_PTHREADS=1"
+			"-s PTHREAD_POOL_SIZE=8"	
+		)
+	endif()
+
+	target_link_libraries(${LOVE_EXE_NAME} ${LOVE_LIB_NAME} ${EMSCRIPTEN_ARGS})	
+else()
+	add_executable(${LOVE_EXE_NAME} WIN32 src/love.cpp ${LOVE_RC})
+	target_link_libraries(${LOVE_EXE_NAME} ${LOVE_LIB_NAME})
+endif()
+
 set_target_properties(${LOVE_EXE_NAME} PROPERTIES C_VISIBILITY_PRESET hidden CXX_VISIBILITY_PRESET hidden VISIBILITY_INLINES_HIDDEN ON)
 
 if(MSVC OR MINGW)
diff --git a/readme.md b/readme.md
index c7910663..5bfbcfd6 100644
--- a/readme.md
+++ b/readme.md
@@ -1,111 +1,5 @@
-LÖVE is an *awesome* framework you can use to make 2D games in Lua. It's free, open-source, and works on Windows, macOS, Linux, Android, and iOS.
+Adapting LÖVE to suit Emscripten. Would be neat if this was part of the official pipeline at some point in the future.
 
-[![Build Status: Windows](https://ci.appveyor.com/api/projects/status/chc0hdr08wv1d5c7?svg=true)](https://ci.appveyor.com/project/slime73/love)
-[![Build Status: Github CI](https://github.com/love2d/love/workflows/continuous-integration/badge.svg)](https://github.com/love2d/love/actions?query=workflow%3Acontinuous-integration)
+The final frontier, so to speak!
 
-Documentation
--------------
-
-We use our [wiki][wiki] for documentation.
-If you need further help, feel free to ask on our [forums][forums], our [Discord server][discord], or our [subreddit][subreddit].
-
-Repository
-----------
-
-We use the 'main' branch for patch development of the current major release, and therefore it should not be considered stable.
-There may also be a branch for the next major version in development, which is named after that version.
-
-We tag all our releases (since we started using mercurial and git), and have binary downloads available for them.
-
-Experimental changes are developed in a separate [love-experiments][love-experiments] repository.
-
-Builds
-------
-
-Files for releases are in the [releases][releases] section on GitHub. [The site][site] has links to files and additional platform content for the latest release.
-
-There are also unstable/nightly builds:
-
-- Builds for some platforms are automatically created after each commit and are available through GitHub's CI interfaces.
-- For ubuntu linux they are in [ppa:bartbes/love-unstable][unstableppa]
-- For arch linux there's [love-git][aur] in the AUR.
-
-Contributing
-------------
-
-The best places to contribute are through the issue tracker and the official Discord server or IRC channel.
-
-For code contributions, pull requests and patches are welcome. Be sure to read the [source code style guide][codestyle].
-Changes and new features typically get discussed in the issue tracker or on Discord or the forums before a pull request is made.
-
-Compilation
------------
-
-### Windows
-Follow the instructions at the [megasource][megasource] repository page.
-
-### *nix
-Run `platform/unix/automagic` from the repository root, then run ./configure and make.
-
-	$ platform/unix/automagic
-	$ ./configure
-	$ make
-
-When using a source release, automagic has already been run, and the first step can be skipped.
-
-### macOS
-Download or clone [this repository][dependencies-apple] and copy, move, or symlink the `macOS/Frameworks` subfolder into love's `platform/xcode/macosx` folder.
-
-Then use the Xcode project found at `platform/xcode/love.xcodeproj` to build the `love-macosx` target.
-
-### iOS
-Building for iOS requires macOS and Xcode.
-
-#### LÖVE 11.4 and newer
-Download the `love-apple-dependencies` zip file corresponding to the LÖVE version being used from the [Releases page][dependencies-ios],
-unzip it, and place the `iOS/libraries` subfolder into love's `platform/xcode/ios` folder.
-
-Or, download or clone [this repository][dependencies-apple] and copy, move, or symlink the `iOS/libraries` subfolder into love's `platform/xcode/ios` folder.
-
-Then use the Xcode project found at `platform/xcode/love.xcodeproj` to build the `love-ios` target.
-
-See `readme-iOS.rtf` for more information.
-
-#### LÖVE 11.3 and older
-Download the `ios-libraries` zip file corresponding to the LÖVE version being used from the [Releases page][dependencies-ios],
-unzip it, and place the `include` and `libraries` subfolders into love's `platform/xcode/ios` folder.
-
-Then use the Xcode project found at `platform/xcode/love.xcodeproj` to build the `love-ios` target.
-
-See `readme-iOS.rtf` for more information.
-
-### Android
-Visit the [Android build repository][android-repository] for build instructions.
-
-Dependencies
-------------
-
-- SDL2
-- OpenGL 2.1+ / OpenGL ES 2+
-- OpenAL
-- Lua / LuaJIT / LLVM-lua
-- FreeType
-- ModPlug
-- mpg123
-- Vorbisfile
-- Theora
-
-[site]: https://love2d.org
-[wiki]: https://love2d.org/wiki
-[forums]: https://love2d.org/forums
-[discord]: https://discord.gg/rhUets9
-[subreddit]: https://www.reddit.com/r/love2d
-[dependencies-apple]: https://github.com/love2d/love-apple-dependencies
-[dependencies-ios]: https://github.com/love2d/love/releases
-[megasource]: https://github.com/love2d/megasource
-[unstableppa]: https://launchpad.net/~bartbes/+archive/love-unstable
-[aur]: https://aur.archlinux.org/packages/love-git
-[love-experiments]: https://github.com/slime73/love-experiments
-[codestyle]: https://love2d.org/wiki/Code_Style
-[android-repository]: https://github.com/love2d/love-android
-[releases]: https://github.com/love2d/love/releases
+See [love.js](https://github.com/Davidobot/love.js) for more info.
diff --git a/src/common/Exception.cpp b/src/common/Exception.cpp
index eb240e38..88c444ca 100644
--- a/src/common/Exception.cpp
+++ b/src/common/Exception.cpp
@@ -23,6 +23,10 @@
 
 #include <iostream>
 
+#if LOVE_EMSCRIPTEN
+#include <emscripten.h>
+#endif 
+
 namespace love
 {
 
@@ -57,6 +61,14 @@ Exception::Exception(const char *fmt, ...)
 		delete[] buffer;
 	}
 	message = std::string(buffer);
+
+	#if LOVE_EMSCRIPTEN
+		// TODO: replace with a nice console.error call (ie figure out how to pass multi-line string to it properly)
+		std::cout << message << std::endl;
+		emscripten_run_script("alert('An error occurred before the game window could be initialised. Please check the console!')");
+	#endif
+
+        
 	delete[] buffer;
 }
 
diff --git a/src/common/config.h b/src/common/config.h
index 94848e32..9f64591d 100644
--- a/src/common/config.h
+++ b/src/common/config.h
@@ -39,6 +39,9 @@
 #endif
 #if defined(__ANDROID__)
 #	define LOVE_ANDROID 1
+#endif	
+#if defined(__EMSCRIPTEN__)
+#  define LOVE_EMSCRIPTEN 1
 #endif
 #if defined(__APPLE__)
 #	include <TargetConditionals.h>
@@ -168,7 +171,7 @@
 #endif
 
 // Check we have a sane configuration
-#if !defined(LOVE_WINDOWS) && !defined(LOVE_LINUX) && !defined(LOVE_IOS) && !defined(LOVE_MACOSX) && !defined(LOVE_ANDROID)
+#if !defined(LOVE_WINDOWS) && !defined(LOVE_LINUX) && !defined(LOVE_IOS) && !defined(LOVE_MACOSX) && !defined(LOVE_ANDROID) && !defined(LOVE_EMSCRIPTEN)
 #	error Could not detect target platform
 #endif
 #if !defined(LOVE_LITTLE_ENDIAN) && !defined(LOVE_BIG_ENDIAN)
diff --git a/src/common/runtime.cpp b/src/common/runtime.cpp
index 0915f7bd..53ac70a3 100644
--- a/src/common/runtime.cpp
+++ b/src/common/runtime.cpp
@@ -137,16 +137,32 @@ static ObjectKey luax_computeloveobjectkey(lua_State *L, love::Object *object)
 {
 	// love objects should be allocated on the heap, and thus are subject
 	// to the alignment rules of operator new / malloc. Lua numbers (doubles)
-	// can store all possible integers up to 2^53. We can store pointers that
-	// use more than 53 bits if their alignment is guaranteed to be more than 1.
-	// For example an alignment requirement of 8 means we can shift the
-	// pointer's bits by 3. However, this is not always reliable on 32-bit platforms
-	// as can be seen in this bug report: https://github.com/love2d/love/issues/1916.
-	// It appears to be ABI violation. However it seems there's no reliable way to
-	// get the correct alignment pre-C++17. Consider that 32-bit pointer still fits
-	// in 2^53 range, it's perfectly fine to assume alignment of 1 there.
-	const size_t minalign = sizeof(void*) == 8 ? LOVE_ALIGNOF(std::max_align_t) : 1;
-	uintptr_t key = (uintptr_t) object;
+	// can store up to 63 bits of information as long as the exponent is
+	// guaranteed to not be all 0's (denormal) nor all 1's (infinity, NaN).
+	// We need all these conditions for using doubles to store pointers:
+	//  - Min pointer alignment is 2.
+	//  - lua_Number is an IEC-559 double
+	//  - Doubles and 64-bit integers are the same size and endianess
+	//  - Pointers fit in 64 bits
+	// We map key bits from input pointer as follows:
+	//   63 <- 63 (sign)
+	//   62 <- !62 (exponent highest bit)
+	//   61 <- 62 (exponent second highest bit)
+	//   60 <- 61
+	//   etc.
+	//   0 <- 1
+	// Since bits 61 and 62 are always opposite, the exponent can't be all 1's
+	// or all 0's, thus avoiding special numbers like denormals and NaNs and
+	// making the floats safe.
+
+  // TODO EMSCRIPTEN add ifdef
+	const size_t minalign = 2;
+	static_assert(LOVE_ALIGNOF(std::max_align_t) >= minalign);
+	static_assert(std::numeric_limits<lua_Number>::is_iec559);
+	static_assert(sizeof(lua_Number) == sizeof(uint64_t));
+	static_assert(sizeof(uint64_t) >= sizeof(uintptr_t));
+
+	uint64_t key = (uint64_t)object;
 
 	if ((key & (minalign - 1)) != 0)
 	{
@@ -156,9 +172,11 @@ static ObjectKey luax_computeloveobjectkey(lua_State *L, love::Object *object)
 
 	static const size_t shift = (size_t) log2(minalign);
 
-	key >>= shift;
-
-	return (ObjectKey) key;
+        key = (key & 0xC000000000000000ULL) ^ 0x4000000000000000ULL;
+	key = ((uint64_t)object >> 1) & 0x3FFFFFFFFFFFFFFFULL;
+	ObjectKey fkey;
+	memcpy(&fkey, &key, sizeof(fkey));
+        return fkey;
 }
 
 static void luax_pushloveobjectkey(lua_State *L, ObjectKey key)
diff --git a/src/libraries/enet/libenet/unix.c b/src/libraries/enet/libenet/unix.c
index 8cbeae5b..0ded6c42 100644
--- a/src/libraries/enet/libenet/unix.c
+++ b/src/libraries/enet/libenet/unix.c
@@ -19,7 +19,7 @@
 #define ENET_BUILDING_LIB 1
 #include "enet/enet.h"
 
-#ifdef __APPLE__
+#if defined (__APPLE__) || defined (__EMSCRIPTEN__)
 #ifdef HAS_POLL
 #undef HAS_POLL
 #endif
diff --git a/src/love.cpp b/src/love.cpp
index 97673a33..98c5884b 100644
--- a/src/love.cpp
+++ b/src/love.cpp
@@ -45,6 +45,10 @@ extern "C" {
 #include "common/ios.h"
 #endif
 
+#if LOVE_EMSCRIPTEN
+#include <emscripten.h>
+#endif
+
 #ifdef LOVE_WINDOWS
 extern "C"
 {
@@ -228,8 +232,20 @@ static DoneAction runlove(int argc, char **argv, int &retval)
 	// Turn the returned boot function into a coroutine and call it until done.
 	lua_newthread(L);
 	lua_pushvalue(L, -2);
-	int stackpos = lua_gettop(L);
 	int nres;
+        #ifdef LOVE_EMSCRIPTEN
+        emscripten_set_main_loop_arg([](void *arg) {
+          lua_State *L = static_cast<lua_State *>(arg);
+          int stackpos = lua_gettop(L);
+          
+          if (lua_resume(L, 0) == LUA_YIELD) {
+            lua_pop(L, lua_gettop(L) - stackpos);
+          } else {
+            emscripten_cancel_main_loop();
+			};
+        }, (void *)L, 0, 1);
+	#else
+        int stackpos = lua_gettop(L);        
 	while (love::luax_resume(L, 0, &nres) == LUA_YIELD)
 #if LUA_VERSION_NUM >= 504
 		lua_pop(L, nres);
@@ -237,6 +253,8 @@ static DoneAction runlove(int argc, char **argv, int &retval)
 		lua_pop(L, lua_gettop(L) - stackpos);
 #endif
 
+#endif //LOVE_EMSCRIPTEN                
+
 	retval = 0;
 	DoneAction done = DONE_QUIT;
 
diff --git a/src/modules/audio/openal/Audio.h b/src/modules/audio/openal/Audio.h
index 85df0c4a..2fd4d67b 100644
--- a/src/modules/audio/openal/Audio.h
+++ b/src/modules/audio/openal/Audio.h
@@ -52,7 +52,9 @@
 #else
 #include <AL/alc.h>
 #include <AL/al.h>
+#ifndef LOVE_EMSCRIPTEN
 #include <AL/alext.h>
+#endif //LOVE_EMSCRIPTEN
 #endif
 
 namespace love
@@ -127,6 +129,8 @@ class Audio : public love::audio::Audio
 
 	bool getEffectID(const char *name, ALuint &id);
 
+       // The Pool.
+       Pool *pool;
 private:
 	void initializeEFX();
 	// The OpenAL device.
@@ -149,9 +153,6 @@ class Audio : public love::audio::Audio
 	int MAX_SCENE_EFFECTS = 64;
 	int MAX_SOURCE_EFFECTS = 64;
 
-	// The Pool.
-	Pool *pool;
-
 	class PoolThread: public thread::Threadable
 	{
 	protected:
diff --git a/src/modules/audio/openal/Effect.h b/src/modules/audio/openal/Effect.h
index 9f67ce07..0c2e9ef2 100644
--- a/src/modules/audio/openal/Effect.h
+++ b/src/modules/audio/openal/Effect.h
@@ -36,7 +36,9 @@
 #else
 #include <AL/alc.h>
 #include <AL/al.h>
-#include <AL/alext.h>
+#ifndef LOVE_EMSCRIPTEN
+ #include <AL/alext.h>
+#endif // LOVE_EMSCRIPTEN
 #endif
 
 #include <vector>
diff --git a/src/modules/audio/openal/Filter.h b/src/modules/audio/openal/Filter.h
index dc653201..856e4626 100644
--- a/src/modules/audio/openal/Filter.h
+++ b/src/modules/audio/openal/Filter.h
@@ -36,7 +36,9 @@
 #else
 #include <AL/alc.h>
 #include <AL/al.h>
+#ifndef LOVE_EMSCRIPTEN
 #include <AL/alext.h>
+#endif //LOVE_EMSCRIPTEN
 #endif
 
 #include <vector>
diff --git a/src/modules/audio/openal/Pool.h b/src/modules/audio/openal/Pool.h
index cc0c1866..9ff16b27 100644
--- a/src/modules/audio/openal/Pool.h
+++ b/src/modules/audio/openal/Pool.h
@@ -46,9 +46,12 @@
 #include <OpenAL-Soft/alext.h>
 #endif
 #else
+// EMSCRIPTEN for some reason here duplicated includes
 #include <AL/alc.h>
 #include <AL/al.h>
+#ifndef LOVE_EMSCRIPTEN
 #include <AL/alext.h>
+#endif //LOVE_EMSCRIPTEN
 #endif
 
 namespace love
diff --git a/src/modules/event/sdl/Event_compat.cpp b/src/modules/event/sdl/Event_compat.cpp
new file mode 100644
index 00000000..d74900d7
--- /dev/null
+++ b/src/modules/event/sdl/Event_compat.cpp
@@ -0,0 +1,877 @@
+/**
+ * Copyright (c) 2006-2022 LOVE Development Team
+ *
+ * This software is provided 'as-is', without any express or implied
+ * warranty.  In no event will the authors be held liable for any damages
+ * arising from the use of this software.
+ *
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ *
+ * 1. The origin of this software must not be misrepresented; you must not
+ *    claim that you wrote the original software. If you use this software
+ *    in a product, an acknowledgment in the product documentation would be
+ *    appreciated but is not required.
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ *    misrepresented as being the original software.
+ * 3. This notice may not be removed or altered from any source distribution.
+ **/
+
+#include "Event.h"
+
+#include "filesystem/DroppedFile.h"
+#include "filesystem/Filesystem.h"
+#include "keyboard/sdl/Keyboard.h"
+#include "joystick/JoystickModule.h"
+#include "joystick/sdl/Joystick.h"
+#include "touch/sdl/Touch.h"
+#include "graphics/Graphics.h"
+#include "window/Window.h"
+#include "common/Exception.h"
+#include "audio/Audio.h"
+#include "audio/openal/Audio.h"
+#include "common/config.h"
+#include "timer/Timer.h"
+
+#include <cmath>
+
+namespace love
+{
+namespace event
+{
+namespace sdl
+{
+
+// SDL reports mouse coordinates in the window coordinate system in OS X, but
+// we want them in pixel coordinates (may be different with high-DPI enabled.)
+static void windowToDPICoords(double *x, double *y)
+{
+	auto window = Module::getInstance<window::Window>(Module::M_WINDOW);
+	if (window)
+		window->windowToDPICoords(x, y);
+}
+
+#ifndef LOVE_MACOSX
+static void normalizedToDPICoords(double *x, double *y)
+{
+	double w = 1.0, h = 1.0;
+
+	auto window = Module::getInstance<window::Window>(Module::M_WINDOW);
+	if (window)
+	{
+		w = window->getWidth();
+		h = window->getHeight();
+		window->windowToDPICoords(&w, &h);
+	}
+
+	if (x)
+		*x = ((*x) * w);
+	if (y)
+		*y = ((*y) * h);
+}
+#endif
+
+// SDL's event watch callbacks trigger when the event is actually posted inside
+// SDL, unlike with SDL_PollEvents. This is useful for some events which require
+// handling inside the function which triggered them on some backends.
+static int SDLCALL watchAppEvents(void * /*udata*/, SDL_Event *event)
+{
+	auto gfx = Module::getInstance<graphics::Graphics>(Module::M_GRAPHICS);
+
+	switch (event->type)
+	{
+	// On iOS, calling any OpenGL ES function after the function which triggers
+	// SDL_APP_DIDENTERBACKGROUND is called will kill the app, so we handle it
+	// with an event watch callback, which will be called inside that function.
+	case SDL_APP_DIDENTERBACKGROUND:
+	case SDL_APP_WILLENTERFOREGROUND:
+		if (gfx)
+			gfx->setActive(event->type == SDL_APP_WILLENTERFOREGROUND);
+		break;
+	default:
+		break;
+	}
+
+	return 1;
+}
+
+const char *Event::getName() const
+{
+	return "love.event.sdl";
+}
+
+Event::Event()
+{
+	if (SDL_InitSubSystem(SDL_INIT_EVENTS) < 0)
+		throw love::Exception("Could not initialize SDL events subsystem (%s)", SDL_GetError());
+
+	SDL_AddEventWatch(watchAppEvents, this);
+}
+
+Event::~Event()
+{
+	SDL_DelEventWatch(watchAppEvents, this);
+	SDL_QuitSubSystem(SDL_INIT_EVENTS);
+}
+
+void Event::pump()
+{
+	exceptionIfInRenderPass("love.event.pump");
+
+	SDL_Event e;
+
+	while (SDL_PollEvent(&e))
+	{
+		Message *msg = convert(e);
+		if (msg)
+		{
+			push(msg);
+			msg->release();
+		}
+	}
+
+	Module::getInstance<love::audio::openal::Audio>(Module::M_AUDIO)->pool->update();
+}
+
+Message *Event::wait()
+{
+	exceptionIfInRenderPass("love.event.wait");
+
+	SDL_Event e;
+
+	if (SDL_WaitEvent(&e) != 1)
+		return nullptr;
+
+	return convert(e);
+}
+
+void Event::clear()
+{
+	exceptionIfInRenderPass("love.event.clear");
+
+	SDL_Event e;
+
+	while (SDL_PollEvent(&e))
+	{
+		// Do nothing with 'e' ...
+	}
+
+	love::event::Event::clear();
+}
+
+void Event::exceptionIfInRenderPass(const char *name)
+{
+	// Some core OS graphics functionality (e.g. swap buffers on some platforms)
+	// happens inside SDL_PumpEvents - which is called by SDL_PollEvent and
+	// friends. It's probably a bad idea to call those functions while a Canvas
+	// is active.
+	auto gfx = Module::getInstance<graphics::Graphics>(Module::M_GRAPHICS);
+	if (gfx != nullptr && gfx->isCanvasActive())
+		throw love::Exception("%s cannot be called while a Canvas is active in love.graphics.", name);
+}
+
+Message *Event::convert(const SDL_Event &e)
+{
+	Message *msg = nullptr;
+
+	std::vector<Variant> vargs;
+	vargs.reserve(4);
+
+	love::filesystem::Filesystem *filesystem = nullptr;
+
+	love::keyboard::Keyboard::Key key = love::keyboard::Keyboard::KEY_UNKNOWN;
+	love::keyboard::Keyboard::Scancode scancode = love::keyboard::Keyboard::SCANCODE_UNKNOWN;
+
+	const char *txt;
+	const char *txt2;
+	std::map<SDL_Keycode, love::keyboard::Keyboard::Key>::const_iterator keyit;
+
+#ifndef LOVE_MACOSX
+	love::touch::sdl::Touch *touchmodule = nullptr;
+	love::touch::Touch::TouchInfo touchinfo;
+#endif
+
+#ifdef LOVE_LINUX
+	static bool touchNormalizationBug = false;
+#endif
+
+	switch (e.type)
+	{
+	case SDL_KEYDOWN:
+		if (e.key.repeat)
+		{
+			auto kb = Module::getInstance<love::keyboard::Keyboard>(Module::M_KEYBOARD);
+			if (kb && !kb->hasKeyRepeat())
+				break;
+		}
+
+		keyit = keys.find(e.key.keysym.sym);
+		if (keyit != keys.end())
+			key = keyit->second;
+
+		if (!love::keyboard::Keyboard::getConstant(key, txt))
+			txt = "unknown";
+
+		love::keyboard::sdl::Keyboard::getConstant(e.key.keysym.scancode, scancode);
+		if (!love::keyboard::Keyboard::getConstant(scancode, txt2))
+			txt2 = "unknown";
+
+		vargs.emplace_back(txt, strlen(txt));
+		vargs.emplace_back(txt2, strlen(txt2));
+		vargs.emplace_back(e.key.repeat != 0);
+		msg = new Message("keypressed", vargs);
+		break;
+	case SDL_KEYUP:
+		keyit = keys.find(e.key.keysym.sym);
+		if (keyit != keys.end())
+			key = keyit->second;
+
+		if (!love::keyboard::Keyboard::getConstant(key, txt))
+			txt = "unknown";
+
+		love::keyboard::sdl::Keyboard::getConstant(e.key.keysym.scancode, scancode);
+		if (!love::keyboard::Keyboard::getConstant(scancode, txt2))
+			txt2 = "unknown";
+
+		vargs.emplace_back(txt, strlen(txt));
+		vargs.emplace_back(txt2, strlen(txt2));
+		msg = new Message("keyreleased", vargs);
+		break;
+	case SDL_TEXTINPUT:
+		txt = e.text.text;
+		vargs.emplace_back(txt, strlen(txt));
+		msg = new Message("textinput", vargs);
+		break;
+	case SDL_TEXTEDITING:
+		txt = e.edit.text;
+		vargs.emplace_back(txt, strlen(txt));
+		vargs.emplace_back((double) e.edit.start);
+		vargs.emplace_back((double) e.edit.length);
+		msg = new Message("textedited", vargs);
+		break;
+	case SDL_MOUSEMOTION:
+		{
+			double x = (double) e.motion.x;
+			double y = (double) e.motion.y;
+			double xrel = (double) e.motion.xrel;
+			double yrel = (double) e.motion.yrel;
+			windowToDPICoords(&x, &y);
+			windowToDPICoords(&xrel, &yrel);
+			vargs.emplace_back(x);
+			vargs.emplace_back(y);
+			vargs.emplace_back(xrel);
+			vargs.emplace_back(yrel);
+			vargs.emplace_back(e.motion.which == SDL_TOUCH_MOUSEID);
+			msg = new Message("mousemoved", vargs);
+		}
+		break;
+	case SDL_MOUSEBUTTONDOWN:
+	case SDL_MOUSEBUTTONUP:
+		{
+			// SDL uses button 3 for the right mouse button, but we use button 2
+			int button = e.button.button;
+			switch (button)
+			{
+			case SDL_BUTTON_RIGHT:
+				button = 2;
+				break;
+			case SDL_BUTTON_MIDDLE:
+				button = 3;
+				break;
+			}
+
+			double px = (double) e.button.x;
+			double py = (double) e.button.y;
+			windowToDPICoords(&px, &py);
+			vargs.emplace_back(px);
+			vargs.emplace_back(py);
+			vargs.emplace_back((double) button);
+			vargs.emplace_back(e.button.which == SDL_TOUCH_MOUSEID);
+			vargs.emplace_back((double) e.button.clicks);
+
+			bool down = e.type == SDL_MOUSEBUTTONDOWN;
+			msg = new Message(down ? "mousepressed" : "mousereleased", vargs);
+		}
+		break;
+	case SDL_MOUSEWHEEL:
+		vargs.emplace_back((double) e.wheel.x);
+		vargs.emplace_back((double) e.wheel.y);
+		msg = new Message("wheelmoved", vargs);
+		break;
+	case SDL_FINGERDOWN:
+	case SDL_FINGERUP:
+	case SDL_FINGERMOTION:
+		// Touch events are disabled in OS X because we only actually want touch
+		// screen events, but most touch devices in OS X aren't touch screens
+		// (and SDL doesn't differentiate.) Non-screen touch devices like Mac
+		// trackpads won't give touch coords in the window's coordinate-space.
+#ifndef LOVE_MACOSX
+		touchinfo.id = (int64) e.tfinger.fingerId;
+		touchinfo.x = e.tfinger.x;
+		touchinfo.y = e.tfinger.y;
+		touchinfo.dx = e.tfinger.dx;
+		touchinfo.dy = e.tfinger.dy;
+		touchinfo.pressure = e.tfinger.pressure;
+
+#ifdef LOVE_LINUX
+		// FIXME: hacky workaround for SDL not normalizing touch coordinates in
+		// its X11 backend: https://bugzilla.libsdl.org/show_bug.cgi?id=2307
+		if (touchNormalizationBug || fabs(touchinfo.x) >= 1.5 || fabs(touchinfo.y) >= 1.5 || fabs(touchinfo.dx) >= 1.5 || fabs(touchinfo.dy) >= 1.5)
+		{
+			touchNormalizationBug = true;
+			windowToDPICoords(&touchinfo.x, &touchinfo.y);
+			windowToDPICoords(&touchinfo.dx, &touchinfo.dy);
+		}
+		else
+#endif
+		{
+			// SDL's coords are normalized to [0, 1], but we want screen coords.
+			normalizedToDPICoords(&touchinfo.x, &touchinfo.y);
+			normalizedToDPICoords(&touchinfo.dx, &touchinfo.dy);
+		}
+
+		// We need to update the love.touch.sdl internal state from here.
+		touchmodule = (touch::sdl::Touch *) Module::getInstance("love.touch.sdl");
+		if (touchmodule)
+			touchmodule->onEvent(e.type, touchinfo);
+
+		// This is a bit hackish and we lose the higher 32 bits of the id on
+		// 32-bit systems, but SDL only ever gives id's that at most use as many
+		// bits as can fit in a pointer (for now.)
+		// We use lightuserdata instead of a lua_Number (double) because doubles
+		// can't represent all possible id values on 64-bit systems.
+		vargs.emplace_back((void *) (intptr_t) touchinfo.id);
+		vargs.emplace_back(touchinfo.x);
+		vargs.emplace_back(touchinfo.y);
+		vargs.emplace_back(touchinfo.dx);
+		vargs.emplace_back(touchinfo.dy);
+		vargs.emplace_back(touchinfo.pressure);
+
+		if (e.type == SDL_FINGERDOWN)
+			txt = "touchpressed";
+		else if (e.type == SDL_FINGERUP)
+			txt = "touchreleased";
+		else
+			txt = "touchmoved";
+		msg = new Message(txt, vargs);
+#endif
+		break;
+	case SDL_JOYBUTTONDOWN:
+	case SDL_JOYBUTTONUP:
+	case SDL_JOYAXISMOTION:
+	case SDL_JOYBALLMOTION:
+	case SDL_JOYHATMOTION:
+	case SDL_JOYDEVICEADDED:
+	case SDL_JOYDEVICEREMOVED:
+	case SDL_CONTROLLERBUTTONDOWN:
+	case SDL_CONTROLLERBUTTONUP:
+	case SDL_CONTROLLERAXISMOTION:
+		msg = convertJoystickEvent(e);
+		break;
+	case SDL_WINDOWEVENT:
+		msg = convertWindowEvent(e);
+		break;
+#if SDL_VERSION_ATLEAST(2, 0, 9)
+	case SDL_DISPLAYEVENT:
+		if (e.display.event == SDL_DISPLAYEVENT_ORIENTATION)
+		{
+			auto orientation = window::Window::ORIENTATION_UNKNOWN;
+			switch ((SDL_DisplayOrientation) e.display.data1)
+			{
+			case SDL_ORIENTATION_UNKNOWN:
+			default:
+				orientation = window::Window::ORIENTATION_UNKNOWN;
+				break;
+			case SDL_ORIENTATION_LANDSCAPE:
+				orientation = window::Window::ORIENTATION_LANDSCAPE;
+				break;
+			case SDL_ORIENTATION_LANDSCAPE_FLIPPED:
+				orientation = window::Window::ORIENTATION_LANDSCAPE_FLIPPED;
+				break;
+			case SDL_ORIENTATION_PORTRAIT:
+				orientation = window::Window::ORIENTATION_PORTRAIT;
+				break;
+			case SDL_ORIENTATION_PORTRAIT_FLIPPED:
+				orientation = window::Window::ORIENTATION_PORTRAIT_FLIPPED;
+				break;
+			}
+
+			if (!window::Window::getConstant(orientation, txt))
+				txt = "unknown";
+
+			vargs.emplace_back((double)(e.display.display + 1));
+			vargs.emplace_back(txt, strlen(txt));
+
+			msg = new Message("displayrotated", vargs);
+		}
+		break;
+#endif
+	case SDL_DROPFILE:
+		filesystem = Module::getInstance<filesystem::Filesystem>(Module::M_FILESYSTEM);
+		if (filesystem != nullptr)
+		{
+			// Allow mounting any dropped path, so zips or dirs can be mounted.
+			filesystem->allowMountingForPath(e.drop.file);
+
+			if (filesystem->isRealDirectory(e.drop.file))
+			{
+				vargs.emplace_back(e.drop.file, strlen(e.drop.file));
+				msg = new Message("directorydropped", vargs);
+			}
+			else
+			{
+				auto *file = new love::filesystem::DroppedFile(e.drop.file);
+				vargs.emplace_back(&love::filesystem::DroppedFile::type, file);
+				msg = new Message("filedropped", vargs);
+				file->release();
+			}
+		}
+		SDL_free(e.drop.file);
+		break;
+	case SDL_QUIT:
+	case SDL_APP_TERMINATING:
+		msg = new Message("quit");
+		break;
+	case SDL_APP_LOWMEMORY:
+		msg = new Message("lowmemory");
+		break;
+	default:
+		break;
+	}
+
+	return msg;
+}
+
+Message *Event::convertJoystickEvent(const SDL_Event &e) const
+{
+	auto joymodule = Module::getInstance<joystick::JoystickModule>(Module::M_JOYSTICK);
+	if (!joymodule)
+		return nullptr;
+
+	Message *msg = nullptr;
+
+	std::vector<Variant> vargs;
+	vargs.reserve(4);
+
+	love::Type *joysticktype = &love::joystick::Joystick::type;
+	love::joystick::Joystick *stick = nullptr;
+	love::joystick::Joystick::Hat hat;
+	love::joystick::Joystick::GamepadButton padbutton;
+	love::joystick::Joystick::GamepadAxis padaxis;
+	const char *txt;
+
+	switch (e.type)
+	{
+	case SDL_JOYBUTTONDOWN:
+	case SDL_JOYBUTTONUP:
+		stick = joymodule->getJoystickFromID(e.jbutton.which);
+		if (!stick)
+			break;
+
+		vargs.emplace_back(joysticktype, stick);
+		vargs.emplace_back((double)(e.jbutton.button+1));
+		msg = new Message((e.type == SDL_JOYBUTTONDOWN) ?
+						  "joystickpressed" : "joystickreleased",
+						  vargs);
+		break;
+	case SDL_JOYAXISMOTION:
+		{
+			stick = joymodule->getJoystickFromID(e.jaxis.which);
+			if (!stick)
+				break;
+
+			vargs.emplace_back(joysticktype, stick);
+			vargs.emplace_back((double)(e.jaxis.axis+1));
+			float value = joystick::Joystick::clampval(e.jaxis.value / 32768.0f);
+			vargs.emplace_back((double) value);
+			msg = new Message("joystickaxis", vargs);
+		}
+		break;
+	case SDL_JOYHATMOTION:
+		if (!joystick::sdl::Joystick::getConstant(e.jhat.value, hat) || !joystick::Joystick::getConstant(hat, txt))
+			break;
+
+		stick = joymodule->getJoystickFromID(e.jhat.which);
+		if (!stick)
+			break;
+
+		vargs.emplace_back(joysticktype, stick);
+		vargs.emplace_back((double)(e.jhat.hat+1));
+		vargs.emplace_back(txt, strlen(txt));
+		msg = new Message("joystickhat", vargs);
+		break;
+	case SDL_CONTROLLERBUTTONDOWN:
+	case SDL_CONTROLLERBUTTONUP:
+		if (!joystick::sdl::Joystick::getConstant((SDL_GameControllerButton) e.cbutton.button, padbutton))
+			break;
+
+		if (!joystick::Joystick::getConstant(padbutton, txt))
+			break;
+
+		stick = joymodule->getJoystickFromID(e.cbutton.which);
+		if (!stick)
+			break;
+
+		vargs.emplace_back(joysticktype, stick);
+		vargs.emplace_back(txt, strlen(txt));
+		msg = new Message(e.type == SDL_CONTROLLERBUTTONDOWN ?
+						  "gamepadpressed" : "gamepadreleased", vargs);
+		break;
+	case SDL_CONTROLLERAXISMOTION:
+		if (joystick::sdl::Joystick::getConstant((SDL_GameControllerAxis) e.caxis.axis, padaxis))
+		{
+			if (!joystick::Joystick::getConstant(padaxis, txt))
+				break;
+
+			stick = joymodule->getJoystickFromID(e.caxis.which);
+			if (!stick)
+				break;
+
+			vargs.emplace_back(joysticktype, stick);
+			vargs.emplace_back(txt, strlen(txt));
+			float value = joystick::Joystick::clampval(e.caxis.value / 32768.0f);
+			vargs.emplace_back((double) value);
+			msg = new Message("gamepadaxis", vargs);
+		}
+		break;
+	case SDL_JOYDEVICEADDED:
+		// jdevice.which is the joystick device index.
+		stick = joymodule->addJoystick(e.jdevice.which);
+		if (stick)
+		{
+			vargs.emplace_back(joysticktype, stick);
+			msg = new Message("joystickadded", vargs);
+		}
+		break;
+	case SDL_JOYDEVICEREMOVED:
+		// jdevice.which is the joystick instance ID now.
+		stick = joymodule->getJoystickFromID(e.jdevice.which);
+		if (stick)
+		{
+			joymodule->removeJoystick(stick);
+			vargs.emplace_back(joysticktype, stick);
+			msg = new Message("joystickremoved", vargs);
+		}
+		break;
+	default:
+		break;
+	}
+
+	return msg;
+}
+
+Message *Event::convertWindowEvent(const SDL_Event &e)
+{
+	Message *msg = nullptr;
+
+	std::vector<Variant> vargs;
+	vargs.reserve(4);
+
+	window::Window *win = nullptr;
+	graphics::Graphics *gfx = nullptr;
+
+	if (e.type != SDL_WINDOWEVENT)
+		return nullptr;
+
+	switch (e.window.event)
+	{
+	case SDL_WINDOWEVENT_FOCUS_GAINED:
+	case SDL_WINDOWEVENT_FOCUS_LOST:
+		vargs.emplace_back(e.window.event == SDL_WINDOWEVENT_FOCUS_GAINED);
+		msg = new Message("focus", vargs);
+		break;
+	case SDL_WINDOWEVENT_ENTER:
+	case SDL_WINDOWEVENT_LEAVE:
+		vargs.emplace_back(e.window.event == SDL_WINDOWEVENT_ENTER);
+		msg = new Message("mousefocus", vargs);
+		break;
+	case SDL_WINDOWEVENT_SHOWN:
+	case SDL_WINDOWEVENT_HIDDEN:
+		vargs.emplace_back(e.window.event == SDL_WINDOWEVENT_SHOWN);
+		msg = new Message("visible", vargs);
+		break;
+	case SDL_WINDOWEVENT_RESIZED:
+		{
+			double width  = e.window.data1;
+			double height = e.window.data2;
+
+			gfx = Module::getInstance<graphics::Graphics>(Module::M_GRAPHICS);
+			win = Module::getInstance<window::Window>(Module::M_WINDOW);
+
+			// WINDOWEVENT_SIZE_CHANGED will always occur before RESIZED.
+			// The size values in the Window aren't necessarily the same as the
+			// graphics size, which is what we want to output.
+			if (gfx)
+			{
+				width  = gfx->getWidth();
+				height = gfx->getHeight();
+			}
+			else if (win)
+			{
+				width  = win->getWidth();
+				height = win->getHeight();
+				windowToDPICoords(&width, &height);
+			}
+
+			vargs.emplace_back(width);
+			vargs.emplace_back(height);
+			msg = new Message("resize", vargs);
+		}
+		break;
+	case SDL_WINDOWEVENT_SIZE_CHANGED:
+		win = Module::getInstance<window::Window>(Module::M_WINDOW);
+		if (win)
+			win->onSizeChanged(e.window.data1, e.window.data2);
+		break;
+	case SDL_WINDOWEVENT_MINIMIZED:
+	case SDL_WINDOWEVENT_RESTORED:
+#ifdef LOVE_ANDROID
+		if (auto audio = Module::getInstance<audio::Audio>(Module::M_AUDIO))
+		{
+			if (e.window.event == SDL_WINDOWEVENT_MINIMIZED)
+			{
+				for (auto &src : pausedSources)
+					src->release();
+				pausedSources = audio->pause();
+				for (auto &src : pausedSources)
+					src->retain();
+			}
+			else if (e.window.event == SDL_WINDOWEVENT_RESTORED)
+			{
+				audio->play(pausedSources);
+				for (auto &src : pausedSources)
+					src->release();
+				pausedSources.resize(0);
+			}
+		}
+#endif
+		break;
+	}
+
+	return msg;
+}
+
+std::map<SDL_Keycode, love::keyboard::Keyboard::Key> Event::createKeyMap()
+{
+	using love::keyboard::Keyboard;
+
+	std::map<SDL_Keycode, Keyboard::Key> k;
+
+	k[SDLK_UNKNOWN] = Keyboard::KEY_UNKNOWN;
+
+	k[SDLK_RETURN] = Keyboard::KEY_RETURN;
+	k[SDLK_ESCAPE] = Keyboard::KEY_ESCAPE;
+	k[SDLK_BACKSPACE] = Keyboard::KEY_BACKSPACE;
+	k[SDLK_TAB] = Keyboard::KEY_TAB;
+	k[SDLK_SPACE] = Keyboard::KEY_SPACE;
+	k[SDLK_EXCLAIM] = Keyboard::KEY_EXCLAIM;
+	k[SDLK_QUOTEDBL] = Keyboard::KEY_QUOTEDBL;
+	k[SDLK_HASH] = Keyboard::KEY_HASH;
+	k[SDLK_PERCENT] = Keyboard::KEY_PERCENT;
+	k[SDLK_DOLLAR] = Keyboard::KEY_DOLLAR;
+	k[SDLK_AMPERSAND] = Keyboard::KEY_AMPERSAND;
+	k[SDLK_QUOTE] = Keyboard::KEY_QUOTE;
+	k[SDLK_LEFTPAREN] = Keyboard::KEY_LEFTPAREN;
+	k[SDLK_RIGHTPAREN] = Keyboard::KEY_RIGHTPAREN;
+	k[SDLK_ASTERISK] = Keyboard::KEY_ASTERISK;
+	k[SDLK_PLUS] = Keyboard::KEY_PLUS;
+	k[SDLK_COMMA] = Keyboard::KEY_COMMA;
+	k[SDLK_MINUS] = Keyboard::KEY_MINUS;
+	k[SDLK_PERIOD] = Keyboard::KEY_PERIOD;
+	k[SDLK_SLASH] = Keyboard::KEY_SLASH;
+	k[SDLK_0] = Keyboard::KEY_0;
+	k[SDLK_1] = Keyboard::KEY_1;
+	k[SDLK_2] = Keyboard::KEY_2;
+	k[SDLK_3] = Keyboard::KEY_3;
+	k[SDLK_4] = Keyboard::KEY_4;
+	k[SDLK_5] = Keyboard::KEY_5;
+	k[SDLK_6] = Keyboard::KEY_6;
+	k[SDLK_7] = Keyboard::KEY_7;
+	k[SDLK_8] = Keyboard::KEY_8;
+	k[SDLK_9] = Keyboard::KEY_9;
+	k[SDLK_COLON] = Keyboard::KEY_COLON;
+	k[SDLK_SEMICOLON] = Keyboard::KEY_SEMICOLON;
+	k[SDLK_LESS] = Keyboard::KEY_LESS;
+	k[SDLK_EQUALS] = Keyboard::KEY_EQUALS;
+	k[SDLK_GREATER] = Keyboard::KEY_GREATER;
+	k[SDLK_QUESTION] = Keyboard::KEY_QUESTION;
+	k[SDLK_AT] = Keyboard::KEY_AT;
+
+	k[SDLK_LEFTBRACKET] = Keyboard::KEY_LEFTBRACKET;
+	k[SDLK_BACKSLASH] = Keyboard::KEY_BACKSLASH;
+	k[SDLK_RIGHTBRACKET] = Keyboard::KEY_RIGHTBRACKET;
+	k[SDLK_CARET] = Keyboard::KEY_CARET;
+	k[SDLK_UNDERSCORE] = Keyboard::KEY_UNDERSCORE;
+	k[SDLK_BACKQUOTE] = Keyboard::KEY_BACKQUOTE;
+	k[SDLK_a] = Keyboard::KEY_A;
+	k[SDLK_b] = Keyboard::KEY_B;
+	k[SDLK_c] = Keyboard::KEY_C;
+	k[SDLK_d] = Keyboard::KEY_D;
+	k[SDLK_e] = Keyboard::KEY_E;
+	k[SDLK_f] = Keyboard::KEY_F;
+	k[SDLK_g] = Keyboard::KEY_G;
+	k[SDLK_h] = Keyboard::KEY_H;
+	k[SDLK_i] = Keyboard::KEY_I;
+	k[SDLK_j] = Keyboard::KEY_J;
+	k[SDLK_k] = Keyboard::KEY_K;
+	k[SDLK_l] = Keyboard::KEY_L;
+	k[SDLK_m] = Keyboard::KEY_M;
+	k[SDLK_n] = Keyboard::KEY_N;
+	k[SDLK_o] = Keyboard::KEY_O;
+	k[SDLK_p] = Keyboard::KEY_P;
+	k[SDLK_q] = Keyboard::KEY_Q;
+	k[SDLK_r] = Keyboard::KEY_R;
+	k[SDLK_s] = Keyboard::KEY_S;
+	k[SDLK_t] = Keyboard::KEY_T;
+	k[SDLK_u] = Keyboard::KEY_U;
+	k[SDLK_v] = Keyboard::KEY_V;
+	k[SDLK_w] = Keyboard::KEY_W;
+	k[SDLK_x] = Keyboard::KEY_X;
+	k[SDLK_y] = Keyboard::KEY_Y;
+	k[SDLK_z] = Keyboard::KEY_Z;
+
+	k[SDLK_CAPSLOCK] = Keyboard::KEY_CAPSLOCK;
+
+	k[SDLK_F1] = Keyboard::KEY_F1;
+	k[SDLK_F2] = Keyboard::KEY_F2;
+	k[SDLK_F3] = Keyboard::KEY_F3;
+	k[SDLK_F4] = Keyboard::KEY_F4;
+	k[SDLK_F5] = Keyboard::KEY_F5;
+	k[SDLK_F6] = Keyboard::KEY_F6;
+	k[SDLK_F7] = Keyboard::KEY_F7;
+	k[SDLK_F8] = Keyboard::KEY_F8;
+	k[SDLK_F9] = Keyboard::KEY_F9;
+	k[SDLK_F10] = Keyboard::KEY_F10;
+	k[SDLK_F11] = Keyboard::KEY_F11;
+	k[SDLK_F12] = Keyboard::KEY_F12;
+
+	k[SDLK_PRINTSCREEN] = Keyboard::KEY_PRINTSCREEN;
+	k[SDLK_SCROLLLOCK] = Keyboard::KEY_SCROLLLOCK;
+	k[SDLK_PAUSE] = Keyboard::KEY_PAUSE;
+	k[SDLK_INSERT] = Keyboard::KEY_INSERT;
+	k[SDLK_HOME] = Keyboard::KEY_HOME;
+	k[SDLK_PAGEUP] = Keyboard::KEY_PAGEUP;
+	k[SDLK_DELETE] = Keyboard::KEY_DELETE;
+	k[SDLK_END] = Keyboard::KEY_END;
+	k[SDLK_PAGEDOWN] = Keyboard::KEY_PAGEDOWN;
+	k[SDLK_RIGHT] = Keyboard::KEY_RIGHT;
+	k[SDLK_LEFT] = Keyboard::KEY_LEFT;
+	k[SDLK_DOWN] = Keyboard::KEY_DOWN;
+	k[SDLK_UP] = Keyboard::KEY_UP;
+
+	k[SDLK_NUMLOCKCLEAR] = Keyboard::KEY_NUMLOCKCLEAR;
+	k[SDLK_KP_DIVIDE] = Keyboard::KEY_KP_DIVIDE;
+	k[SDLK_KP_MULTIPLY] = Keyboard::KEY_KP_MULTIPLY;
+	k[SDLK_KP_MINUS] = Keyboard::KEY_KP_MINUS;
+	k[SDLK_KP_PLUS] = Keyboard::KEY_KP_PLUS;
+	k[SDLK_KP_ENTER] = Keyboard::KEY_KP_ENTER;
+	k[SDLK_KP_0] = Keyboard::KEY_KP_0;
+	k[SDLK_KP_1] = Keyboard::KEY_KP_1;
+	k[SDLK_KP_2] = Keyboard::KEY_KP_2;
+	k[SDLK_KP_3] = Keyboard::KEY_KP_3;
+	k[SDLK_KP_4] = Keyboard::KEY_KP_4;
+	k[SDLK_KP_5] = Keyboard::KEY_KP_5;
+	k[SDLK_KP_6] = Keyboard::KEY_KP_6;
+	k[SDLK_KP_7] = Keyboard::KEY_KP_7;
+	k[SDLK_KP_8] = Keyboard::KEY_KP_8;
+	k[SDLK_KP_9] = Keyboard::KEY_KP_9;
+	k[SDLK_KP_PERIOD] = Keyboard::KEY_KP_PERIOD;
+	k[SDLK_KP_COMMA] = Keyboard::KEY_KP_COMMA;
+	k[SDLK_KP_EQUALS] = Keyboard::KEY_KP_EQUALS;
+
+	k[SDLK_APPLICATION] = Keyboard::KEY_APPLICATION;
+	k[SDLK_POWER] = Keyboard::KEY_POWER;
+	k[SDLK_F13] = Keyboard::KEY_F13;
+	k[SDLK_F14] = Keyboard::KEY_F14;
+	k[SDLK_F15] = Keyboard::KEY_F15;
+	k[SDLK_F16] = Keyboard::KEY_F16;
+	k[SDLK_F17] = Keyboard::KEY_F17;
+	k[SDLK_F18] = Keyboard::KEY_F18;
+	k[SDLK_F19] = Keyboard::KEY_F19;
+	k[SDLK_F20] = Keyboard::KEY_F20;
+	k[SDLK_F21] = Keyboard::KEY_F21;
+	k[SDLK_F22] = Keyboard::KEY_F22;
+	k[SDLK_F23] = Keyboard::KEY_F23;
+	k[SDLK_F24] = Keyboard::KEY_F24;
+	k[SDLK_EXECUTE] = Keyboard::KEY_EXECUTE;
+	k[SDLK_HELP] = Keyboard::KEY_HELP;
+	k[SDLK_MENU] = Keyboard::KEY_MENU;
+	k[SDLK_SELECT] = Keyboard::KEY_SELECT;
+	k[SDLK_STOP] = Keyboard::KEY_STOP;
+	k[SDLK_AGAIN] = Keyboard::KEY_AGAIN;
+	k[SDLK_UNDO] = Keyboard::KEY_UNDO;
+	k[SDLK_CUT] = Keyboard::KEY_CUT;
+	k[SDLK_COPY] = Keyboard::KEY_COPY;
+	k[SDLK_PASTE] = Keyboard::KEY_PASTE;
+	k[SDLK_FIND] = Keyboard::KEY_FIND;
+	k[SDLK_MUTE] = Keyboard::KEY_MUTE;
+	k[SDLK_VOLUMEUP] = Keyboard::KEY_VOLUMEUP;
+	k[SDLK_VOLUMEDOWN] = Keyboard::KEY_VOLUMEDOWN;
+
+	k[SDLK_ALTERASE] = Keyboard::KEY_ALTERASE;
+	k[SDLK_SYSREQ] = Keyboard::KEY_SYSREQ;
+	k[SDLK_CANCEL] = Keyboard::KEY_CANCEL;
+	k[SDLK_CLEAR] = Keyboard::KEY_CLEAR;
+	k[SDLK_PRIOR] = Keyboard::KEY_PRIOR;
+	k[SDLK_RETURN2] = Keyboard::KEY_RETURN2;
+	k[SDLK_SEPARATOR] = Keyboard::KEY_SEPARATOR;
+	k[SDLK_OUT] = Keyboard::KEY_OUT;
+	k[SDLK_OPER] = Keyboard::KEY_OPER;
+	k[SDLK_CLEARAGAIN] = Keyboard::KEY_CLEARAGAIN;
+
+	k[SDLK_THOUSANDSSEPARATOR] = Keyboard::KEY_THOUSANDSSEPARATOR;
+	k[SDLK_DECIMALSEPARATOR] = Keyboard::KEY_DECIMALSEPARATOR;
+	k[SDLK_CURRENCYUNIT] = Keyboard::KEY_CURRENCYUNIT;
+	k[SDLK_CURRENCYSUBUNIT] = Keyboard::KEY_CURRENCYSUBUNIT;
+
+	k[SDLK_LCTRL] = Keyboard::KEY_LCTRL;
+	k[SDLK_LSHIFT] = Keyboard::KEY_LSHIFT;
+	k[SDLK_LALT] = Keyboard::KEY_LALT;
+	k[SDLK_LGUI] = Keyboard::KEY_LGUI;
+	k[SDLK_RCTRL] = Keyboard::KEY_RCTRL;
+	k[SDLK_RSHIFT] = Keyboard::KEY_RSHIFT;
+	k[SDLK_RALT] = Keyboard::KEY_RALT;
+	k[SDLK_RGUI] = Keyboard::KEY_RGUI;
+
+	k[SDLK_MODE] = Keyboard::KEY_MODE;
+
+	k[SDLK_AUDIONEXT] = Keyboard::KEY_AUDIONEXT;
+	k[SDLK_AUDIOPREV] = Keyboard::KEY_AUDIOPREV;
+	k[SDLK_AUDIOSTOP] = Keyboard::KEY_AUDIOSTOP;
+	k[SDLK_AUDIOPLAY] = Keyboard::KEY_AUDIOPLAY;
+	k[SDLK_AUDIOMUTE] = Keyboard::KEY_AUDIOMUTE;
+	k[SDLK_MEDIASELECT] = Keyboard::KEY_MEDIASELECT;
+	k[SDLK_WWW] = Keyboard::KEY_WWW;
+	k[SDLK_MAIL] = Keyboard::KEY_MAIL;
+	k[SDLK_CALCULATOR] = Keyboard::KEY_CALCULATOR;
+	k[SDLK_COMPUTER] = Keyboard::KEY_COMPUTER;
+	k[SDLK_AC_SEARCH] = Keyboard::KEY_APP_SEARCH;
+	k[SDLK_AC_HOME] = Keyboard::KEY_APP_HOME;
+	k[SDLK_AC_BACK] = Keyboard::KEY_APP_BACK;
+	k[SDLK_AC_FORWARD] = Keyboard::KEY_APP_FORWARD;
+	k[SDLK_AC_STOP] = Keyboard::KEY_APP_STOP;
+	k[SDLK_AC_REFRESH] = Keyboard::KEY_APP_REFRESH;
+	k[SDLK_AC_BOOKMARKS] = Keyboard::KEY_APP_BOOKMARKS;
+
+	k[SDLK_BRIGHTNESSDOWN] = Keyboard::KEY_BRIGHTNESSDOWN;
+	k[SDLK_BRIGHTNESSUP] = Keyboard::KEY_BRIGHTNESSUP;
+	k[SDLK_DISPLAYSWITCH] = Keyboard::KEY_DISPLAYSWITCH;
+	k[SDLK_KBDILLUMTOGGLE] = Keyboard::KEY_KBDILLUMTOGGLE;
+	k[SDLK_KBDILLUMDOWN] = Keyboard::KEY_KBDILLUMDOWN;
+	k[SDLK_KBDILLUMUP] = Keyboard::KEY_KBDILLUMUP;
+	k[SDLK_EJECT] = Keyboard::KEY_EJECT;
+	k[SDLK_SLEEP] = Keyboard::KEY_SLEEP;
+
+#ifdefqq LOVE_ANDROID
+	k[SDLK_AC_BACK] = Keyboard::KEY_ESCAPE;
+#endif
+
+	return k;
+}
+
+std::map<SDL_Keycode, love::keyboard::Keyboard::Key> Event::keys = Event::createKeyMap();
+
+} // sdl
+} // event
+} // love
diff --git a/src/modules/filesystem/Filesystem.cpp b/src/modules/filesystem/Filesystem.cpp
index 395c87e0..54479188 100644
--- a/src/modules/filesystem/Filesystem.cpp
+++ b/src/modules/filesystem/Filesystem.cpp
@@ -114,7 +114,8 @@ std::string Filesystem::getExecutablePath() const
 		return "";
 
 	return std::string(buffer, len);
-
+#elif defined(LOVE_EMSCRIPTEN)	
+	return "";
 #else
 #error Missing implementation for Filesystem::getExecutablePath!
 #endif
diff --git a/src/modules/filesystem/Filesystem.h b/src/modules/filesystem/Filesystem.h
index ccd91264..4e27bcae 100644
--- a/src/modules/filesystem/Filesystem.h
+++ b/src/modules/filesystem/Filesystem.h
@@ -43,7 +43,7 @@
 #else
 #	if defined(LOVE_MACOSX) || defined(LOVE_IOS)
 #		define LOVE_APPDATA_FOLDER "LOVE"
-#	elif defined(LOVE_LINUX)
+#	elif defined(LOVE_LINUX) || defined(LOVE_EMSCRIPTEN)
 #		define LOVE_APPDATA_FOLDER "love"
 #	else
 #		define LOVE_APPDATA_PREFIX "."
diff --git a/src/modules/filesystem/physfs/Filesystem.cpp b/src/modules/filesystem/physfs/Filesystem.cpp
index d3c65026..337c5c57 100644
--- a/src/modules/filesystem/physfs/Filesystem.cpp
+++ b/src/modules/filesystem/physfs/Filesystem.cpp
@@ -612,7 +612,7 @@ std::string Filesystem::getRealDirectory(const char *filename) const
 	const char *dir = PHYSFS_getRealDir(filename);
 
 	if (dir == nullptr)
-		throw love::Exception("File does not exist on disk.");
+		throw love::Exception("File %s  does not exist on disk.", filename);
 
 	return std::string(dir);
 }
diff --git a/src/modules/love/love.cpp b/src/modules/love/love.cpp
index 0202a852..5106e258 100644
--- a/src/modules/love/love.cpp
+++ b/src/modules/love/love.cpp
@@ -480,6 +480,8 @@ int luaopen_love(lua_State *L)
 	lua_pushstring(L, "Android");
 #elif defined(LOVE_LINUX)
 	lua_pushstring(L, "Linux");
+#elif defined(LOVE_EMSCRIPTEN)
+	lua_pushstring(L, "Web");        
 #else
 	lua_pushstring(L, "Unknown");
 #endif
diff --git a/src/modules/system/System.cpp b/src/modules/system/System.cpp
index b7926592..2d0148fe 100644
--- a/src/modules/system/System.cpp
+++ b/src/modules/system/System.cpp
@@ -45,7 +45,8 @@
 #define LOVE_HAS_POSIX_SPAWN
 #endif
 #endif
-
+#elif defined(LOVE_EMSCRIPTEN)
+#include <emscripten.h>
 #ifdef LOVE_HAS_POSIX_SPAWN
 #include <spawn.h>
 #else
@@ -76,6 +77,8 @@ std::string System::getOS() const
 	return "Android";
 #elif defined(LOVE_LINUX)
 	return "Linux";
+#elif defined(LOVE_EMSCRIPTEN)
+	return "Web";        
 #else
 	return "Unknown";
 #endif
@@ -139,7 +142,12 @@ bool System::openURL(const std::string &url) const
 		// We can't tell what actually happens without waiting for
 		// the process to finish, which could take forever (literally).
 		return true;
-
+#elif defined(LOVE_EMSCRIPTEN)
+	EM_ASM_INT({
+		window.open(UTF8ToString ($0));
+		return 0;
+	}, url.c_str());
+	return true;
 #elif defined(LOVE_WINDOWS)
 
 	// Unicode-aware WinAPI functions don't accept UTF-8, so we need to convert.
diff --git a/src/modules/timer/Timer.cpp b/src/modules/timer/Timer.cpp
index 55bc5080..9a549e32 100644
--- a/src/modules/timer/Timer.cpp
+++ b/src/modules/timer/Timer.cpp
@@ -34,6 +34,8 @@
 #include <unistd.h>
 #include <time.h>
 #include <sys/time.h>
+#elif defined(LOVE_EMSCRIPTEN)
+#include <emscripten.h>
 #endif
 
 namespace love
@@ -158,6 +160,12 @@ double Timer::getTime()
 	return ((double) rel * 1.0e-9) * (double) info.numer / (double) info.denom;
 }
 
+#elif defined(LOVE_EMSCRIPTEN)
+double Timer::getTime()
+{
+	return emscripten_get_now() / 1000.0;
+}  
+  
 #elif defined(LOVE_WINDOWS)
 
 static LARGE_INTEGER getTimeAbsolute()
diff --git a/src/scripts/EmscriptenPersistence.js b/src/scripts/EmscriptenPersistence.js
new file mode 100644
index 00000000..501ab641
--- /dev/null
+++ b/src/scripts/EmscriptenPersistence.js
@@ -0,0 +1,21 @@
+if (typeof ENVIRONMENT_IS_PTHREAD === 'undefined' || !ENVIRONMENT_IS_PTHREAD) {
+	Module.addRunDependency('IDBFS_sync');
+	FS.mkdir('/home/web_user/love');
+	FS.mount(IDBFS, {}, '/home/web_user/love');
+
+	FS.syncfs(true, function (err) {
+	  if (err) {
+	    Module['printErr'](err);
+	  } else {
+	    Module.removeRunDependency('IDBFS_sync');
+	  }
+	});
+  
+	window.addEventListener('beforeunload', function(event) {
+		FS.syncfs(false, function (err) {
+			if (err) {
+				Module['printErr'](err);
+			}
+		});	
+	});
+}
-- 
2.43.0


From 0ca4b233f56518e789af832210ac48aac7614493 Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Fri, 10 May 2024 01:04:02 -0400
Subject: [PATCH 2/6] Fixed typo testing out Main=1

---
 CMakeLists.txt                         | 3 ++-
 src/modules/event/sdl/Event_compat.cpp | 2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 51517380..bf50fa67 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1831,7 +1831,8 @@ if(EMSCRIPTEN)
 		"-s CASE_INSENSITIVE_FS=1" # I think this is probably what most users expect (sorry linuxers)	
 		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"	
 		"-s USE_SDL=2"
-		"-s MODULARIZE=1"	
+		"-s MODULARIZE=1"
+                "-s MAIN_MODULE=1"
 		"-s EXPORT_NAME=\"'Love'\""	
 		"-s WASM=1"
 		"-s FULL_ES2=1"	
diff --git a/src/modules/event/sdl/Event_compat.cpp b/src/modules/event/sdl/Event_compat.cpp
index d74900d7..a7cdf2ec 100644
--- a/src/modules/event/sdl/Event_compat.cpp
+++ b/src/modules/event/sdl/Event_compat.cpp
@@ -863,7 +863,7 @@ std::map<SDL_Keycode, love::keyboard::Keyboard::Key> Event::createKeyMap()
 	k[SDLK_EJECT] = Keyboard::KEY_EJECT;
 	k[SDLK_SLEEP] = Keyboard::KEY_SLEEP;
 
-#ifdefqq LOVE_ANDROID
+#ifdef LOVE_ANDROID
 	k[SDLK_AC_BACK] = Keyboard::KEY_ESCAPE;
 #endif
 
-- 
2.43.0


From 13cdb8b154befcd7a0730a625ddaea075e834210 Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Fri, 10 May 2024 01:04:30 -0400
Subject: [PATCH 3/6] Fixed typo in Event_compat

---
 src/modules/event/sdl/Event_compat.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modules/event/sdl/Event_compat.cpp b/src/modules/event/sdl/Event_compat.cpp
index d74900d7..a7cdf2ec 100644
--- a/src/modules/event/sdl/Event_compat.cpp
+++ b/src/modules/event/sdl/Event_compat.cpp
@@ -863,7 +863,7 @@ std::map<SDL_Keycode, love::keyboard::Keyboard::Key> Event::createKeyMap()
 	k[SDLK_EJECT] = Keyboard::KEY_EJECT;
 	k[SDLK_SLEEP] = Keyboard::KEY_SLEEP;
 
-#ifdefqq LOVE_ANDROID
+#ifdef LOVE_ANDROID
 	k[SDLK_AC_BACK] = Keyboard::KEY_ESCAPE;
 #endif
 
-- 
2.43.0


From f86067c1403d25cd443697ae4a4c27ead115e22f Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Fri, 10 May 2024 04:20:13 -0400
Subject: [PATCH 4/6] Dropped Main

---
 CMakeLists.txt | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bf50fa67..636c513e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1826,13 +1826,13 @@ if(EMSCRIPTEN)
 		add_definitions("-s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=8 -s USE_SDL=2 -s FULL_ES2=1 -s INVOKE_RUN=0 --post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js")
 	endif()
  
-	add_executable(${LOVE_EXE_NAME} src/love.cpp)	
+	add_executable(${LOVE_EXE_NAME} src/love.cpp)
+
 	set(EMSCRIPTEN_ARGS	
 		"-s CASE_INSENSITIVE_FS=1" # I think this is probably what most users expect (sorry linuxers)	
 		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"	
 		"-s USE_SDL=2"
 		"-s MODULARIZE=1"
-                "-s MAIN_MODULE=1"
 		"-s EXPORT_NAME=\"'Love'\""	
 		"-s WASM=1"
 		"-s FULL_ES2=1"	
@@ -1848,7 +1848,13 @@ if(EMSCRIPTEN)
 			${EMSCRIPTEN_ARGS}
 			"-s USE_PTHREADS=1"
 			"-s PTHREAD_POOL_SIZE=8"	
-		)
+		      )
+       
+                      # set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+                      # set(THREADS_PREFER_PTHREAD_FLAG TRUE)
+                      # find_package(Threads REQUIRED)
+                      # target_link_libraries(${LOVE_EXE_NAME} Threads::Threads)
+
 	endif()
 
 	target_link_libraries(${LOVE_EXE_NAME} ${LOVE_LIB_NAME} ${EMSCRIPTEN_ARGS})	
-- 
2.43.0


From cae30f793b118d8272d57a5037c685d39ed8543c Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Fri, 10 May 2024 07:24:03 -0400
Subject: [PATCH 5/6] Now targetting Emscripten 3.1.54

---
 CMakeLists.txt | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 51517380..b046d411 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1829,7 +1829,7 @@ if(EMSCRIPTEN)
 	add_executable(${LOVE_EXE_NAME} src/love.cpp)	
 	set(EMSCRIPTEN_ARGS	
 		"-s CASE_INSENSITIVE_FS=1" # I think this is probably what most users expect (sorry linuxers)	
-		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"	
+		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"
 		"-s USE_SDL=2"
 		"-s MODULARIZE=1"	
 		"-s EXPORT_NAME=\"'Love'\""	
@@ -1839,12 +1839,16 @@ if(EMSCRIPTEN)
 		"-s ALLOW_MEMORY_GROWTH=1" # for dynamic resizing of memory, should not have a performance impact as using WASM
 		"-s FORCE_FILESYSTEM=1" # to fix Module.addDependency not existing
 		"-lidbfs.js" # to fix the ReferenceError: IDBFS is not defined
-        "-lwebsocket.js" # websocket API
+                "-lwebsocket.js" # websocket API
+                 "-s EXPORTED_RUNTIME_METHODS=\"['getMemory']\""
+                ## "-s EXPORTED_FUNCTIONS=\"['_malloc']\""
+                "-ldylink.js"  "-s RELOCATABLE=1"
 	)
 
 	if(NOT LOVEJS_COMPAT)
 		set(EMSCRIPTEN_ARGS
-			${EMSCRIPTEN_ARGS}
+		  ${EMSCRIPTEN_ARGS}
+                  "-sERROR_ON_UNDEFINED_SYMBOLS=0" # for -ldylink.js
 			"-s USE_PTHREADS=1"
 			"-s PTHREAD_POOL_SIZE=8"	
 		)
-- 
2.43.0


From 04541cf280e413a4fefb010ca0e1a3070373c2ff Mon Sep 17 00:00:00 2001
From: alexjgriffith <griffitaj@gmail.com>
Date: Mon, 13 May 2024 00:00:01 -0400
Subject: [PATCH 6/6] Fixed Module race condition bumped to emscripten 3.1.59
 and sdl 2.28.5

---
 CMakeLists.txt | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 493a0d1f..9e6e2d6b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1820,10 +1820,10 @@ endif()
 
 if(EMSCRIPTEN)
     # add_definitions is for other libraries
-	if(LOVEJS_COMPAT)
-		add_definitions("-s USE_SDL=2 -s FULL_ES2=1 -s INVOKE_RUN=0 --post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js")
+    if(LOVEJS_COMPAT)
+		add_definitions("-s FULL_ES2=1 -s INVOKE_RUN=0" )
 	else()
-		add_definitions("-s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=8 -s USE_SDL=2 -s FULL_ES2=1 -s INVOKE_RUN=0 --post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js")
+		add_definitions("-s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -s FULL_ES2=1 -s INVOKE_RUN=0")
 	endif()
  
 	add_executable(${LOVE_EXE_NAME} src/love.cpp)
@@ -1831,9 +1831,8 @@ if(EMSCRIPTEN)
 	set(EMSCRIPTEN_ARGS	
 		"-s CASE_INSENSITIVE_FS=1" # I think this is probably what most users expect (sorry linuxers)	
 		"--post-js ${CMAKE_CURRENT_SOURCE_DIR}/src/scripts/EmscriptenPersistence.js"
-		"-s USE_SDL=2"
 		"-s MODULARIZE=1"
-		"-s EXPORT_NAME=\"'Love'\""	
+		"-s EXPORT_NAME=\"'Love'\""
 		"-s WASM=1"
 		"-s FULL_ES2=1"	
 		"-s DISABLE_EXCEPTION_CATCHING=0" # Might be worth building a whitelist for EXCEPTION_CATCHING_WHITELIST
@@ -1841,9 +1840,9 @@ if(EMSCRIPTEN)
 		"-s FORCE_FILESYSTEM=1" # to fix Module.addDependency not existing
 		"-lidbfs.js" # to fix the ReferenceError: IDBFS is not defined
                 "-lwebsocket.js" # websocket API
-                 "-s EXPORTED_RUNTIME_METHODS=\"['getMemory']\""
-                ## "-s EXPORTED_FUNCTIONS=\"['_malloc']\""
-                "-ldylink.js"  "-s RELOCATABLE=1"
+                "-ldylink.js" # getMemory
+                "-s EXPORTED_RUNTIME_METHODS=\"['getMemory']\""
+                "-s RELOCATABLE=1" # needed ldylink.js
 	)
 
 	if(NOT LOVEJS_COMPAT)
@@ -1851,7 +1850,7 @@ if(EMSCRIPTEN)
 		  ${EMSCRIPTEN_ARGS}
                   "-sERROR_ON_UNDEFINED_SYMBOLS=0" # for -ldylink.js
 			"-s USE_PTHREADS=1"
-			"-s PTHREAD_POOL_SIZE=8"	
+			"-s PTHREAD_POOL_SIZE=4"	
 		      )
        
                       # set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
-- 
2.43.0

