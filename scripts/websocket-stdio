#!/usr/bin/env luajit
 local help_string = "./websocket-stdio [-i *.html | -b builtin] [opts]\nMap websocket read write events to stdin and stdout events.\n\n  -i html file to map to index.html\n  -b use a builtin html file for index.html\n  -d root directory of files to serve - optional\n  -t host - optional - defaults to localhost\n  -p websocket port - optional - defaults to 9000\n  -l log file - optional - won't log unless provided\n  -a list all available builtin html files\n  -h show this text\n\nexamples:\n## Host index.html at localhost:8080/\n./websocket-stdio -i index.html -p 8080\n\n## Host repl.html at localhost:8080/ and All files in project folder will\n## be available under localhost:8080/. For example localhost:8080/src/main.lua\n./websocket-stdio -i repl.html -d project-folder/ -p 8080\n\n## Use the builtin html file lovejs-repl on port 3000\n./websocket-stdio -b lovejs-repl -d game-folder/ -p 3000"



























 local _loader package.preload["luarocks.loader"] = package.preload["luarocks.loader"] or function(...) --- A module which installs a Lua package loader that is LuaRocks-aware.
-- This loader uses dependency information from the LuaRocks tree to load
-- correct versions of modules. It does this by constructing a "context"
-- table in the environment, which records which versions of packages were
-- used to load previous modules, so that the loader chooses versions
-- that are declared to be compatible with the ones loaded earlier.

-- luacheck: globals luarocks

local loaders = package.loaders or package.searchers
local require, ipairs, table, type, next, tostring, error =
      require, ipairs, table, type, next, tostring, error
local unpack = unpack or table.unpack

local loader = {}

local is_clean = not package.loaded["luarocks.core.cfg"]

-- This loader module depends only on core modules.
local cfg = require("luarocks.core.cfg")
local cfg_ok, err = cfg.init()
if cfg_ok then
   cfg.init_package_paths()
end

local path = require("luarocks.core.path")
local manif = require("luarocks.core.manif")
local vers = require("luarocks.core.vers")
local require = nil  -- luacheck: ignore 411
--------------------------------------------------------------------------------

-- Workaround for wrappers produced by older versions of LuaRocks
local temporary_global = false
local status, luarocks_value = pcall(function() return luarocks end)
if status and luarocks_value then
   -- The site_config.lua file generated by old versions uses module(),
   -- so it produces a global `luarocks` table. Since we have the table,
   -- add the `loader` field to make the old wrappers happy.
   luarocks.loader = loader
else
   -- When a new version is installed on top of an old version,
   -- site_config.lua may be replaced, and then it no longer creates
   -- a global.
   -- Detect when being called via -lluarocks.loader; this is
   -- most likely a wrapper.
   local info = debug and debug.getinfo(2, "nS")
   if info and info.what == "C" and not info.name then
      luarocks = { loader = loader }
      temporary_global = true
      -- For the other half of this hack,
      -- see the next use of `temporary_global` below.
   end
end

loader.context = {}

--- Process the dependencies of a package to determine its dependency
-- chain for loading modules.
-- @param name string: The name of an installed rock.
-- @param version string: The version of the rock, in string format
function loader.add_context(name, version)
   -- assert(type(name) == "string")
   -- assert(type(version) == "string")

   if temporary_global then
      -- The first thing a wrapper does is to call add_context.
      -- From here on, it's safe to clean the global environment.
      luarocks = nil
      temporary_global = false
   end

   local tree_manifests = manif.load_rocks_tree_manifests()
   if not tree_manifests then
      return nil
   end

   return manif.scan_dependencies(name, version, tree_manifests, loader.context)
end

--- Internal sorting function.
-- @param a table: A provider table.
-- @param b table: Another provider table.
-- @return boolean: True if the version of a is greater than that of b.
local function sort_versions(a,b)
   return a.version > b.version
end

--- Request module to be loaded through other loaders,
-- once the proper name of the module has been determined.
-- For example, in case the module "socket.core" has been requested
-- to the LuaRocks loader and it determined based on context that
-- the version 2.0.2 needs to be loaded and it is not the current
-- version, the module requested for the other loaders will be
-- "socket.core_2_0_2".
-- @param module The module name requested by the user, such as "socket.core"
-- @param name The rock name, such as "luasocket"
-- @param version The rock version, such as "2.0.2-1"
-- @param module_name The actual module name, such as "socket.core" or "socket.core_2_0_2".
-- @return table or (nil, string): The module table as returned by some other loader,
-- or nil followed by an error message if no other loader managed to load the module.
local function call_other_loaders(module, name, version, module_name)
   for _, a_loader in ipairs(loaders) do
      if a_loader ~= loader.luarocks_loader then
         local results = { a_loader(module_name) }
         if type(results[1]) == "function" then
            return unpack(results)
         end
      end
   end
   return "Failed loading module "..module.." in LuaRocks rock "..name.." "..version
end

local function add_providers(providers, entries, tree, module, filter_file_name)
   for i, entry in ipairs(entries) do
      local name, version = entry:match("^([^/]*)/(.*)$")
      local file_name = tree.manifest.repository[name][version][1].modules[module]
      if type(file_name) ~= "string" then
         error("Invalid data in manifest file for module "..tostring(module).." (invalid data for "..tostring(name).." "..tostring(version)..")")
      end
      file_name = filter_file_name(file_name, name, version, tree.tree, i)
      if loader.context[name] == version then
         return name, version, file_name
      end
      version = vers.parse_version(version)
      table.insert(providers, {name = name, version = version, module_name = file_name, tree = tree})
   end
end

--- Search for a module in the rocks trees
-- @param module string: module name (eg. "socket.core")
-- @param filter_file_name function(string, string, string, string, number):
-- a function that takes the module file name (eg "socket/core.so"), the rock name
-- (eg "luasocket"), the version (eg "2.0.2-1"), the path of the rocks tree
-- (eg "/usr/local"), and the numeric index of the matching entry, so the
-- filter function can know if the matching module was the first entry or not.
-- @return string, string, string, (string or table):
-- * name of the rock containing the module (eg. "luasocket")
-- * version of the rock (eg. "2.0.2-1")
-- * return value of filter_file_name
-- * tree of the module (string or table in `tree_manifests` format)
local function select_module(module, filter_file_name)
   --assert(type(module) == "string")
   --assert(type(filter_module_name) == "function")

   local tree_manifests = manif.load_rocks_tree_manifests()
   if not tree_manifests then
      return nil
   end

   local providers = {}
   local initmodule
   for _, tree in ipairs(tree_manifests) do
      local entries = tree.manifest.modules[module]
      if entries then
         local n, v, f = add_providers(providers, entries, tree, module, filter_file_name)
         if n then
            return n, v, f
         end
      else
         initmodule = initmodule or module .. ".init"
         entries = tree.manifest.modules[initmodule]
         if entries then
            local n, v, f = add_providers(providers, entries, tree, initmodule, filter_file_name)
            if n then
               return n, v, f
            end
         end
      end
   end

   if next(providers) then
      table.sort(providers, sort_versions)
      local first = providers[1]
      return first.name, first.version.string, first.module_name, first.tree
   end
end

--- Search for a module
-- @param module string: module name (eg. "socket.core")
-- @return string, string, string, (string or table):
-- * name of the rock containing the module (eg. "luasocket")
-- * version of the rock (eg. "2.0.2-1")
-- * name of the module (eg. "socket.core", or "socket.core_2_0_2" if file is stored versioned).
-- * tree of the module (string or table in `tree_manifests` format)
local function pick_module(module)
   return
      select_module(module, function(file_name, name, version, tree, i)
         if i > 1 then
            file_name = path.versioned_name(file_name, "", name, version)
         end
         return path.path_to_module(file_name)
      end)
end

--- Return the pathname of the file that would be loaded for a module.
-- @param module string: module name (eg. "socket.core")
-- @return filename of the module (eg. "/usr/local/lib/lua/5.1/socket/core.so"),
-- the rock name and the rock version.
function loader.which(module)
   local rock_name, rock_version, file_name = select_module(module, path.which_i)
   return file_name, rock_name, rock_version
end

--- Package loader for LuaRocks support.
-- A module is searched in installed rocks that match the
-- current LuaRocks context. If module is not part of the
-- context, or if a context has not yet been set, the module
-- in the package with the highest version is used.
-- @param module string: The module name, like in plain require().
-- @return table: The module table (typically), like in plain
-- require(). See <a href="http://www.lua.org/manual/5.1/manual.html#pdf-require">require()</a>
-- in the Lua reference manual for details.
function loader.luarocks_loader(module)
   local name, version, module_name = pick_module(module)
   if not name then
      return "No LuaRocks module found for "..module
   else
      loader.add_context(name, version)
      return call_other_loaders(module, name, version, module_name)
   end
end

table.insert(loaders, 1, loader.luarocks_loader)

if is_clean then
   for modname, _ in pairs(package.loaded) do
      if modname:match("^luarocks%.") then
         package.loaded[modname] = nil
      end
   end
end

return loader end _loader = require("luarocks.loader")
 local getopt = require("getopt")
 local lustache = require("lustache")

 local websocket_stdio_lib package.preload["lib.websocket-stdio-lib"] = package.preload["lib.websocket-stdio-lib"] or function(...) local fennel = require("lib.fennel") local _loader = require("luarocks.loader") local server = require("http.server") local headers = require("http.headers") local websocket = require("http.websocket") local tls = require("http.tls") local log local function _1_(self, file_name_3f) if file_name_3f then self["file-name"] = file_name_3f else end local ok, handle = pcall(io.open, self["file-name"], "w") if ok then self["file-handle"] = handle return nil else return nil end end local function _4_(self) if self["file-handle"] then local ok = pcall(io.close, self["file-handle"]) if ok then self["file-handle"] = nil return nil else return nil end else return nil end end local function _7_(self, message_7chandle_3f, message_3f) local message = (message_3f or message_7chandle_3f) local handle if message_3f then handle = message_7chandle_3f else handle = nil end if not self["file-handle"] then self:open() else end if self["file-handle"] then if handle then self["file-handle"]:write(handle) self["file-handle"]:write(" ") else end self["file-handle"]:write(message) self["file-handle"]:write("\n") return self["file-handle"]:flush() else return nil end end local function _12_(self) self.enabled = false return nil end local function _13_(self) self.enabled = true return nil end local function _14_(self, ...) if self.enabled then return self:log(...) else return nil end end log = setmetatable({["file-handle"] = nil, ["file-name"] = "log~", enabled = true}, {__index = {open = _1_, close = _4_, log = _7_, disable = _12_, enable = _13_}, __call = _14_}) local function load_html(file_name, internal_server_error_3f) local internal_server_error = (internal_server_error_3f or "<html>\n<head><title>Page Load Error</title</head>\n<body>\n<p>The server failed to load the page requested</p>\n</body\n</html") local ok, html = nil, nil local function _16_() local fin = io.open(file_name) local function close_handlers_12_(ok_13_, ...) fin:close() if ok_13_ then



 return ... else return error(..., 0) end end local function _18_() return fin:read("*all") end local _20_ do local t_19_ = _G if (nil ~= t_19_) then t_19_ = t_19_.package else end if (nil ~= t_19_) then t_19_ = t_19_.loaded else end if (nil ~= t_19_) then t_19_ = t_19_.fennel else end _20_ = t_19_ end local or_24_ = _20_ or _G.debug if not or_24_ then local function _25_() return "" end or_24_ = {traceback = _25_} end return close_handlers_12_(_G.xpcall(_18_, or_24_.traceback)) end ok, html = pcall(_16_) if ok then return html, 200 else return internal_server_error, 500 end end local function make_static_response(msg, status, content_type_3f) local function _27_(_s, stream, req_headers) local req_method = req_headers:get(":method") local res_headers = headers.new() for key, value in pairs({[":status"] = tostring(status), ["content-type"] = (content_type_3f or "text/html; charset=utf-8")}) do res_headers:append(key, value) end assert(stream:write_headers(res_headers, (req_method == "HEAD"))) if (req_method ~= "HEAD") then return assert(stream:write_chunk(msg, true)) else return nil end end return _27_ end local function make_static_page(page) local function _29_(_s, stream, req_headers) local msg, status = load_html(page) local req_method = req_headers:get(":method") local res_headers = headers.new() for key, value in pairs({[":status"] = tostring(status), ["content-type"] = "text/html; charset=utf-8"}) do res_headers:append(key, value) end assert(stream:write_headers(res_headers, (req_method == "HEAD"))) if (req_method ~= "HEAD") then return assert(stream:write_chunk(msg, true)) else return nil end end return _29_ end local watcher local function _31_(self, dir) if ("/" == dir:sub(#dir, #dir)) then self.dir = dir else self.dir = (dir .. "/") end return nil end local function _33_(self, callback, dir_3f) local function append__2f(dir) if ("/" == dir:sub(#dir, #dir)) then return dir else return (dir .. "/") end end local lfs = require("lfs") local dir = append__2f((dir_3f or self.dir)) for file in lfs.dir(dir) do if ((file ~= ".") and (file ~= "..")) then local dfile = (dir .. file) local atts = lfs.attributes(dfile) if atts then local _35_ = atts.mode if (_35_ == "file") then if (atts.modification > self["last-modified"]) then self["last-modified"] = atts.modification callback(self, dfile, atts) else end elseif (_35_ == "directory") then self["check-modified"](self, callback, dfile) else end else end else end end return nil end local function _40_(self) local function _42_(self0, _file, _41_) local modification = _41_["modification"] self0["last-modified"] = modification return nil end self["check-modified"](self, _42_) return self["last-modified"] end local function _43_(self, callback) local function _45_(self0, file, _44_) local modification = _44_["modification"] self0["last-modified"] = modification return callback(file) end return self["check-modified"](self, _45_) end local function _46_(self, callback) local cqueues = require("cqueues") self["get-last-modified"](self) while true do self:step(callback) cqueues.sleep(self["check-period"]) end return nil end watcher = setmetatable({dir = "./", ["check-period"] = 0.1, ["last-modified"] = 0}, {__index = {["set-directory"] = _31_, ["check-modified"] = _33_, ["get-last-modified"] = _40_, step = _43_, loop = _46_}}) local r404 = make_static_response("404 - Page not found\n", 404) local function ws(ws_server, stream, req_headers) log("*opening-new-websocket") local function loop(ws0) local _47_ = ws0.got_close_code if (_47_ == 1000) then return ws0:close(1000, "Connection Closed") else local _ = _47_ local _48_ = ws0:receive() if (nil ~= _48_) then local msg = _48_ io.stdout:write(msg) log("*msg", msg) io.stdout:flush() return loop(ws0) else return nil end end end local function stdin(handle, ws0) local function loop0() local input = handle:read() log("*stdin", input) log("*ws", fennel.view(ws0, {["one-line?"] = true})) ws0:send(input) return loop0() end return loop0 end local res_headers = headers.new() local _51_ = req_headers:get("connection") if (_51_ == "Upgrade") then local new_ws = websocket.new_from_stream(stream, req_headers) local success_3f, err, err_no = new_ws:accept({headers = res_headers}) if err then log("*con-failed", fennel.view({err, err_no, new_ws}, {["one-line?"] = true})) else end if success_3f then log("*con-success", fennel.view(new_ws, {["one-line?"] = true})) local cs = require("cqueues.socket") ws_server.cq:wrap(stdin(cs.fdopen(0), new_ws)) return loop(new_ws) else return nil end else return nil end end local function file_change_events(_server, stream, _req_headers, serve_directories) local res_headers = headers.new() if serve_directories then local serve_directory = serve_directories[1] local match_string = serve_directories[1]:gsub("%.", "%%%.") log("*file-change-events", "Success!") res_headers:append(":status", "200") res_headers:append("content-type", "text/event-stream") assert(stream:write_headers(res_headers, false)) watcher.dir = serve_directory watcher["check-period"] = 0.1 assert(stream:write_chunk((": comment" .. "\n\n"), false)) assert(stream:write_chunk(("data: #connected" .. "\n\n"), false)) local function _55_(file) log("*watcher", file) assert(stream:write_chunk((": comment" .. "\n\n"), false)) return assert(stream:write_chunk(("data: " .. file:gsub(match_string, "") .. "\n\n"), false)) end return watcher:loop(_55_, serve_directory) else log("*file-change-events", "Failed!") res_headers:append(":status", "500") res_headers:append("content-type", "text/text") assert(stream:write_headers(res_headers, false)) return assert(stream:write_chunk("Error 500: The server is not configured to host static pages.", false)) end end local function make_paths(opts, builtin) local path if (opts.b and builtin) then path = builtin[opts.b].path({port = opts.p, host = opts.t}) elseif opts.i then path = {["/"] = make_static_page(opts.i)} else path = nil end path["/ws"] = ws path["/file-change-events"] = file_change_events return path end local function err(ws_server, ctx, op, err0, errno) local function _58_() if err0 then return (": " .. tostring(err0)) else return "" end end return log("*err", string.format("%s on %s failed%s", op, tostring(ctx), _58_())) end local function get_static_file(file__2f, serve_directories) local lfs = require("lfs") local file = file__2f:sub(2, #file__2f) if serve_directories then for _, serve_directory in ipairs(serve_directories) do local dfile = ((serve_directory or "./") .. file) local attrs = lfs.attributes(dfile) log("*serve-directory", (serve_directory or "Not Defined!")) log("*file", dfile) log("*attrs", fennel.view(attrs, {["one-line?"] = true})) if (serve_directory and attrs and (attrs.mode == "file")) then local fin = io.open(dfile, "r") local str = (fin and fin:read("*all")) if fin then fin:close() else end if str then local content_type if dfile:find("%.wasm$") then content_type = "application/wasm" elseif dfile:find("%.js$") then content_type = "text/javascript" elseif dfile:find("%.html$") then content_type = "text/html" else content_type = nil end local fun = make_static_response(str, 200, content_type) return fun else end else end end return nil else return nil end end local function new_server(opts, builtin) local port = (opts.p or 9000) local paths = make_paths(opts, builtin) log:disable() if opts.l then log:enable() if ("string" == type(opts.l)) then log["file-name"] = opts.l else end else end local serve_directories if opts.d then local function process_directory(dir) local function _66_(dir0) if ("/" ~= dir0:sub(#dir0, #dir0)) then return (dir0 .. "/") else return dir0 end end local function _68_(dir0) if ("./" ~= dir0:sub(1, 2)) then return ("./" .. dir0) else return dir0 end end return _66_(_68_(dir)) end local tbl_21_ = {} local i_22_ = 0 for dir in opts.d:gmatch("([^,]*)") do local val_23_ if (dir ~= "") then val_23_ = process_directory(dir) else val_23_ = nil end if (nil ~= val_23_) then i_22_ = (i_22_ + 1) tbl_21_[i_22_] = val_23_ else end end serve_directories = tbl_21_ else serve_directories = nil end local function reply(s, stream) local req_headers = assert(stream:get_headers()) local path_fun = (paths[req_headers:get(":path")] or get_static_file(req_headers:get(":path"), serve_directories) or r404) log("*path", req_headers:get(":path")) log("*headers", fennel.view(req_headers, {["one-line?"] = true})) return path_fun(s, stream, req_headers, serve_directories) end local ws_server local _73_ if ("localhost" == opts.t) then _73_ = opts.t else _73_ = "0.0.0.0" end ws_server = assert(server.listen({host = _73_, port = port, onstream = reply, onerror = err})) return ws_server end return {["new-server"] = new_server, watcher = watcher, ["make-static-response"] = make_static_response, ["make-static-page"] = make_static_page} end package.preload["lib.fennel"] = package.preload["lib.fennel"] or function(...) -- SPDX-License-Identifier: MIT
-- SPDX-FileCopyrightText: Calvin Rose and contributors
package.preload["fennel.repl"] = package.preload["fennel.repl"] or function(...)
  local utils = require("fennel.utils")
  local parser = require("fennel.parser")
  local compiler = require("fennel.compiler")
  local specials = require("fennel.specials")
  local view = require("fennel.view")
  local depth = 0
  local function prompt_for(top_3f)
    if top_3f then
      return (string.rep(">", (depth + 1)) .. " ")
    else
      return (string.rep(".", (depth + 1)) .. " ")
    end
  end
  local function default_read_chunk(parser_state)
    io.write(prompt_for((0 == parser_state["stack-size"])))
    io.flush()
    local input = io.read()
    return (input and (input .. "\n"))
  end
  local function default_on_values(xs)
    io.write(table.concat(xs, "\9"))
    return io.write("\n")
  end
  local function default_on_error(errtype, err)
    local function _702_()
      local _701_0 = errtype
      if (_701_0 == "Runtime") then
        return (compiler.traceback(tostring(err), 4) .. "\n")
      else
        local _ = _701_0
        return ("%s error: %s\n"):format(errtype, tostring(err))
      end
    end
    return io.write(_702_())
  end
  local function splice_save_locals(env, lua_source, scope)
    local saves = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for name in pairs(env.___replLocals___) do
        local val_19_ = ("local %s = ___replLocals___[%q]"):format((scope.manglings[name] or name), name)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      saves = tbl_17_
    end
    local binds = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for raw, name in pairs(scope.manglings) do
        local val_19_ = nil
        if not scope.gensyms[name] then
          val_19_ = ("___replLocals___[%q] = %s"):format(raw, name)
        else
        val_19_ = nil
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      binds = tbl_17_
    end
    local gap = nil
    if lua_source:find("\n") then
      gap = "\n"
    else
      gap = " "
    end
    local function _708_()
      if next(saves) then
        return (table.concat(saves, " ") .. gap)
      else
        return ""
      end
    end
    local function _711_()
      local _709_0, _710_0 = lua_source:match("^(.*)[\n ](return .*)$")
      if ((nil ~= _709_0) and (nil ~= _710_0)) then
        local body = _709_0
        local _return = _710_0
        return (body .. gap .. table.concat(binds, " ") .. gap .. _return)
      else
        local _ = _709_0
        return lua_source
      end
    end
    return (_708_() .. _711_())
  end
  local commands = {}
  local function completer(env, scope, text, _3ffulltext, _from, _to)
    local max_items = 2000
    local seen = {}
    local matches = {}
    local input_fragment = text:gsub(".*[%s)(]+", "")
    local stop_looking_3f = false
    local function add_partials(input, tbl, prefix)
      local scope_first_3f = ((tbl == env) or (tbl == env.___replLocals___))
      local tbl_17_ = matches
      local i_18_ = #tbl_17_
      local function _713_()
        if scope_first_3f then
          return scope.manglings
        else
          return tbl
        end
      end
      for k, is_mangled in utils.allpairs(_713_()) do
        if (max_items <= #matches) then break end
        local val_19_ = nil
        do
          local lookup_k = nil
          if scope_first_3f then
            lookup_k = is_mangled
          else
            lookup_k = k
          end
          if ((type(k) == "string") and (input == k:sub(0, #input)) and not seen[k] and ((":" ~= prefix:sub(-1)) or ("function" == type(tbl[lookup_k])))) then
            seen[k] = true
            val_19_ = (prefix .. k)
          else
          val_19_ = nil
          end
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      return tbl_17_
    end
    local function descend(input, tbl, prefix, add_matches, method_3f)
      local splitter = nil
      if method_3f then
        splitter = "^([^:]+):(.*)"
      else
        splitter = "^([^.]+)%.(.*)"
      end
      local head, tail = input:match(splitter)
      local raw_head = (scope.manglings[head] or head)
      if (type(tbl[raw_head]) == "table") then
        stop_looking_3f = true
        if method_3f then
          return add_partials(tail, tbl[raw_head], (prefix .. head .. ":"))
        else
          return add_matches(tail, tbl[raw_head], (prefix .. head))
        end
      end
    end
    local function add_matches(input, tbl, prefix)
      local prefix0 = nil
      if prefix then
        prefix0 = (prefix .. ".")
      else
        prefix0 = ""
      end
      if (not input:find("%.") and input:find(":")) then
        return descend(input, tbl, prefix0, add_matches, true)
      elseif not input:find("%.") then
        return add_partials(input, tbl, prefix0)
      else
        return descend(input, tbl, prefix0, add_matches, false)
      end
    end
    do
      local _722_0 = tostring((_3ffulltext or text)):match("^%s*,([^%s()[%]]*)$")
      if (nil ~= _722_0) then
        local cmd_fragment = _722_0
        add_partials(cmd_fragment, commands, ",")
      else
        local _ = _722_0
        for _0, source in ipairs({scope.specials, scope.macros, (env.___replLocals___ or {}), env, env._G}) do
          if stop_looking_3f then break end
          add_matches(input_fragment, source)
        end
      end
    end
    return matches
  end
  local function command_3f(input)
    return input:match("^%s*,")
  end
  local function command_docs()
    local _724_
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for name, f in utils.stablepairs(commands) do
        local val_19_ = ("  ,%s - %s"):format(name, ((compiler.metadata):get(f, "fnl/docstring") or "undocumented"))
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      _724_ = tbl_17_
    end
    return table.concat(_724_, "\n")
  end
  commands.help = function(_, _0, on_values)
    return on_values({("Welcome to Fennel.\nThis is the REPL where you can enter code to be evaluated.\nYou can also run these repl commands:\n\n" .. command_docs() .. "\n  ,return FORM - Evaluate FORM and return its value to the REPL's caller.\n  ,exit - Leave the repl.\n\nUse ,doc something to see descriptions for individual macros and special forms.\nValues from previous inputs are kept in *1, *2, and *3.\n\nFor more information about the language, see https://fennel-lang.org/reference")})
  end
  do end (compiler.metadata):set(commands.help, "fnl/docstring", "Show this message.")
  local function reload(module_name, env, on_values, on_error)
    local _726_0, _727_0 = pcall(specials["load-code"]("return require(...)", env), module_name)
    if ((_726_0 == true) and (nil ~= _727_0)) then
      local old = _727_0
      local _ = nil
      package.loaded[module_name] = nil
      _ = nil
      local new = nil
      do
        local _728_0, _729_0 = pcall(require, module_name)
        if ((_728_0 == true) and (nil ~= _729_0)) then
          local new0 = _729_0
          new = new0
        elseif (true and (nil ~= _729_0)) then
          local _0 = _728_0
          local msg = _729_0
          on_error("Repl", msg)
          new = old
        else
        new = nil
        end
      end
      specials["macro-loaded"][module_name] = nil
      if ((type(old) == "table") and (type(new) == "table")) then
        for k, v in pairs(new) do
          old[k] = v
        end
        for k in pairs(old) do
          if (nil == new[k]) then
            old[k] = nil
          end
        end
        package.loaded[module_name] = old
      end
      return on_values({"ok"})
    elseif ((_726_0 == false) and (nil ~= _727_0)) then
      local msg = _727_0
      if msg:match("loop or previous error loading module") then
        package.loaded[module_name] = nil
        return reload(module_name, env, on_values, on_error)
      elseif specials["macro-loaded"][module_name] then
        specials["macro-loaded"][module_name] = nil
        return nil
      else
        local function _734_()
          local _733_0 = msg:gsub("\n.*", "")
          return _733_0
        end
        return on_error("Runtime", _734_())
      end
    end
  end
  local function run_command(read, on_error, f)
    local _737_0, _738_0, _739_0 = pcall(read)
    if ((_737_0 == true) and (_738_0 == true) and (nil ~= _739_0)) then
      local val = _739_0
      local _740_0, _741_0 = pcall(f, val)
      if ((_740_0 == false) and (nil ~= _741_0)) then
        local msg = _741_0
        return on_error("Runtime", msg)
      end
    elseif (_737_0 == false) then
      return on_error("Parse", "Couldn't parse input.")
    end
  end
  commands.reload = function(env, read, on_values, on_error)
    local function _744_(_241)
      return reload(tostring(_241), env, on_values, on_error)
    end
    return run_command(read, on_error, _744_)
  end
  do end (compiler.metadata):set(commands.reload, "fnl/docstring", "Reload the specified module.")
  commands.reset = function(env, _, on_values)
    env.___replLocals___ = {}
    return on_values({"ok"})
  end
  do end (compiler.metadata):set(commands.reset, "fnl/docstring", "Erase all repl-local scope.")
  commands.complete = function(env, read, on_values, on_error, scope, chars)
    local function _745_()
      return on_values(completer(env, scope, table.concat(chars):gsub("^%s*,complete%s+", ""):sub(1, -2)))
    end
    return run_command(read, on_error, _745_)
  end
  do end (compiler.metadata):set(commands.complete, "fnl/docstring", "Print all possible completions for a given input symbol.")
  local function apropos_2a(pattern, tbl, prefix, seen, names)
    for name, subtbl in pairs(tbl) do
      if (("string" == type(name)) and (package ~= subtbl)) then
        local _746_0 = type(subtbl)
        if (_746_0 == "function") then
          if ((prefix .. name)):match(pattern) then
            table.insert(names, (prefix .. name))
          end
        elseif (_746_0 == "table") then
          if not seen[subtbl] then
            local _748_
            do
              seen[subtbl] = true
              _748_ = seen
            end
            apropos_2a(pattern, subtbl, (prefix .. name:gsub("%.", "/") .. "."), _748_, names)
          end
        end
      end
    end
    return names
  end
  local function apropos(pattern)
    return apropos_2a(pattern:gsub("^_G%.", ""), package.loaded, "", {}, {})
  end
  commands.apropos = function(_env, read, on_values, on_error, _scope)
    local function _752_(_241)
      return on_values(apropos(tostring(_241)))
    end
    return run_command(read, on_error, _752_)
  end
  do end (compiler.metadata):set(commands.apropos, "fnl/docstring", "Print all functions matching a pattern in all loaded modules.")
  local function apropos_follow_path(path)
    local paths = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for p in path:gmatch("[^%.]+") do
        local val_19_ = p
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      paths = tbl_17_
    end
    local tgt = package.loaded
    for _, path0 in ipairs(paths) do
      if (nil == tgt) then break end
      local _755_
      do
        local _754_0 = path0:gsub("%/", ".")
        _755_ = _754_0
      end
      tgt = tgt[_755_]
    end
    return tgt
  end
  local function apropos_doc(pattern)
    local tbl_17_ = {}
    local i_18_ = #tbl_17_
    for _, path in ipairs(apropos(".*")) do
      local val_19_ = nil
      do
        local tgt = apropos_follow_path(path)
        if ("function" == type(tgt)) then
          local _756_0 = (compiler.metadata):get(tgt, "fnl/docstring")
          if (nil ~= _756_0) then
            local docstr = _756_0
            val_19_ = (docstr:match(pattern) and path)
          else
          val_19_ = nil
          end
        else
        val_19_ = nil
        end
      end
      if (nil ~= val_19_) then
        i_18_ = (i_18_ + 1)
        tbl_17_[i_18_] = val_19_
      end
    end
    return tbl_17_
  end
  commands["apropos-doc"] = function(_env, read, on_values, on_error, _scope)
    local function _760_(_241)
      return on_values(apropos_doc(tostring(_241)))
    end
    return run_command(read, on_error, _760_)
  end
  do end (compiler.metadata):set(commands["apropos-doc"], "fnl/docstring", "Print all functions that match the pattern in their docs")
  local function apropos_show_docs(on_values, pattern)
    for _, path in ipairs(apropos(pattern)) do
      local tgt = apropos_follow_path(path)
      if (("function" == type(tgt)) and (compiler.metadata):get(tgt, "fnl/docstring")) then
        on_values({specials.doc(tgt, path)})
        on_values({})
      end
    end
    return nil
  end
  commands["apropos-show-docs"] = function(_env, read, on_values, on_error)
    local function _762_(_241)
      return apropos_show_docs(on_values, tostring(_241))
    end
    return run_command(read, on_error, _762_)
  end
  do end (compiler.metadata):set(commands["apropos-show-docs"], "fnl/docstring", "Print all documentations matching a pattern in function name")
  local function resolve(identifier, _763_0, scope)
    local _764_ = _763_0
    local env = _764_
    local ___replLocals___ = _764_["___replLocals___"]
    local e = nil
    local function _765_(_241, _242)
      return (___replLocals___[scope.unmanglings[_242]] or env[_242])
    end
    e = setmetatable({}, {__index = _765_})
    local function _766_(...)
      local _767_0, _768_0 = ...
      if ((_767_0 == true) and (nil ~= _768_0)) then
        local code = _768_0
        local function _769_(...)
          local _770_0, _771_0 = ...
          if ((_770_0 == true) and (nil ~= _771_0)) then
            local val = _771_0
            return val
          else
            local _ = _770_0
            return nil
          end
        end
        return _769_(pcall(specials["load-code"](code, e)))
      else
        local _ = _767_0
        return nil
      end
    end
    return _766_(pcall(compiler["compile-string"], tostring(identifier), {scope = scope}))
  end
  commands.find = function(env, read, on_values, on_error, scope)
    local function _774_(_241)
      local _775_0 = nil
      do
        local _776_0 = utils["sym?"](_241)
        if (nil ~= _776_0) then
          local _777_0 = resolve(_776_0, env, scope)
          if (nil ~= _777_0) then
            _775_0 = debug.getinfo(_777_0)
          else
            _775_0 = _777_0
          end
        else
          _775_0 = _776_0
        end
      end
      if ((_G.type(_775_0) == "table") and (nil ~= _775_0.linedefined) and (nil ~= _775_0.short_src) and (nil ~= _775_0.source) and (_775_0.what == "Lua")) then
        local line = _775_0.linedefined
        local src = _775_0.short_src
        local source = _775_0.source
        local fnlsrc = nil
        do
          local _780_0 = compiler.sourcemap
          if (nil ~= _780_0) then
            _780_0 = _780_0[source]
          end
          if (nil ~= _780_0) then
            _780_0 = _780_0[line]
          end
          if (nil ~= _780_0) then
            _780_0 = _780_0[2]
          end
          fnlsrc = _780_0
        end
        return on_values({string.format("%s:%s", src, (fnlsrc or line))})
      elseif (_775_0 == nil) then
        return on_error("Repl", "Unknown value")
      else
        local _ = _775_0
        return on_error("Repl", "No source info")
      end
    end
    return run_command(read, on_error, _774_)
  end
  do end (compiler.metadata):set(commands.find, "fnl/docstring", "Print the filename and line number for a given function")
  commands.doc = function(env, read, on_values, on_error, scope)
    local function _785_(_241)
      local name = tostring(_241)
      local path = (utils["multi-sym?"](name) or {name})
      local ok_3f, target = nil, nil
      local function _786_()
        return (scope.specials[name] or utils["get-in"](scope.macros, path) or resolve(name, env, scope))
      end
      ok_3f, target = pcall(_786_)
      if ok_3f then
        return on_values({specials.doc(target, name)})
      else
        return on_error("Repl", ("Could not find " .. name .. " for docs."))
      end
    end
    return run_command(read, on_error, _785_)
  end
  do end (compiler.metadata):set(commands.doc, "fnl/docstring", "Print the docstring and arglist for a function, macro, or special form.")
  commands.compile = function(_, read, on_values, on_error, _0, _1, opts)
    local function _788_(_241)
      local _789_0, _790_0 = pcall(compiler.compile, _241, opts)
      if ((_789_0 == true) and (nil ~= _790_0)) then
        local result = _790_0
        return on_values({result})
      elseif (true and (nil ~= _790_0)) then
        local _2 = _789_0
        local msg = _790_0
        return on_error("Repl", ("Error compiling expression: " .. msg))
      end
    end
    return run_command(read, on_error, _788_)
  end
  do end (compiler.metadata):set(commands.compile, "fnl/docstring", "compiles the expression into lua and prints the result.")
  local function load_plugin_commands(plugins)
    for i = #(plugins or {}), 1, -1 do
      for name, f in pairs(plugins[i]) do
        local _792_0 = name:match("^repl%-command%-(.*)")
        if (nil ~= _792_0) then
          local cmd_name = _792_0
          commands[cmd_name] = f
        end
      end
    end
    return nil
  end
  local function run_command_loop(input, read, loop, env, on_values, on_error, scope, chars, opts)
    local command_name = input:match(",([^%s/]+)")
    do
      local _794_0 = commands[command_name]
      if (nil ~= _794_0) then
        local command = _794_0
        command(env, read, on_values, on_error, scope, chars, opts)
      else
        local _ = _794_0
        if ((command_name ~= "exit") and (command_name ~= "return")) then
          on_values({"Unknown command", command_name})
        end
      end
    end
    if ("exit" ~= command_name) then
      return loop((command_name == "return"))
    end
  end
  local function try_readline_21(opts, ok, readline)
    if ok then
      if readline.set_readline_name then
        readline.set_readline_name("fennel")
      end
      readline.set_options({histfile = "", keeplines = 1000})
      opts.readChunk = function(parser_state)
        local prompt = nil
        if (0 < parser_state["stack-size"]) then
          prompt = ".. "
        else
          prompt = ">> "
        end
        local str = readline.readline(prompt)
        if str then
          return (str .. "\n")
        end
      end
      local completer0 = nil
      opts.registerCompleter = function(repl_completer)
        completer0 = repl_completer
        return nil
      end
      local function repl_completer(text, from, to)
        if completer0 then
          readline.set_completion_append_character("")
          return completer0(text:sub(from, to), text, from, to)
        else
          return {}
        end
      end
      readline.set_complete_function(repl_completer)
      return readline
    end
  end
  local function should_use_readline_3f(opts)
    return (("dumb" ~= os.getenv("TERM")) and not opts.readChunk and not opts.registerCompleter)
  end
  local function repl(_3foptions)
    local old_root_options = utils.root.options
    local _803_ = utils.copy(_3foptions)
    local opts = _803_
    local _3ffennelrc = _803_["fennelrc"]
    local _ = nil
    opts.fennelrc = nil
    _ = nil
    local readline = (should_use_readline_3f(opts) and try_readline_21(opts, pcall(require, "readline")))
    local _0 = nil
    if _3ffennelrc then
      _0 = _3ffennelrc()
    else
    _0 = nil
    end
    local env = specials["wrap-env"]((opts.env or rawget(_G, "_ENV") or _G))
    local callbacks = {["view-opts"] = (opts["view-opts"] or {depth = 4}), env = env, onError = (opts.onError or default_on_error), onValues = (opts.onValues or default_on_values), pp = (opts.pp or view), readChunk = (opts.readChunk or default_read_chunk)}
    local save_locals_3f = (opts.saveLocals ~= false)
    local byte_stream, clear_stream = nil, nil
    local function _805_(_241)
      return callbacks.readChunk(_241)
    end
    byte_stream, clear_stream = parser.granulate(_805_)
    local chars = {}
    local read, reset = nil, nil
    local function _806_(parser_state)
      local b = byte_stream(parser_state)
      if b then
        table.insert(chars, string.char(b))
      end
      return b
    end
    read, reset = parser.parser(_806_)
    depth = (depth + 1)
    if opts.message then
      callbacks.onValues({opts.message})
    end
    env.___repl___ = callbacks
    opts.env, opts.scope = env, compiler["make-scope"]()
    opts.useMetadata = (opts.useMetadata ~= false)
    if (opts.allowedGlobals == nil) then
      opts.allowedGlobals = specials["current-global-names"](env)
    end
    if opts.init then
      opts.init(opts, depth)
    end
    if opts.registerCompleter then
      local function _812_()
        local _811_0 = opts.scope
        local function _813_(...)
          return completer(env, _811_0, ...)
        end
        return _813_
      end
      opts.registerCompleter(_812_())
    end
    load_plugin_commands(opts.plugins)
    if save_locals_3f then
      local function newindex(t, k, v)
        if opts.scope.manglings[k] then
          return rawset(t, k, v)
        end
      end
      env.___replLocals___ = setmetatable({}, {__newindex = newindex})
    end
    local function print_values(...)
      local vals = {...}
      local out = {}
      local pp = callbacks.pp
      env._, env.__ = vals[1], vals
      for i = 1, select("#", ...) do
        table.insert(out, pp(vals[i], callbacks["view-opts"]))
      end
      return callbacks.onValues(out)
    end
    local function save_value(...)
      env.___replLocals___["*3"] = env.___replLocals___["*2"]
      env.___replLocals___["*2"] = env.___replLocals___["*1"]
      env.___replLocals___["*1"] = ...
      return ...
    end
    opts.scope.manglings["*1"], opts.scope.unmanglings._1 = "_1", "*1"
    opts.scope.manglings["*2"], opts.scope.unmanglings._2 = "_2", "*2"
    opts.scope.manglings["*3"], opts.scope.unmanglings._3 = "_3", "*3"
    local function loop(exit_next_3f)
      for k in pairs(chars) do
        chars[k] = nil
      end
      reset()
      local ok, parser_not_eof_3f, form = pcall(read)
      local src_string = table.concat(chars)
      local readline_not_eof_3f = (not readline or (src_string ~= "(null)"))
      local not_eof_3f = (readline_not_eof_3f and parser_not_eof_3f)
      if not ok then
        callbacks.onError("Parse", not_eof_3f)
        clear_stream()
        return loop()
      elseif command_3f(src_string) then
        return run_command_loop(src_string, read, loop, env, callbacks.onValues, callbacks.onError, opts.scope, chars, opts)
      else
        if not_eof_3f then
          local function _817_(...)
            local _818_0, _819_0 = ...
            if ((_818_0 == true) and (nil ~= _819_0)) then
              local src = _819_0
              local function _820_(...)
                local _821_0, _822_0 = ...
                if ((_821_0 == true) and (nil ~= _822_0)) then
                  local chunk = _822_0
                  local function _823_()
                    return print_values(save_value(chunk()))
                  end
                  local function _824_(...)
                    return callbacks.onError("Runtime", ...)
                  end
                  return xpcall(_823_, _824_)
                elseif ((_821_0 == false) and (nil ~= _822_0)) then
                  local msg = _822_0
                  clear_stream()
                  return callbacks.onError("Compile", msg)
                end
              end
              local function _827_(...)
                local src0 = nil
                if save_locals_3f then
                  src0 = splice_save_locals(env, src, opts.scope)
                else
                  src0 = src
                end
                return pcall(specials["load-code"], src0, env)
              end
              return _820_(_827_(...))
            elseif ((_818_0 == false) and (nil ~= _819_0)) then
              local msg = _819_0
              clear_stream()
              return callbacks.onError("Compile", msg)
            end
          end
          local function _829_()
            opts["source"] = src_string
            return opts
          end
          _817_(pcall(compiler.compile, form, _829_()))
          utils.root.options = old_root_options
          if exit_next_3f then
            return env.___replLocals___["*1"]
          else
            return loop()
          end
        end
      end
    end
    local value = loop()
    depth = (depth - 1)
    if readline then
      readline.save_history()
    end
    if opts.exit then
      opts.exit(opts, depth)
    end
    return value
  end
  local function _835_(overrides, _3fopts)
    return repl(utils.copy(_3fopts, utils.copy(overrides)))
  end
  return setmetatable({}, {__call = _835_, __index = {repl = repl}})
end
package.preload["fennel.specials"] = package.preload["fennel.specials"] or function(...)
  local utils = require("fennel.utils")
  local view = require("fennel.view")
  local parser = require("fennel.parser")
  local compiler = require("fennel.compiler")
  local unpack = (table.unpack or _G.unpack)
  local SPECIALS = compiler.scopes.global.specials
  local function str1(x)
    return tostring(x[1])
  end
  local function wrap_env(env)
    local function _475_(_, key)
      if utils["string?"](key) then
        return env[compiler["global-unmangling"](key)]
      else
        return env[key]
      end
    end
    local function _477_(_, key, value)
      if utils["string?"](key) then
        env[compiler["global-unmangling"](key)] = value
        return nil
      else
        env[key] = value
        return nil
      end
    end
    local function _479_()
      local _480_
      do
        local tbl_14_ = {}
        for k, v in utils.stablepairs(env) do
          local k_15_, v_16_ = nil, nil
          local _481_
          if utils["string?"](k) then
            _481_ = compiler["global-unmangling"](k)
          else
            _481_ = k
          end
          k_15_, v_16_ = _481_, v
          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
            tbl_14_[k_15_] = v_16_
          end
        end
        _480_ = tbl_14_
      end
      return next, _480_, nil
    end
    return setmetatable({}, {__index = _475_, __newindex = _477_, __pairs = _479_})
  end
  local function fennel_module_name()
    return (utils.root.options.moduleName or "fennel")
  end
  local function current_global_names(_3fenv)
    local mt = nil
    do
      local _484_0 = getmetatable(_3fenv)
      if ((_G.type(_484_0) == "table") and (nil ~= _484_0.__pairs)) then
        local mtpairs = _484_0.__pairs
        local tbl_14_ = {}
        for k, v in mtpairs(_3fenv) do
          local k_15_, v_16_ = k, v
          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
            tbl_14_[k_15_] = v_16_
          end
        end
        mt = tbl_14_
      elseif (_484_0 == nil) then
        mt = (_3fenv or _G)
      else
      mt = nil
      end
    end
    local function _487_()
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for k in utils.stablepairs(mt) do
        local val_19_ = compiler["global-unmangling"](k)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      return tbl_17_
    end
    return (mt and _487_())
  end
  local function load_code(code, _3fenv, _3ffilename)
    local env = (_3fenv or rawget(_G, "_ENV") or _G)
    local _489_0, _490_0 = rawget(_G, "setfenv"), rawget(_G, "loadstring")
    if ((nil ~= _489_0) and (nil ~= _490_0)) then
      local setfenv = _489_0
      local loadstring = _490_0
      local f = assert(loadstring(code, _3ffilename))
      setfenv(f, env)
      return f
    else
      local _ = _489_0
      return assert(load(code, _3ffilename, "t", env))
    end
  end
  local function v__3edocstring(tgt)
    return (((compiler.metadata):get(tgt, "fnl/docstring") or "#<undocumented>")):gsub("\n$", ""):gsub("\n", "\n  ")
  end
  local function doc_2a(tgt, name)
    assert(("string" == type(name)), "name must be a string")
    if not tgt then
      return (name .. " not found")
    else
      local function _493_()
        local _492_0 = getmetatable(tgt)
        if ((_G.type(_492_0) == "table") and true) then
          local __call = _492_0.__call
          return ("function" == type(__call))
        end
      end
      if ((type(tgt) == "function") or _493_()) then
        local elts = {name, unpack(((compiler.metadata):get(tgt, "fnl/arglist") or {"#<unknown-arguments>"}))}
        return string.format("(%s)\n  %s", table.concat(elts, " "), v__3edocstring(tgt))
      else
        return string.format("%s\n  %s", name, v__3edocstring(tgt))
      end
    end
  end
  local function doc_special(name, arglist, docstring, body_form_3f)
    compiler.metadata[SPECIALS[name]] = {["fnl/arglist"] = arglist, ["fnl/body-form?"] = body_form_3f, ["fnl/docstring"] = docstring}
    return nil
  end
  local function compile_do(ast, scope, parent, _3fstart)
    local start = (_3fstart or 2)
    local len = #ast
    local sub_scope = compiler["make-scope"](scope)
    for i = start, len do
      compiler.compile1(ast[i], sub_scope, parent, {nval = 0})
    end
    return nil
  end
  SPECIALS["do"] = function(ast, scope, parent, opts, _3fstart, _3fchunk, _3fsub_scope, _3fpre_syms)
    local start = (_3fstart or 2)
    local sub_scope = (_3fsub_scope or compiler["make-scope"](scope))
    local chunk = (_3fchunk or {})
    local len = #ast
    local retexprs = {returned = true}
    utils.hook("pre-do", ast, sub_scope)
    local function compile_body(outer_target, outer_tail, outer_retexprs)
      for i = start, len do
        local subopts = {nval = (((i ~= len) and 0) or opts.nval), tail = (((i == len) and outer_tail) or nil), target = (((i == len) and outer_target) or nil)}
        local _ = utils["propagate-options"](opts, subopts)
        local subexprs = compiler.compile1(ast[i], sub_scope, chunk, subopts)
        if (i ~= len) then
          compiler["keep-side-effects"](subexprs, parent, nil, ast[i])
        end
      end
      compiler.emit(parent, chunk, ast)
      compiler.emit(parent, "end", ast)
      utils.hook("do", ast, sub_scope)
      return (outer_retexprs or retexprs)
    end
    if (opts.target or (opts.nval == 0) or opts.tail) then
      compiler.emit(parent, "do", ast)
      return compile_body(opts.target, opts.tail)
    elseif opts.nval then
      local syms = {}
      for i = 1, opts.nval do
        local s = ((_3fpre_syms and _3fpre_syms[i]) or compiler.gensym(scope))
        syms[i] = s
        retexprs[i] = utils.expr(s, "sym")
      end
      local outer_target = table.concat(syms, ", ")
      compiler.emit(parent, string.format("local %s", outer_target), ast)
      compiler.emit(parent, "do", ast)
      return compile_body(outer_target, opts.tail)
    else
      local fname = compiler.gensym(scope)
      local fargs = nil
      if scope.vararg then
        fargs = "..."
      else
        fargs = ""
      end
      compiler.emit(parent, string.format("local function %s(%s)", fname, fargs), ast)
      return compile_body(nil, true, utils.expr((fname .. "(" .. fargs .. ")"), "statement"))
    end
  end
  doc_special("do", {"..."}, "Evaluate multiple forms; return last value.", true)
  local function iter_args(ast)
    local ast0, len, i = ast, #ast, 1
    local function _499_()
      i = (1 + i)
      while ((i == len) and utils["call-of?"](ast0[i], "values")) do
        ast0 = ast0[i]
        len = #ast0
        i = 2
      end
      return ast0[i], (nil == ast0[(i + 1)])
    end
    return _499_
  end
  SPECIALS.values = function(ast, scope, parent)
    local exprs = {}
    for subast, last_3f in iter_args(ast) do
      local subexprs = compiler.compile1(subast, scope, parent, {nval = (not last_3f and 1)})
      table.insert(exprs, subexprs[1])
      if last_3f then
        for j = 2, #subexprs do
          table.insert(exprs, subexprs[j])
        end
      end
    end
    return exprs
  end
  doc_special("values", {"..."}, "Return multiple values from a function. Must be in tail position.")
  local function __3estack(stack, tbl)
    for k, v in pairs(tbl) do
      table.insert(stack, k)
      table.insert(stack, v)
    end
    return stack
  end
  local function literal_3f(val)
    local res = true
    if utils["list?"](val) then
      res = false
    elseif utils["table?"](val) then
      local stack = __3estack({}, val)
      for _, elt in ipairs(stack) do
        if not res then break end
        if utils["list?"](elt) then
          res = false
        elseif utils["table?"](elt) then
          __3estack(stack, elt)
        end
      end
    end
    return res
  end
  local function compile_value(v)
    local opts = {nval = 1, tail = false}
    local scope = compiler["make-scope"]()
    local chunk = {}
    local _503_ = compiler.compile1(v, scope, chunk, opts)
    local _504_ = _503_[1]
    local v0 = _504_[1]
    return v0
  end
  local function insert_meta(meta, k, v)
    local view_opts = {["escape-newlines?"] = true, ["line-length"] = math.huge, ["one-line?"] = true}
    compiler.assert((type(k) == "string"), ("expected string keys in metadata table, got: %s"):format(view(k, view_opts)))
    compiler.assert(literal_3f(v), ("expected literal value in metadata table, got: %s %s"):format(view(k, view_opts), view(v, view_opts)))
    table.insert(meta, view(k))
    local function _505_()
      if ("string" == type(v)) then
        return view(v, view_opts)
      else
        return compile_value(v)
      end
    end
    table.insert(meta, _505_())
    return meta
  end
  local function insert_arglist(meta, arg_list)
    local opts = {["escape-newlines?"] = true, ["line-length"] = math.huge, ["one-line?"] = true}
    local view_args = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, arg in ipairs(arg_list) do
        local val_19_ = view(view(arg, opts))
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      view_args = tbl_17_
    end
    table.insert(meta, "\"fnl/arglist\"")
    table.insert(meta, ("{" .. table.concat(view_args, ", ") .. "}"))
    return meta
  end
  local function set_fn_metadata(f_metadata, parent, fn_name)
    if utils.root.options.useMetadata then
      local meta_fields = {}
      for k, v in utils.stablepairs(f_metadata) do
        if (k == "fnl/arglist") then
          insert_arglist(meta_fields, v)
        else
          insert_meta(meta_fields, k, v)
        end
      end
      local meta_str = ("require(\"%s\").metadata"):format(fennel_module_name())
      return compiler.emit(parent, ("pcall(function() %s:setall(%s, %s) end)"):format(meta_str, fn_name, table.concat(meta_fields, ", ")))
    end
  end
  local function get_fn_name(ast, scope, fn_name, multi)
    if (fn_name and (fn_name[1] ~= "nil")) then
      local _509_
      if not multi then
        _509_ = compiler["declare-local"](fn_name, scope, ast)
      else
        _509_ = compiler["symbol-to-expression"](fn_name, scope)[1]
      end
      return _509_, not multi, 3
    else
      return nil, true, 2
    end
  end
  local function compile_named_fn(ast, f_scope, f_chunk, parent, index, fn_name, local_3f, arg_name_list, f_metadata)
    utils.hook("pre-fn", ast, f_scope)
    for i = (index + 1), #ast do
      compiler.compile1(ast[i], f_scope, f_chunk, {nval = (((i ~= #ast) and 0) or nil), tail = (i == #ast)})
    end
    local _512_
    if local_3f then
      _512_ = "local function %s(%s)"
    else
      _512_ = "%s = function(%s)"
    end
    compiler.emit(parent, string.format(_512_, fn_name, table.concat(arg_name_list, ", ")), ast)
    compiler.emit(parent, f_chunk, ast)
    compiler.emit(parent, "end", ast)
    set_fn_metadata(f_metadata, parent, fn_name)
    utils.hook("fn", ast, f_scope)
    return utils.expr(fn_name, "sym")
  end
  local function compile_anonymous_fn(ast, f_scope, f_chunk, parent, index, arg_name_list, f_metadata, scope)
    local fn_name = compiler.gensym(scope)
    return compile_named_fn(ast, f_scope, f_chunk, parent, index, fn_name, true, arg_name_list, f_metadata)
  end
  local function maybe_metadata(ast, pred, handler, mt, index)
    local index_2a = (index + 1)
    local index_2a_before_ast_end_3f = (index_2a < #ast)
    local expr = ast[index_2a]
    if (index_2a_before_ast_end_3f and pred(expr)) then
      return handler(mt, expr), index_2a
    else
      return mt, index
    end
  end
  local function get_function_metadata(ast, arg_list, index)
    local function _515_(_241, _242)
      local tbl_14_ = _241
      for k, v in pairs(_242) do
        local k_15_, v_16_ = k, v
        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
          tbl_14_[k_15_] = v_16_
        end
      end
      return tbl_14_
    end
    local function _517_(_241, _242)
      _241["fnl/docstring"] = _242
      return _241
    end
    return maybe_metadata(ast, utils["kv-table?"], _515_, maybe_metadata(ast, utils["string?"], _517_, {["fnl/arglist"] = arg_list}, index))
  end
  SPECIALS.fn = function(ast, scope, parent, opts)
    local f_scope = nil
    do
      local _518_0 = compiler["make-scope"](scope)
      _518_0["vararg"] = false
      f_scope = _518_0
    end
    local f_chunk = {}
    local fn_sym = utils["sym?"](ast[2])
    local multi = (fn_sym and utils["multi-sym?"](fn_sym[1]))
    local fn_name, local_3f, index = get_fn_name(ast, scope, fn_sym, multi, opts)
    local arg_list = compiler.assert(utils["table?"](ast[index]), "expected parameters table", ast)
    compiler.assert((not multi or not multi["multi-sym-method-call"]), ("unexpected multi symbol " .. tostring(fn_name)), fn_sym)
    if (multi and not scope.symmeta[multi[1]] and not compiler["global-allowed?"](multi[1])) then
      compiler.assert(nil, ("expected local table " .. multi[1]), ast[2])
    end
    local function destructure_arg(arg)
      local raw = utils.sym(compiler.gensym(scope))
      local declared = compiler["declare-local"](raw, f_scope, ast)
      compiler.destructure(arg, raw, ast, f_scope, f_chunk, {declaration = true, nomulti = true, symtype = "arg"})
      return declared
    end
    local function destructure_amp(i)
      compiler.assert((i == (#arg_list - 1)), "expected rest argument before last parameter", arg_list[(i + 1)], arg_list)
      f_scope.vararg = true
      compiler.destructure(arg_list[#arg_list], {utils.varg()}, ast, f_scope, f_chunk, {declaration = true, nomulti = true, symtype = "arg"})
      return "..."
    end
    local function get_arg_name(arg, i)
      if f_scope.vararg then
        return nil
      elseif utils["varg?"](arg) then
        compiler.assert((arg == arg_list[#arg_list]), "expected vararg as last parameter", ast)
        f_scope.vararg = true
        return "..."
      elseif utils["sym?"](arg, "&") then
        return destructure_amp(i)
      elseif (utils["sym?"](arg) and (tostring(arg) ~= "nil") and not utils["multi-sym?"](tostring(arg))) then
        return compiler["declare-local"](arg, f_scope, ast)
      elseif utils["table?"](arg) then
        return destructure_arg(arg)
      else
        return compiler.assert(false, ("expected symbol for function parameter: %s"):format(tostring(arg)), ast[index])
      end
    end
    local arg_name_list = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i, a in ipairs(arg_list) do
        local val_19_ = get_arg_name(a, i)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      arg_name_list = tbl_17_
    end
    local f_metadata, index0 = get_function_metadata(ast, arg_list, index)
    if fn_name then
      return compile_named_fn(ast, f_scope, f_chunk, parent, index0, fn_name, local_3f, arg_name_list, f_metadata)
    else
      return compile_anonymous_fn(ast, f_scope, f_chunk, parent, index0, arg_name_list, f_metadata, scope)
    end
  end
  doc_special("fn", {"name?", "args", "docstring?", "..."}, "Function syntax. May optionally include a name and docstring or a metadata table.\nIf a name is provided, the function will be bound in the current scope.\nWhen called with the wrong number of args, excess args will be discarded\nand lacking args will be nil, use lambda for arity-checked functions.", true)
  SPECIALS.lua = function(ast, _, parent)
    compiler.assert(((#ast == 2) or (#ast == 3)), "expected 1 or 2 arguments", ast)
    local _524_
    do
      local _523_0 = utils["sym?"](ast[2])
      if (nil ~= _523_0) then
        _524_ = tostring(_523_0)
      else
        _524_ = _523_0
      end
    end
    if ("nil" ~= _524_) then
      table.insert(parent, {ast = ast, leaf = tostring(ast[2])})
    end
    local _528_
    do
      local _527_0 = utils["sym?"](ast[3])
      if (nil ~= _527_0) then
        _528_ = tostring(_527_0)
      else
        _528_ = _527_0
      end
    end
    if ("nil" ~= _528_) then
      return tostring(ast[3])
    end
  end
  local function dot(ast, scope, parent)
    compiler.assert((1 < #ast), "expected table argument", ast)
    local len = #ast
    local lhs_node = compiler.macroexpand(ast[2], scope)
    local _531_ = compiler.compile1(lhs_node, scope, parent, {nval = 1})
    local lhs = _531_[1]
    if (len == 2) then
      return tostring(lhs)
    else
      local indices = {}
      for i = 3, len do
        local index = ast[i]
        if (utils["string?"](index) and utils["valid-lua-identifier?"](index)) then
          table.insert(indices, ("." .. index))
        else
          local _532_ = compiler.compile1(index, scope, parent, {nval = 1})
          local index0 = _532_[1]
          table.insert(indices, ("[" .. tostring(index0) .. "]"))
        end
      end
      if (not (utils["sym?"](lhs_node) or utils["list?"](lhs_node)) or ("nil" == tostring(lhs_node))) then
        return ("(" .. tostring(lhs) .. ")" .. table.concat(indices))
      else
        return (tostring(lhs) .. table.concat(indices))
      end
    end
  end
  SPECIALS["."] = dot
  doc_special(".", {"tbl", "key1", "..."}, "Look up key1 in tbl table. If more args are provided, do a nested lookup.")
  SPECIALS.global = function(ast, scope, parent)
    compiler.assert((#ast == 3), "expected name and value", ast)
    compiler.destructure(ast[2], ast[3], ast, scope, parent, {forceglobal = true, nomulti = true, symtype = "global"})
    return nil
  end
  doc_special("global", {"name", "val"}, "Set name as a global with val. Deprecated.")
  SPECIALS.set = function(ast, scope, parent)
    compiler.assert((#ast == 3), "expected name and value", ast)
    compiler.destructure(ast[2], ast[3], ast, scope, parent, {noundef = true, symtype = "set"})
    return nil
  end
  doc_special("set", {"name", "val"}, "Set a local variable to a new value. Only works on locals using var.")
  local function set_forcibly_21_2a(ast, scope, parent)
    compiler.assert((#ast == 3), "expected name and value", ast)
    compiler.destructure(ast[2], ast[3], ast, scope, parent, {forceset = true, symtype = "set"})
    return nil
  end
  SPECIALS["set-forcibly!"] = set_forcibly_21_2a
  local function local_2a(ast, scope, parent, opts)
    compiler.assert(((0 == opts.nval) or opts.tail), "can't introduce local here", ast)
    compiler.assert((#ast == 3), "expected name and value", ast)
    compiler.destructure(ast[2], ast[3], ast, scope, parent, {declaration = true, nomulti = true, symtype = "local"})
    return nil
  end
  SPECIALS["local"] = local_2a
  doc_special("local", {"name", "val"}, "Introduce new top-level immutable local.")
  SPECIALS.var = function(ast, scope, parent, opts)
    compiler.assert(((0 == opts.nval) or opts.tail), "can't introduce var here", ast)
    compiler.assert((#ast == 3), "expected name and value", ast)
    compiler.destructure(ast[2], ast[3], ast, scope, parent, {declaration = true, isvar = true, nomulti = true, symtype = "var"})
    return nil
  end
  doc_special("var", {"name", "val"}, "Introduce new mutable local.")
  local function kv_3f(t)
    local _536_
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for k in pairs(t) do
        local val_19_ = nil
        if ("number" ~= type(k)) then
          val_19_ = k
        else
        val_19_ = nil
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      _536_ = tbl_17_
    end
    return _536_[1]
  end
  SPECIALS.let = function(_539_0, scope, parent, opts)
    local _540_ = _539_0
    local _ = _540_[1]
    local bindings = _540_[2]
    local ast = _540_
    compiler.assert((utils["table?"](bindings) and not kv_3f(bindings)), "expected binding sequence", (bindings or ast[1]))
    compiler.assert(((#bindings % 2) == 0), "expected even number of name/value bindings", bindings)
    compiler.assert((3 <= #ast), "expected body expression", ast[1])
    local pre_syms = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _0 = 1, (opts.nval or 0) do
        local val_19_ = compiler.gensym(scope)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      pre_syms = tbl_17_
    end
    local sub_scope = compiler["make-scope"](scope)
    local sub_chunk = {}
    for i = 1, #bindings, 2 do
      compiler.destructure(bindings[i], bindings[(i + 1)], ast, sub_scope, sub_chunk, {declaration = true, nomulti = true, symtype = "let"})
    end
    return SPECIALS["do"](ast, scope, parent, opts, 3, sub_chunk, sub_scope, pre_syms)
  end
  doc_special("let", {"[name1 val1 ... nameN valN]", "..."}, "Introduces a new scope in which a given set of local bindings are used.", true)
  local function get_prev_line(parent)
    if ("table" == type(parent)) then
      return get_prev_line((parent.leaf or parent[#parent]))
    else
      return (parent or "")
    end
  end
  local function needs_separator_3f(root, prev_line)
    return (root:match("^%(") and prev_line and not prev_line:find(" end$"))
  end
  SPECIALS.tset = function(ast, scope, parent)
    compiler.assert((3 < #ast), "expected table, key, and value arguments", ast)
    compiler.assert(((type(ast[2]) ~= "boolean") and (type(ast[2]) ~= "number")), "cannot set field of literal value", ast)
    local root = str1(compiler.compile1(ast[2], scope, parent, {nval = 1}))
    local root0 = nil
    if root:match("^[.{\"]") then
      root0 = string.format("(%s)", root)
    else
      root0 = root
    end
    local keys = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i = 3, (#ast - 1) do
        local val_19_ = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      keys = tbl_17_
    end
    local value = str1(compiler.compile1(ast[#ast], scope, parent, {nval = 1}))
    local fmtstr = nil
    if needs_separator_3f(root0, get_prev_line(parent)) then
      fmtstr = "do end %s[%s] = %s"
    else
      fmtstr = "%s[%s] = %s"
    end
    return compiler.emit(parent, fmtstr:format(root0, table.concat(keys, "]["), value), ast)
  end
  doc_special("tset", {"tbl", "key1", "...", "keyN", "val"}, "Set the value of a table field. Deprecated in favor of set.")
  local function calculate_if_target(scope, opts)
    if not (opts.tail or opts.target or opts.nval) then
      return "iife", true, nil
    elseif (opts.nval and (opts.nval ~= 0) and not opts.target) then
      local accum = {}
      local target_exprs = {}
      for i = 1, opts.nval do
        local s = compiler.gensym(scope)
        accum[i] = s
        target_exprs[i] = utils.expr(s, "sym")
      end
      return "target", opts.tail, table.concat(accum, ", "), target_exprs
    else
      return "none", opts.tail, opts.target
    end
  end
  local function if_2a(ast, scope, parent, opts)
    compiler.assert((2 < #ast), "expected condition and body", ast)
    if ((1 == (#ast % 2)) and (ast[(#ast - 1)] == true)) then
      table.remove(ast, (#ast - 1))
    end
    if (1 == (#ast % 2)) then
      table.insert(ast, utils.sym("nil"))
    end
    if (#ast == 2) then
      return SPECIALS["do"](utils.list(utils.sym("do"), ast[2]), scope, parent, opts)
    else
      local do_scope = compiler["make-scope"](scope)
      local branches = {}
      local wrapper, inner_tail, inner_target, target_exprs = calculate_if_target(scope, opts)
      local body_opts = {nval = opts.nval, tail = inner_tail, target = inner_target}
      local function compile_body(i)
        local chunk = {}
        local cscope = compiler["make-scope"](do_scope)
        compiler["keep-side-effects"](compiler.compile1(ast[i], cscope, chunk, body_opts), chunk, nil, ast[i])
        return {chunk = chunk, scope = cscope}
      end
      for i = 2, (#ast - 1), 2 do
        local condchunk = {}
        local _549_ = compiler.compile1(ast[i], do_scope, condchunk, {nval = 1})
        local cond = _549_[1]
        local branch = compile_body((i + 1))
        branch.cond = cond
        branch.condchunk = condchunk
        branch.nested = ((i ~= 2) and (next(condchunk, nil) == nil))
        table.insert(branches, branch)
      end
      local else_branch = compile_body(#ast)
      local s = compiler.gensym(scope)
      local buffer = {}
      local last_buffer = buffer
      for i = 1, #branches do
        local branch = branches[i]
        local fstr = nil
        if not branch.nested then
          fstr = "if %s then"
        else
          fstr = "elseif %s then"
        end
        local cond = tostring(branch.cond)
        local cond_line = fstr:format(cond)
        if branch.nested then
          compiler.emit(last_buffer, branch.condchunk, ast)
        else
          for _, v in ipairs(branch.condchunk) do
            compiler.emit(last_buffer, v, ast)
          end
        end
        compiler.emit(last_buffer, cond_line, ast)
        compiler.emit(last_buffer, branch.chunk, ast)
        if (i == #branches) then
          compiler.emit(last_buffer, "else", ast)
          compiler.emit(last_buffer, else_branch.chunk, ast)
          compiler.emit(last_buffer, "end", ast)
        elseif not branches[(i + 1)].nested then
          local next_buffer = {}
          compiler.emit(last_buffer, "else", ast)
          compiler.emit(last_buffer, next_buffer, ast)
          compiler.emit(last_buffer, "end", ast)
          last_buffer = next_buffer
        end
      end
      if (wrapper == "iife") then
        local iifeargs = ((scope.vararg and "...") or "")
        compiler.emit(parent, ("local function %s(%s)"):format(tostring(s), iifeargs), ast)
        compiler.emit(parent, buffer, ast)
        compiler.emit(parent, "end", ast)
        return utils.expr(("%s(%s)"):format(tostring(s), iifeargs), "statement")
      elseif (wrapper == "none") then
        for i = 1, #buffer do
          compiler.emit(parent, buffer[i], ast)
        end
        return {returned = true}
      else
        compiler.emit(parent, ("local %s"):format(inner_target), ast)
        for i = 1, #buffer do
          compiler.emit(parent, buffer[i], ast)
        end
        return target_exprs
      end
    end
  end
  SPECIALS["if"] = if_2a
  doc_special("if", {"cond1", "body1", "...", "condN", "bodyN"}, "Conditional form.\nTakes any number of condition/body pairs and evaluates the first body where\nthe condition evaluates to truthy. Similar to cond in other lisps.")
  local function clause_3f(v)
    return (utils["string?"](v) or (utils["sym?"](v) and not utils["multi-sym?"](v) and tostring(v):match("^&(.+)")))
  end
  local function remove_until_condition(bindings, ast)
    local _until = nil
    for i = (#bindings - 1), 3, -1 do
      local _555_0 = clause_3f(bindings[i])
      if ((_555_0 == false) or (_555_0 == nil)) then
      elseif (nil ~= _555_0) then
        local clause = _555_0
        compiler.assert(((clause == "until") and not _until), ("unexpected iterator clause: " .. clause), ast)
        table.remove(bindings, i)
        _until = table.remove(bindings, i)
      end
    end
    return _until
  end
  local function compile_until(_3fcondition, scope, chunk)
    if _3fcondition then
      local _557_ = compiler.compile1(_3fcondition, scope, chunk, {nval = 1})
      local condition_lua = _557_[1]
      return compiler.emit(chunk, ("if %s then break end"):format(tostring(condition_lua)), utils.expr(_3fcondition, "expression"))
    end
  end
  local function iterator_bindings(ast)
    local bindings = utils.copy(ast)
    local _3funtil = remove_until_condition(bindings, ast)
    local iter = table.remove(bindings)
    local bindings0 = nil
    if (1 == #bindings) then
      bindings0 = (utils["list?"](bindings[1]) or bindings)
    else
      for _, b in ipairs(bindings) do
        if utils["list?"](b) then
          utils.warn("unexpected parens in iterator", b)
        end
      end
      bindings0 = bindings
    end
    return bindings0, iter, _3funtil
  end
  SPECIALS.each = function(ast, scope, parent)
    compiler.assert((3 <= #ast), "expected body expression", ast[1])
    compiler.assert(utils["table?"](ast[2]), "expected binding table", ast)
    local sub_scope = compiler["make-scope"](scope)
    local binding, iter, _3funtil_condition = iterator_bindings(ast[2])
    local destructures = {}
    local deferred_scope_changes = {manglings = {}, symmeta = {}}
    utils.hook("pre-each", ast, sub_scope, binding, iter, _3funtil_condition)
    local function destructure_binding(v)
      if utils["sym?"](v) then
        return compiler["declare-local"](v, sub_scope, ast, nil, deferred_scope_changes)
      else
        local raw = utils.sym(compiler.gensym(sub_scope))
        destructures[raw] = v
        return compiler["declare-local"](raw, sub_scope, ast)
      end
    end
    local bind_vars = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, b in ipairs(binding) do
        local val_19_ = destructure_binding(b)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      bind_vars = tbl_17_
    end
    local vals = compiler.compile1(iter, scope, parent)
    local val_names = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, v in ipairs(vals) do
        local val_19_ = tostring(v)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      val_names = tbl_17_
    end
    local chunk = {}
    compiler.assert(bind_vars[1], "expected binding and iterator", ast)
    compiler.emit(parent, ("for %s in %s do"):format(table.concat(bind_vars, ", "), table.concat(val_names, ", ")), ast)
    for raw, args in utils.stablepairs(destructures) do
      compiler.destructure(args, raw, ast, sub_scope, chunk, {declaration = true, nomulti = true, symtype = "each"})
    end
    compiler["apply-deferred-scope-changes"](sub_scope, deferred_scope_changes, ast)
    compile_until(_3funtil_condition, sub_scope, chunk)
    compile_do(ast, sub_scope, chunk, 3)
    compiler.emit(parent, chunk, ast)
    return compiler.emit(parent, "end", ast)
  end
  doc_special("each", {"[key value (iterator)]", "..."}, "Runs the body once for each set of values provided by the given iterator.\nMost commonly used with ipairs for sequential tables or pairs for  undefined\norder, but can be used with any iterator.", true)
  local function while_2a(ast, scope, parent)
    local len1 = #parent
    local condition = compiler.compile1(ast[2], scope, parent, {nval = 1})[1]
    local len2 = #parent
    local sub_chunk = {}
    if (len1 ~= len2) then
      for i = (len1 + 1), len2 do
        table.insert(sub_chunk, parent[i])
        parent[i] = nil
      end
      compiler.emit(parent, "while true do", ast)
      compiler.emit(sub_chunk, ("if not %s then break end"):format(condition[1]), ast)
    else
      compiler.emit(parent, ("while " .. tostring(condition) .. " do"), ast)
    end
    compile_do(ast, compiler["make-scope"](scope), sub_chunk, 3)
    compiler.emit(parent, sub_chunk, ast)
    return compiler.emit(parent, "end", ast)
  end
  SPECIALS["while"] = while_2a
  doc_special("while", {"condition", "..."}, "The classic while loop. Evaluates body until a condition is non-truthy.", true)
  local function for_2a(ast, scope, parent)
    compiler.assert(utils["table?"](ast[2]), "expected binding table", ast)
    local ranges = setmetatable(utils.copy(ast[2]), getmetatable(ast[2]))
    local until_condition = remove_until_condition(ranges, ast)
    local binding_sym = table.remove(ranges, 1)
    local sub_scope = compiler["make-scope"](scope)
    local range_args = {}
    local chunk = {}
    compiler.assert(utils["sym?"](binding_sym), ("unable to bind %s %s"):format(type(binding_sym), tostring(binding_sym)), ast[2])
    compiler.assert((3 <= #ast), "expected body expression", ast[1])
    compiler.assert((#ranges <= 3), "unexpected arguments", ranges)
    compiler.assert((1 < #ranges), "expected range to include start and stop", ranges)
    utils.hook("pre-for", ast, sub_scope, binding_sym)
    for i = 1, math.min(#ranges, 3) do
      range_args[i] = str1(compiler.compile1(ranges[i], scope, parent, {nval = 1}))
    end
    compiler.emit(parent, ("for %s = %s do"):format(compiler["declare-local"](binding_sym, sub_scope, ast), table.concat(range_args, ", ")), ast)
    compile_until(until_condition, sub_scope, chunk)
    compile_do(ast, sub_scope, chunk, 3)
    compiler.emit(parent, chunk, ast)
    return compiler.emit(parent, "end", ast)
  end
  SPECIALS["for"] = for_2a
  doc_special("for", {"[index start stop step?]", "..."}, "Numeric loop construct.\nEvaluates body once for each value between start and stop (inclusive).", true)
  local function method_special_type(ast)
    if (utils["string?"](ast[3]) and utils["valid-lua-identifier?"](ast[3])) then
      return "native"
    elseif utils["sym?"](ast[2]) then
      return "nonnative"
    else
      return "binding"
    end
  end
  local function native_method_call(ast, _scope, _parent, target, args)
    local _566_ = ast
    local _ = _566_[1]
    local _0 = _566_[2]
    local method_string = _566_[3]
    local call_string = nil
    if ((target.type == "literal") or (target.type == "varg") or ((target.type == "expression") and not (target[1]):match("[%)%]]$") and not (target[1]):match("%.[%a_][%w_]*$"))) then
      call_string = "(%s):%s(%s)"
    else
      call_string = "%s:%s(%s)"
    end
    return utils.expr(string.format(call_string, tostring(target), method_string, table.concat(args, ", ")), "statement")
  end
  local function nonnative_method_call(ast, scope, parent, target, args)
    local method_string = str1(compiler.compile1(ast[3], scope, parent, {nval = 1}))
    local args0 = {tostring(target), unpack(args)}
    return utils.expr(string.format("%s[%s](%s)", tostring(target), method_string, table.concat(args0, ", ")), "statement")
  end
  local function binding_method_call(ast, scope, parent, target, args)
    local method_string = str1(compiler.compile1(ast[3], scope, parent, {nval = 1}))
    local target_local = compiler.gensym(scope, "tgt")
    local args0 = {target_local, unpack(args)}
    compiler.emit(parent, string.format("local %s = %s", target_local, tostring(target)))
    return utils.expr(string.format("(%s)[%s](%s)", target_local, method_string, table.concat(args0, ", ")), "statement")
  end
  local function method_call(ast, scope, parent)
    compiler.assert((2 < #ast), "expected at least 2 arguments", ast)
    local _568_ = compiler.compile1(ast[2], scope, parent, {nval = 1})
    local target = _568_[1]
    local args = {}
    for i = 4, #ast do
      local subexprs = nil
      local _569_
      if (i ~= #ast) then
        _569_ = 1
      else
      _569_ = nil
      end
      subexprs = compiler.compile1(ast[i], scope, parent, {nval = _569_})
      local tbl_17_ = args
      local i_18_ = #tbl_17_
      for _, subexpr in ipairs(subexprs) do
        local val_19_ = tostring(subexpr)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
    end
    local _572_0 = method_special_type(ast)
    if (_572_0 == "native") then
      return native_method_call(ast, scope, parent, target, args)
    elseif (_572_0 == "nonnative") then
      return nonnative_method_call(ast, scope, parent, target, args)
    elseif (_572_0 == "binding") then
      return binding_method_call(ast, scope, parent, target, args)
    end
  end
  SPECIALS[":"] = method_call
  doc_special(":", {"tbl", "method-name", "..."}, "Call the named method on tbl with the provided args.\nMethod name doesn't have to be known at compile-time; if it is, use\n(tbl:method-name ...) instead.")
  SPECIALS.comment = function(ast, _, parent)
    local c = nil
    local _574_
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i, elt in ipairs(ast) do
        local val_19_ = nil
        if (i ~= 1) then
          val_19_ = view(elt, {["one-line?"] = true})
        else
        val_19_ = nil
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      _574_ = tbl_17_
    end
    c = table.concat(_574_, " "):gsub("%]%]", "]\\]")
    return compiler.emit(parent, ("--[[ " .. c .. " ]]"), ast)
  end
  doc_special("comment", {"..."}, "Comment which will be emitted in Lua output.", true)
  local function hashfn_max_used(f_scope, i, max)
    local max0 = nil
    if f_scope.symmeta[("$" .. i)].used then
      max0 = i
    else
      max0 = max
    end
    if (i < 9) then
      return hashfn_max_used(f_scope, (i + 1), max0)
    else
      return max0
    end
  end
  SPECIALS.hashfn = function(ast, scope, parent)
    compiler.assert((#ast == 2), "expected one argument", ast)
    local f_scope = nil
    do
      local _579_0 = compiler["make-scope"](scope)
      _579_0["vararg"] = false
      _579_0["hashfn"] = true
      f_scope = _579_0
    end
    local f_chunk = {}
    local name = compiler.gensym(scope)
    local symbol = utils.sym(name)
    local args = {}
    compiler["declare-local"](symbol, scope, ast)
    for i = 1, 9 do
      args[i] = compiler["declare-local"](utils.sym(("$" .. i)), f_scope, ast)
    end
    local function walker(idx, node, _3fparent_node)
      if utils["sym?"](node, "$...") then
        f_scope.vararg = true
        if _3fparent_node then
          _3fparent_node[idx] = utils.varg()
          return nil
        else
          return utils.varg()
        end
      else
        return ((utils["list?"](node) and (not _3fparent_node or not utils["sym?"](node[1], "hashfn"))) or utils["table?"](node))
      end
    end
    utils["walk-tree"](ast, walker)
    compiler.compile1(ast[2], f_scope, f_chunk, {tail = true})
    local max_used = hashfn_max_used(f_scope, 1, 0)
    if f_scope.vararg then
      compiler.assert((max_used == 0), "$ and $... in hashfn are mutually exclusive", ast)
    end
    local arg_str = nil
    if f_scope.vararg then
      arg_str = tostring(utils.varg())
    else
      arg_str = table.concat(args, ", ", 1, max_used)
    end
    compiler.emit(parent, string.format("local function %s(%s)", name, arg_str), ast)
    compiler.emit(parent, f_chunk, ast)
    compiler.emit(parent, "end", ast)
    return utils.expr(name, "sym")
  end
  doc_special("hashfn", {"..."}, "Function literal shorthand; args are either $... OR $1, $2, etc.")
  local function comparator_special_type(ast)
    if (3 == #ast) then
      return "native"
    elseif utils["every?"]({unpack(ast, 3, (#ast - 1))}, utils["idempotent-expr?"]) then
      return "idempotent"
    else
      return "binding"
    end
  end
  local function short_circuit_safe_3f(x, scope)
    if (("table" ~= type(x)) or utils["sym?"](x) or utils["varg?"](x)) then
      return true
    elseif utils["table?"](x) then
      local ok = true
      for k, v in pairs(x) do
        if not ok then break end
        ok = (short_circuit_safe_3f(v, scope) and short_circuit_safe_3f(k, scope))
      end
      return ok
    elseif utils["list?"](x) then
      if utils["sym?"](x[1]) then
        local _585_0 = str1(x)
        if ((_585_0 == "fn") or (_585_0 == "hashfn") or (_585_0 == "let") or (_585_0 == "local") or (_585_0 == "var") or (_585_0 == "set") or (_585_0 == "tset") or (_585_0 == "if") or (_585_0 == "each") or (_585_0 == "for") or (_585_0 == "while") or (_585_0 == "do") or (_585_0 == "lua") or (_585_0 == "global")) then
          return false
        elseif (((_585_0 == "<") or (_585_0 == ">") or (_585_0 == "<=") or (_585_0 == ">=") or (_585_0 == "=") or (_585_0 == "not=") or (_585_0 == "~=")) and (comparator_special_type(x) == "binding")) then
          return false
        else
          local function _586_()
            return (1 ~= x[2])
          end
          if ((_585_0 == "pick-values") and _586_()) then
            return false
          else
            local function _587_()
              local call = _585_0
              return scope.macros[call]
            end
            if ((nil ~= _585_0) and _587_()) then
              local call = _585_0
              return false
            else
              local function _588_()
                return (method_special_type(x) == "binding")
              end
              if ((_585_0 == ":") and _588_()) then
                return false
              else
                local _ = _585_0
                local ok = true
                for i = 2, #x do
                  if not ok then break end
                  ok = short_circuit_safe_3f(x[i], scope)
                end
                return ok
              end
            end
          end
        end
      else
        local ok = true
        for _, v in ipairs(x) do
          if not ok then break end
          ok = short_circuit_safe_3f(v, scope)
        end
        return ok
      end
    end
  end
  local function operator_special_result(ast, zero_arity, unary_prefix, padded_op, operands)
    local _592_0 = #operands
    if (_592_0 == 0) then
      if zero_arity then
        return utils.expr(zero_arity, "literal")
      else
        return compiler.assert(false, "Expected more than 0 arguments", ast)
      end
    elseif (_592_0 == 1) then
      if unary_prefix then
        return ("(" .. unary_prefix .. padded_op .. operands[1] .. ")")
      else
        return operands[1]
      end
    else
      local _ = _592_0
      return ("(" .. table.concat(operands, padded_op) .. ")")
    end
  end
  local function emit_short_circuit_if(ast, scope, parent, name, subast, accumulator, expr_string, setter)
    if (accumulator ~= expr_string) then
      compiler.emit(parent, string.format(setter, accumulator, expr_string), ast)
    end
    local function _597_()
      if (name == "and") then
        return accumulator
      else
        return ("not " .. accumulator)
      end
    end
    compiler.emit(parent, ("if %s then"):format(_597_()), subast)
    do
      local chunk = {}
      compiler.compile1(subast, scope, chunk, {nval = 1, target = accumulator})
      compiler.emit(parent, chunk)
    end
    return compiler.emit(parent, "end")
  end
  local function operator_special(name, zero_arity, unary_prefix, ast, scope, parent)
    compiler.assert(not ((#ast == 2) and utils["varg?"](ast[2])), "tried to use vararg with operator", ast)
    local padded_op = (" " .. name .. " ")
    local operands, accumulator = {}
    if utils["call-of?"](ast[#ast], "values") then
      utils.warn("multiple values in operators are deprecated", ast)
    end
    for subast in iter_args(ast) do
      if ((nil ~= next(operands)) and ((name == "or") or (name == "and")) and not short_circuit_safe_3f(subast, scope)) then
        local expr_string = table.concat(operands, padded_op)
        local setter = nil
        if accumulator then
          setter = "%s = %s"
        else
          setter = "local %s = %s"
        end
        if not accumulator then
          accumulator = compiler.gensym(scope, name)
        end
        emit_short_circuit_if(ast, scope, parent, name, subast, accumulator, expr_string, setter)
        operands = {accumulator}
      else
        table.insert(operands, str1(compiler.compile1(subast, scope, parent, {nval = 1})))
      end
    end
    return operator_special_result(ast, zero_arity, unary_prefix, padded_op, operands)
  end
  local function define_arithmetic_special(name, zero_arity, unary_prefix, _3flua_name)
    local _603_
    do
      local _602_0 = (_3flua_name or name)
      local function _604_(...)
        return operator_special(_602_0, zero_arity, unary_prefix, ...)
      end
      _603_ = _604_
    end
    SPECIALS[name] = _603_
    return doc_special(name, {"a", "b", "..."}, "Arithmetic operator; works the same as Lua but accepts more arguments.")
  end
  define_arithmetic_special("+", "0", "0")
  define_arithmetic_special("..", "''")
  define_arithmetic_special("^")
  define_arithmetic_special("-", nil, "")
  define_arithmetic_special("*", "1", "1")
  define_arithmetic_special("%")
  define_arithmetic_special("/", nil, "1")
  define_arithmetic_special("//", nil, "1")
  SPECIALS["or"] = function(ast, scope, parent)
    return operator_special("or", "false", nil, ast, scope, parent)
  end
  SPECIALS["and"] = function(ast, scope, parent)
    return operator_special("and", "true", nil, ast, scope, parent)
  end
  doc_special("and", {"a", "b", "..."}, "Boolean operator; works the same as Lua but accepts more arguments.")
  doc_special("or", {"a", "b", "..."}, "Boolean operator; works the same as Lua but accepts more arguments.")
  local function bitop_special(native_name, lib_name, zero_arity, unary_prefix, ast, scope, parent)
    if (#ast == 1) then
      return compiler.assert(zero_arity, "Expected more than 0 arguments.", ast)
    else
      local len = #ast
      local operands = {}
      local padded_native_name = (" " .. native_name .. " ")
      local prefixed_lib_name = ("bit." .. lib_name)
      for i = 2, len do
        local subexprs = nil
        local _605_
        if (i ~= len) then
          _605_ = 1
        else
        _605_ = nil
        end
        subexprs = compiler.compile1(ast[i], scope, parent, {nval = _605_})
        local tbl_17_ = operands
        local i_18_ = #tbl_17_
        for _, s in ipairs(subexprs) do
          local val_19_ = tostring(s)
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
      end
      if (#operands == 1) then
        if utils.root.options.useBitLib then
          return (prefixed_lib_name .. "(" .. unary_prefix .. ", " .. operands[1] .. ")")
        else
          return ("(" .. unary_prefix .. padded_native_name .. operands[1] .. ")")
        end
      else
        if utils.root.options.useBitLib then
          return (prefixed_lib_name .. "(" .. table.concat(operands, ", ") .. ")")
        else
          return ("(" .. table.concat(operands, padded_native_name) .. ")")
        end
      end
    end
  end
  local function define_bitop_special(name, zero_arity, unary_prefix, native)
    local function _612_(...)
      return bitop_special(native, name, zero_arity, unary_prefix, ...)
    end
    SPECIALS[name] = _612_
    return nil
  end
  define_bitop_special("lshift", nil, "1", "<<")
  define_bitop_special("rshift", nil, "1", ">>")
  define_bitop_special("band", "-1", "-1", "&")
  define_bitop_special("bor", "0", "0", "|")
  define_bitop_special("bxor", "0", "0", "~")
  doc_special("lshift", {"x", "n"}, "Bitwise logical left shift of x by n bits.\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  doc_special("rshift", {"x", "n"}, "Bitwise logical right shift of x by n bits.\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  doc_special("band", {"x1", "x2", "..."}, "Bitwise AND of any number of arguments.\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  doc_special("bor", {"x1", "x2", "..."}, "Bitwise OR of any number of arguments.\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  doc_special("bxor", {"x1", "x2", "..."}, "Bitwise XOR of any number of arguments.\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  SPECIALS.bnot = function(ast, scope, parent)
    compiler.assert((#ast == 2), "expected one argument", ast)
    local _613_ = compiler.compile1(ast[2], scope, parent, {nval = 1})
    local value = _613_[1]
    if utils.root.options.useBitLib then
      return ("bit.bnot(" .. tostring(value) .. ")")
    else
      return ("~(" .. tostring(value) .. ")")
    end
  end
  doc_special("bnot", {"x"}, "Bitwise negation; only works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.")
  doc_special("..", {"a", "b", "..."}, "String concatenation operator; works the same as Lua but accepts more arguments.")
  local function native_comparator(op, _615_0, scope, parent)
    local _616_ = _615_0
    local _ = _616_[1]
    local lhs_ast = _616_[2]
    local rhs_ast = _616_[3]
    local _617_ = compiler.compile1(lhs_ast, scope, parent, {nval = 1})
    local lhs = _617_[1]
    local _618_ = compiler.compile1(rhs_ast, scope, parent, {nval = 1})
    local rhs = _618_[1]
    return string.format("(%s %s %s)", tostring(lhs), op, tostring(rhs))
  end
  local function idempotent_comparator(op, chain_op, ast, scope, parent)
    local vals = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i = 2, #ast do
        local val_19_ = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      vals = tbl_17_
    end
    local comparisons = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i = 1, (#vals - 1) do
        local val_19_ = string.format("(%s %s %s)", vals[i], op, vals[(i + 1)])
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      comparisons = tbl_17_
    end
    local chain = string.format(" %s ", (chain_op or "and"))
    return ("(" .. table.concat(comparisons, chain) .. ")")
  end
  local function binding_comparator(op, chain_op, ast, scope, parent)
    local binding_left = {}
    local binding_right = {}
    local vals = {}
    local chain = string.format(" %s ", (chain_op or "and"))
    for i = 2, #ast do
      local compiled = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))
      if (utils["idempotent-expr?"](ast[i]) or (i == 2) or (i == #ast)) then
        table.insert(vals, compiled)
      else
        local my_sym = compiler.gensym(scope)
        table.insert(binding_left, my_sym)
        table.insert(binding_right, compiled)
        table.insert(vals, my_sym)
      end
    end
    compiler.emit(parent, string.format("local %s = %s", table.concat(binding_left, ", "), table.concat(binding_right, ", "), ast))
    local _622_
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i = 1, (#vals - 1) do
        local val_19_ = string.format("(%s %s %s)", vals[i], op, vals[(i + 1)])
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      _622_ = tbl_17_
    end
    return ("(" .. table.concat(_622_, chain) .. ")")
  end
  local function define_comparator_special(name, _3flua_op, _3fchain_op)
    do
      local op = (_3flua_op or name)
      local function opfn(ast, scope, parent)
        compiler.assert((2 < #ast), "expected at least two arguments", ast)
        local _624_0 = comparator_special_type(ast)
        if (_624_0 == "native") then
          return native_comparator(op, ast, scope, parent)
        elseif (_624_0 == "idempotent") then
          return idempotent_comparator(op, _3fchain_op, ast, scope, parent)
        elseif (_624_0 == "binding") then
          return binding_comparator(op, _3fchain_op, ast, scope, parent)
        else
          local _ = _624_0
          return error("internal compiler error. please report this to the fennel devs.")
        end
      end
      SPECIALS[name] = opfn
    end
    return doc_special(name, {"a", "b", "..."}, "Comparison operator; works the same as Lua but accepts more arguments.")
  end
  define_comparator_special(">")
  define_comparator_special("<")
  define_comparator_special(">=")
  define_comparator_special("<=")
  define_comparator_special("=", "==")
  define_comparator_special("not=", "~=", "or")
  local function define_unary_special(op, _3frealop)
    local function opfn(ast, scope, parent)
      compiler.assert((#ast == 2), "expected one argument", ast)
      local tail = compiler.compile1(ast[2], scope, parent, {nval = 1})
      return ((_3frealop or op) .. str1(tail))
    end
    SPECIALS[op] = opfn
    return nil
  end
  define_unary_special("not", "not ")
  doc_special("not", {"x"}, "Logical operator; works the same as Lua.")
  define_unary_special("length", "#")
  doc_special("length", {"x"}, "Returns the length of a table or string.")
  SPECIALS["~="] = SPECIALS["not="]
  SPECIALS["#"] = SPECIALS.length
  SPECIALS.quote = function(ast, scope, parent)
    compiler.assert((#ast == 2), "expected one argument", ast)
    local runtime, this_scope = true, scope
    while this_scope do
      this_scope = this_scope.parent
      if (this_scope == compiler.scopes.compiler) then
        runtime = false
      end
    end
    return compiler["do-quote"](ast[2], scope, parent, runtime)
  end
  doc_special("quote", {"x"}, "Quasiquote the following form. Only works in macro/compiler scope.")
  local macro_loaded = {}
  local function safe_getmetatable(tbl)
    local mt = getmetatable(tbl)
    assert((mt ~= getmetatable("")), "Illegal metatable access!")
    return mt
  end
  local safe_require = nil
  local function safe_compiler_env()
    local _628_
    do
      local _627_0 = rawget(_G, "utf8")
      if (nil ~= _627_0) then
        _628_ = utils.copy(_627_0)
      else
        _628_ = _627_0
      end
    end
    return {_VERSION = _VERSION, assert = assert, bit = rawget(_G, "bit"), error = error, getmetatable = safe_getmetatable, ipairs = ipairs, math = utils.copy(math), next = next, pairs = utils.stablepairs, pcall = pcall, print = print, rawequal = rawequal, rawget = rawget, rawlen = rawget(_G, "rawlen"), rawset = rawset, require = safe_require, select = select, setmetatable = setmetatable, string = utils.copy(string), table = utils.copy(table), tonumber = tonumber, tostring = tostring, type = type, utf8 = _628_, xpcall = xpcall}
  end
  local function combined_mt_pairs(env)
    local combined = {}
    local _630_ = getmetatable(env)
    local __index = _630_["__index"]
    if ("table" == type(__index)) then
      for k, v in pairs(__index) do
        combined[k] = v
      end
    end
    for k, v in next, env, nil do
      combined[k] = v
    end
    return next, combined, nil
  end
  local function make_compiler_env(ast, scope, parent, _3fopts)
    local provided = nil
    do
      local _632_0 = (_3fopts or utils.root.options)
      if ((_G.type(_632_0) == "table") and (_632_0["compiler-env"] == "strict")) then
        provided = safe_compiler_env()
      elseif ((_G.type(_632_0) == "table") and (nil ~= _632_0.compilerEnv)) then
        local compilerEnv = _632_0.compilerEnv
        provided = compilerEnv
      elseif ((_G.type(_632_0) == "table") and (nil ~= _632_0["compiler-env"])) then
        local compiler_env = _632_0["compiler-env"]
        provided = compiler_env
      else
        local _ = _632_0
        provided = safe_compiler_env()
      end
    end
    local env = nil
    local function _634_()
      return compiler.scopes.macro
    end
    local function _635_(symbol)
      compiler.assert(compiler.scopes.macro, "must call from macro", ast)
      return compiler.scopes.macro.manglings[tostring(symbol)]
    end
    local function _636_(base)
      return utils.sym(compiler.gensym((compiler.scopes.macro or scope), base))
    end
    local function _637_(form)
      compiler.assert(compiler.scopes.macro, "must call from macro", ast)
      return compiler.macroexpand(form, compiler.scopes.macro)
    end
    env = {["assert-compile"] = compiler.assert, ["ast-source"] = utils["ast-source"], ["comment?"] = utils["comment?"], ["fennel-module-name"] = fennel_module_name, ["get-scope"] = _634_, ["in-scope?"] = _635_, ["list?"] = utils["list?"], ["macro-loaded"] = macro_loaded, ["multi-sym?"] = utils["multi-sym?"], ["sequence?"] = utils["sequence?"], ["sym?"] = utils["sym?"], ["table?"] = utils["table?"], ["varg?"] = utils["varg?"], _AST = ast, _CHUNK = parent, _IS_COMPILER = true, _SCOPE = scope, _SPECIALS = compiler.scopes.global.specials, _VARARG = utils.varg(), comment = utils.comment, gensym = _636_, list = utils.list, macroexpand = _637_, sequence = utils.sequence, sym = utils.sym, unpack = unpack, version = utils.version, view = view}
    env._G = env
    return setmetatable(env, {__index = provided, __newindex = provided, __pairs = combined_mt_pairs})
  end
  local function _638_(...)
    local tbl_17_ = {}
    local i_18_ = #tbl_17_
    for c in string.gmatch((package.config or ""), "([^\n]+)") do
      local val_19_ = c
      if (nil ~= val_19_) then
        i_18_ = (i_18_ + 1)
        tbl_17_[i_18_] = val_19_
      end
    end
    return tbl_17_
  end
  local _640_ = _638_(...)
  local dirsep = _640_[1]
  local pathsep = _640_[2]
  local pathmark = _640_[3]
  local pkg_config = {dirsep = (dirsep or "/"), pathmark = (pathmark or "?"), pathsep = (pathsep or ";")}
  local function escapepat(str)
    return string.gsub(str, "[^%w]", "%%%1")
  end
  local function search_module(modulename, _3fpathstring)
    local pathsepesc = escapepat(pkg_config.pathsep)
    local pattern = ("([^%s]*)%s"):format(pathsepesc, pathsepesc)
    local no_dot_module = modulename:gsub("%.", pkg_config.dirsep)
    local fullpath = ((_3fpathstring or utils["fennel-module"].path) .. pkg_config.pathsep)
    local function try_path(path)
      local filename = path:gsub(escapepat(pkg_config.pathmark), no_dot_module)
      local filename2 = path:gsub(escapepat(pkg_config.pathmark), modulename)
      local _641_0 = (io.open(filename) or io.open(filename2))
      if (nil ~= _641_0) then
        local file = _641_0
        file:close()
        return filename
      else
        local _ = _641_0
        return nil, ("no file '" .. filename .. "'")
      end
    end
    local function find_in_path(start, _3ftried_paths)
      local _643_0 = fullpath:match(pattern, start)
      if (nil ~= _643_0) then
        local path = _643_0
        local _644_0, _645_0 = try_path(path)
        if (nil ~= _644_0) then
          local filename = _644_0
          return filename
        elseif ((_644_0 == nil) and (nil ~= _645_0)) then
          local error = _645_0
          local function _647_()
            local _646_0 = (_3ftried_paths or {})
            table.insert(_646_0, error)
            return _646_0
          end
          return find_in_path((start + #path + 1), _647_())
        end
      else
        local _ = _643_0
        local function _649_()
          local tried_paths = table.concat((_3ftried_paths or {}), "\n\9")
          if (_VERSION < "Lua 5.4") then
            return ("\n\9" .. tried_paths)
          else
            return tried_paths
          end
        end
        return nil, _649_()
      end
    end
    return find_in_path(1)
  end
  local function make_searcher(_3foptions)
    local function _652_(module_name)
      local opts = utils.copy(utils.root.options)
      for k, v in pairs((_3foptions or {})) do
        opts[k] = v
      end
      opts["module-name"] = module_name
      local _653_0, _654_0 = search_module(module_name)
      if (nil ~= _653_0) then
        local filename = _653_0
        local function _655_(...)
          return utils["fennel-module"].dofile(filename, opts, ...)
        end
        return _655_, filename
      elseif ((_653_0 == nil) and (nil ~= _654_0)) then
        local error = _654_0
        return error
      end
    end
    return _652_
  end
  local function dofile_with_searcher(fennel_macro_searcher, filename, opts, ...)
    local searchers = (package.loaders or package.searchers or {})
    local _ = table.insert(searchers, 1, fennel_macro_searcher)
    local m = utils["fennel-module"].dofile(filename, opts, ...)
    table.remove(searchers, 1)
    return m
  end
  local function fennel_macro_searcher(module_name)
    local opts = nil
    do
      local _657_0 = utils.copy(utils.root.options)
      _657_0["module-name"] = module_name
      _657_0["env"] = "_COMPILER"
      _657_0["requireAsInclude"] = false
      _657_0["allowedGlobals"] = nil
      opts = _657_0
    end
    local _658_0 = search_module(module_name, utils["fennel-module"]["macro-path"])
    if (nil ~= _658_0) then
      local filename = _658_0
      local _659_
      if (opts["compiler-env"] == _G) then
        local function _660_(...)
          return dofile_with_searcher(fennel_macro_searcher, filename, opts, ...)
        end
        _659_ = _660_
      else
        local function _661_(...)
          return utils["fennel-module"].dofile(filename, opts, ...)
        end
        _659_ = _661_
      end
      return _659_, filename
    end
  end
  local function lua_macro_searcher(module_name)
    local _664_0 = search_module(module_name, package.path)
    if (nil ~= _664_0) then
      local filename = _664_0
      local code = nil
      do
        local f = io.open(filename)
        local function close_handlers_10_(ok_11_, ...)
          f:close()
          if ok_11_ then
            return ...
          else
            return error(..., 0)
          end
        end
        local function _666_()
          return assert(f:read("*a"))
        end
        code = close_handlers_10_(_G.xpcall(_666_, (package.loaded.fennel or debug).traceback))
      end
      local chunk = load_code(code, make_compiler_env(), filename)
      return chunk, filename
    end
  end
  local macro_searchers = {fennel_macro_searcher, lua_macro_searcher}
  local function search_macro_module(modname, n)
    local _668_0 = macro_searchers[n]
    if (nil ~= _668_0) then
      local f = _668_0
      local _669_0, _670_0 = f(modname)
      if ((nil ~= _669_0) and true) then
        local loader = _669_0
        local _3ffilename = _670_0
        return loader, _3ffilename
      else
        local _ = _669_0
        return search_macro_module(modname, (n + 1))
      end
    end
  end
  local function sandbox_fennel_module(modname)
    if ((modname == "fennel.macros") or (package and package.loaded and ("table" == type(package.loaded[modname])) and (package.loaded[modname].metadata == compiler.metadata))) then
      local function _673_(_, ...)
        return (compiler.metadata):setall(...)
      end
      return {metadata = {setall = _673_}, view = view}
    end
  end
  local function _675_(modname)
    local function _676_()
      local loader, filename = search_macro_module(modname, 1)
      compiler.assert(loader, (modname .. " module not found."))
      macro_loaded[modname] = loader(modname, filename)
      return macro_loaded[modname]
    end
    return (macro_loaded[modname] or sandbox_fennel_module(modname) or _676_())
  end
  safe_require = _675_
  local function add_macros(macros_2a, ast, scope)
    compiler.assert(utils["table?"](macros_2a), "expected macros to be table", ast)
    for k, v in pairs(macros_2a) do
      compiler.assert((type(v) == "function"), "expected each macro to be function", ast)
      compiler["check-binding-valid"](utils.sym(k), scope, ast, {["macro?"] = true})
      scope.macros[k] = v
    end
    return nil
  end
  local function resolve_module_name(_677_0, _scope, _parent, opts)
    local _678_ = _677_0
    local second = _678_[2]
    local filename = _678_["filename"]
    local filename0 = (filename or (utils["table?"](second) and second.filename))
    local module_name = utils.root.options["module-name"]
    local modexpr = compiler.compile(second, opts)
    local modname_chunk = load_code(modexpr)
    return modname_chunk(module_name, filename0)
  end
  SPECIALS["require-macros"] = function(ast, scope, parent, _3freal_ast)
    compiler.assert((#ast == 2), "Expected one module name argument", (_3freal_ast or ast))
    local modname = resolve_module_name(ast, scope, parent, {})
    compiler.assert(utils["string?"](modname), "module name must compile to string", (_3freal_ast or ast))
    if not macro_loaded[modname] then
      local loader, filename = search_macro_module(modname, 1)
      compiler.assert(loader, (modname .. " module not found."), ast)
      macro_loaded[modname] = compiler.assert(utils["table?"](loader(modname, filename)), "expected macros to be table", (_3freal_ast or ast))
    end
    if ("import-macros" == str1(ast)) then
      return macro_loaded[modname]
    else
      return add_macros(macro_loaded[modname], ast, scope)
    end
  end
  doc_special("require-macros", {"macro-module-name"}, "Load given module and use its contents as macro definitions in current scope.\nDeprecated.")
  local function emit_included_fennel(src, path, opts, sub_chunk)
    local subscope = compiler["make-scope"](utils.root.scope.parent)
    local forms = {}
    if utils.root.options.requireAsInclude then
      subscope.specials.require = compiler["require-include"]
    end
    for _, val in parser.parser(parser["string-stream"](src), path) do
      table.insert(forms, val)
    end
    for i = 1, #forms do
      local subopts = nil
      if (i == #forms) then
        subopts = {tail = true}
      else
        subopts = {nval = 0}
      end
      utils["propagate-options"](opts, subopts)
      compiler.compile1(forms[i], subscope, sub_chunk, subopts)
    end
    return nil
  end
  local function include_path(ast, opts, path, mod, fennel_3f)
    utils.root.scope.includes[mod] = "fnl/loading"
    local src = nil
    do
      local f = assert(io.open(path))
      local function close_handlers_10_(ok_11_, ...)
        f:close()
        if ok_11_ then
          return ...
        else
          return error(..., 0)
        end
      end
      local function _684_()
        return assert(f:read("*all")):gsub("[\13\n]*$", "")
      end
      src = close_handlers_10_(_G.xpcall(_684_, (package.loaded.fennel or debug).traceback))
    end
    local ret = utils.expr(("require(\"" .. mod .. "\")"), "statement")
    local target = ("package.preload[%q]"):format(mod)
    local preload_str = (target .. " = " .. target .. " or function(...)")
    local temp_chunk, sub_chunk = {}, {}
    compiler.emit(temp_chunk, preload_str, ast)
    compiler.emit(temp_chunk, sub_chunk)
    compiler.emit(temp_chunk, "end", ast)
    for _, v in ipairs(temp_chunk) do
      table.insert(utils.root.chunk, v)
    end
    if fennel_3f then
      emit_included_fennel(src, path, opts, sub_chunk)
    else
      compiler.emit(sub_chunk, src, ast)
    end
    utils.root.scope.includes[mod] = ret
    return ret
  end
  local function include_circular_fallback(mod, modexpr, fallback, ast)
    if (utils.root.scope.includes[mod] == "fnl/loading") then
      compiler.assert(fallback, "circular include detected", ast)
      return fallback(modexpr)
    end
  end
  SPECIALS.include = function(ast, scope, parent, opts)
    compiler.assert((#ast == 2), "expected one argument", ast)
    local modexpr = nil
    do
      local _687_0, _688_0 = pcall(resolve_module_name, ast, scope, parent, opts)
      if ((_687_0 == true) and (nil ~= _688_0)) then
        local modname = _688_0
        modexpr = utils.expr(string.format("%q", modname), "literal")
      else
        local _ = _687_0
        modexpr = compiler.compile1(ast[2], scope, parent, {nval = 1})[1]
      end
    end
    if ((modexpr.type ~= "literal") or ((modexpr[1]):byte() ~= 34)) then
      if opts.fallback then
        return opts.fallback(modexpr)
      else
        return compiler.assert(false, "module name must be string literal", ast)
      end
    else
      local mod = load_code(("return " .. modexpr[1]))()
      local oldmod = utils.root.options["module-name"]
      local _ = nil
      utils.root.options["module-name"] = mod
      _ = nil
      local res = nil
      local function _692_()
        local _691_0 = search_module(mod)
        if (nil ~= _691_0) then
          local fennel_path = _691_0
          return include_path(ast, opts, fennel_path, mod, true)
        else
          local _0 = _691_0
          local lua_path = search_module(mod, package.path)
          if lua_path then
            return include_path(ast, opts, lua_path, mod, false)
          elseif opts.fallback then
            return opts.fallback(modexpr)
          else
            return compiler.assert(false, ("module not found " .. mod), ast)
          end
        end
      end
      res = ((utils["member?"](mod, (utils.root.options.skipInclude or {})) and opts.fallback(modexpr, true)) or include_circular_fallback(mod, modexpr, opts.fallback, ast) or utils.root.scope.includes[mod] or _692_())
      utils.root.options["module-name"] = oldmod
      return res
    end
  end
  doc_special("include", {"module-name-literal"}, "Like require but load the target module during compilation and embed it in the\nLua output. The module must be a string literal and resolvable at compile time.")
  local function eval_compiler_2a(ast, scope, parent)
    local env = make_compiler_env(ast, scope, parent)
    local opts = utils.copy(utils.root.options)
    opts.scope = compiler["make-scope"](compiler.scopes.compiler)
    opts.allowedGlobals = current_global_names(env)
    return assert(load_code(compiler.compile(ast, opts), wrap_env(env)))(opts["module-name"], ast.filename)
  end
  SPECIALS.macros = function(ast, scope, parent)
    compiler.assert((#ast == 2), "Expected one table argument", ast)
    local macro_tbl = eval_compiler_2a(ast[2], scope, parent)
    compiler.assert(utils["table?"](macro_tbl), "Expected one table argument", ast)
    return add_macros(macro_tbl, ast, scope)
  end
  doc_special("macros", {"{:macro-name-1 (fn [...] ...) ... :macro-name-N macro-body-N}"}, "Define all functions in the given table as macros local to the current scope.")
  SPECIALS["tail!"] = function(ast, scope, parent, opts)
    compiler.assert((#ast == 2), "Expected one argument", ast)
    local call = utils["list?"](compiler.macroexpand(ast[2], scope))
    local callee = tostring((call and utils["sym?"](call[1])))
    compiler.assert((call and not scope.specials[callee]), "Expected a function call as argument", ast)
    compiler.assert(opts.tail, "Must be in tail position", ast)
    return compiler.compile1(call, scope, parent, opts)
  end
  doc_special("tail!", {"body"}, "Assert that the body being called is in tail position.")
  SPECIALS["pick-values"] = function(ast, scope, parent)
    local n = ast[2]
    local vals = utils.list(utils.sym("values"), unpack(ast, 3))
    compiler.assert((("number" == type(n)) and (0 <= n) and (n == math.floor(n))), ("Expected n to be an integer >= 0, got " .. tostring(n)))
    if (1 == n) then
      local _696_ = compiler.compile1(vals, scope, parent, {nval = 1})
      local _697_ = _696_[1]
      local expr = _697_[1]
      return {("(" .. expr .. ")")}
    elseif (0 == n) then
      for i = 3, #ast do
        compiler["keep-side-effects"](compiler.compile1(ast[i], scope, parent, {nval = 0}), parent, nil, ast[i])
      end
      return {}
    else
      local syms = nil
      do
        local tbl_17_ = utils.list()
        local i_18_ = #tbl_17_
        for _ = 1, n do
          local val_19_ = utils.sym(compiler.gensym(scope, "pv"))
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        syms = tbl_17_
      end
      compiler.destructure(syms, vals, ast, scope, parent, {declaration = true, nomulti = true, noundef = true, symtype = "pv"})
      return syms
    end
  end
  doc_special("pick-values", {"n", "..."}, "Evaluate to exactly n values.\n\nFor example,\n  (pick-values 2 ...)\nexpands to\n  (let [(_0_ _1_) ...]\n    (values _0_ _1_))")
  SPECIALS["eval-compiler"] = function(ast, scope, parent)
    local old_first = ast[1]
    ast[1] = utils.sym("do")
    local val = eval_compiler_2a(ast, scope, parent)
    ast[1] = old_first
    return val
  end
  doc_special("eval-compiler", {"..."}, "Evaluate the body at compile-time. Use the macro system instead if possible.", true)
  SPECIALS.unquote = function(ast)
    return compiler.assert(false, "tried to use unquote outside quote", ast)
  end
  doc_special("unquote", {"..."}, "Evaluate the argument even if it's in a quoted form.")
  return {["current-global-names"] = current_global_names, ["get-function-metadata"] = get_function_metadata, ["load-code"] = load_code, ["macro-loaded"] = macro_loaded, ["macro-searchers"] = macro_searchers, ["make-compiler-env"] = make_compiler_env, ["make-searcher"] = make_searcher, ["search-module"] = search_module, ["wrap-env"] = wrap_env, doc = doc_2a}
end
package.preload["fennel.compiler"] = package.preload["fennel.compiler"] or function(...)
  local utils = require("fennel.utils")
  local parser = require("fennel.parser")
  local friend = require("fennel.friend")
  local view = require("fennel.view")
  local unpack = (table.unpack or _G.unpack)
  local scopes = {compiler = nil, global = nil, macro = nil}
  local function make_scope(_3fparent)
    local parent = (_3fparent or scopes.global)
    local _275_
    if parent then
      _275_ = ((parent.depth or 0) + 1)
    else
      _275_ = 0
    end
    return {["gensym-base"] = setmetatable({}, {__index = (parent and parent["gensym-base"])}), autogensyms = setmetatable({}, {__index = (parent and parent.autogensyms)}), depth = _275_, gensyms = setmetatable({}, {__index = (parent and parent.gensyms)}), hashfn = (parent and parent.hashfn), includes = setmetatable({}, {__index = (parent and parent.includes)}), macros = setmetatable({}, {__index = (parent and parent.macros)}), manglings = setmetatable({}, {__index = (parent and parent.manglings)}), parent = parent, refedglobals = {}, specials = setmetatable({}, {__index = (parent and parent.specials)}), symmeta = setmetatable({}, {__index = (parent and parent.symmeta)}), unmanglings = setmetatable({}, {__index = (parent and parent.unmanglings)}), vararg = (parent and parent.vararg)}
  end
  local function assert_msg(ast, msg)
    local ast_tbl = nil
    if ("table" == type(ast)) then
      ast_tbl = ast
    else
      ast_tbl = {}
    end
    local m = getmetatable(ast)
    local filename = ((m and m.filename) or ast_tbl.filename or "unknown")
    local line = ((m and m.line) or ast_tbl.line or "?")
    local col = ((m and m.col) or ast_tbl.col or "?")
    local target = tostring((utils["sym?"](ast_tbl[1]) or ast_tbl[1] or "()"))
    return string.format("%s:%s:%s: Compile error in '%s': %s", filename, line, col, target, msg)
  end
  local function assert_compile(condition, msg, ast, _3ffallback_ast)
    if not condition then
      local _278_ = (utils.root.options or {})
      local error_pinpoint = _278_["error-pinpoint"]
      local source = _278_["source"]
      local unfriendly = _278_["unfriendly"]
      local ast0 = nil
      if next(utils["ast-source"](ast)) then
        ast0 = ast
      else
        ast0 = (_3ffallback_ast or {})
      end
      if (nil == utils.hook("assert-compile", condition, msg, ast0, utils.root.reset)) then
        utils.root.reset()
        if unfriendly then
          error(assert_msg(ast0, msg), 0)
        else
          friend["assert-compile"](condition, msg, ast0, source, {["error-pinpoint"] = error_pinpoint})
        end
      end
    end
    return condition
  end
  scopes.global = make_scope()
  scopes.global.vararg = true
  scopes.compiler = make_scope(scopes.global)
  scopes.macro = scopes.global
  local function serialize_string(str)
    local function _283_(_241)
      return ("\\" .. _241:byte())
    end
    return string.gsub(string.gsub(string.gsub(string.format("%q", str), "\\\n", "\\n"), "\\9", "\\t"), "[\128-\255]", _283_)
  end
  local function global_mangling(str)
    if utils["valid-lua-identifier?"](str) then
      return str
    else
      local function _284_(_241)
        return string.format("_%02x", _241:byte())
      end
      return ("__fnl_global__" .. str:gsub("[^%w]", _284_))
    end
  end
  local function global_unmangling(identifier)
    local _286_0 = string.match(identifier, "^__fnl_global__(.*)$")
    if (nil ~= _286_0) then
      local rest = _286_0
      local _287_0 = nil
      local function _288_(_241)
        return string.char(tonumber(_241:sub(2), 16))
      end
      _287_0 = string.gsub(rest, "_[%da-f][%da-f]", _288_)
      return _287_0
    else
      local _ = _286_0
      return identifier
    end
  end
  local function global_allowed_3f(name)
    local allowed = nil
    do
      local _290_0 = utils.root.options
      if (nil ~= _290_0) then
        _290_0 = _290_0.allowedGlobals
      end
      allowed = _290_0
    end
    return (not allowed or utils["member?"](name, allowed))
  end
  local function unique_mangling(original, mangling, scope, append)
    if scope.unmanglings[mangling] then
      return unique_mangling(original, (original .. append), scope, (append + 1))
    else
      return mangling
    end
  end
  local function apply_deferred_scope_changes(scope, deferred_scope_changes, ast)
    for raw, mangled in pairs(deferred_scope_changes.manglings) do
      assert_compile(not scope.refedglobals[mangled], ("use of global " .. raw .. " is aliased by a local"), ast)
      scope.manglings[raw] = mangled
    end
    for raw, symmeta in pairs(deferred_scope_changes.symmeta) do
      scope.symmeta[raw] = symmeta
    end
    return nil
  end
  local function combine_parts(parts, scope)
    local ret = (scope.manglings[parts[1]] or global_mangling(parts[1]))
    for i = 2, #parts do
      if utils["valid-lua-identifier?"](parts[i]) then
        if (parts["multi-sym-method-call"] and (i == #parts)) then
          ret = (ret .. ":" .. parts[i])
        else
          ret = (ret .. "." .. parts[i])
        end
      else
        ret = (ret .. "[" .. serialize_string(parts[i]) .. "]")
      end
    end
    return ret
  end
  local function root_scope(scope)
    return ((utils.root and utils.root.scope) or (scope.parent and root_scope(scope.parent)) or scope)
  end
  local function next_append(root_scope_2a)
    root_scope_2a["gensym-append"] = ((root_scope_2a["gensym-append"] or 0) + 1)
    return ("_" .. root_scope_2a["gensym-append"] .. "_")
  end
  local function gensym(scope, _3fbase, _3fsuffix)
    local root_scope_2a = root_scope(scope)
    local mangling = ((_3fbase or "") .. next_append(root_scope_2a) .. (_3fsuffix or ""))
    while scope.unmanglings[mangling] do
      mangling = ((_3fbase or "") .. next_append(root_scope_2a) .. (_3fsuffix or ""))
    end
    if (_3fbase and (0 < #_3fbase)) then
      scope["gensym-base"][mangling] = _3fbase
    end
    scope.gensyms[mangling] = true
    return mangling
  end
  local function combine_auto_gensym(parts, first)
    parts[1] = first
    local last = table.remove(parts)
    local last2 = table.remove(parts)
    local last_joiner = ((parts["multi-sym-method-call"] and ":") or ".")
    table.insert(parts, (last2 .. last_joiner .. last))
    return table.concat(parts, ".")
  end
  local function autogensym(base, scope)
    local _296_0 = utils["multi-sym?"](base)
    if (nil ~= _296_0) then
      local parts = _296_0
      return combine_auto_gensym(parts, autogensym(parts[1], scope))
    else
      local _ = _296_0
      local function _297_()
        local mangling = gensym(scope, base:sub(1, -2), "auto")
        scope.autogensyms[base] = mangling
        return mangling
      end
      return (scope.autogensyms[base] or _297_())
    end
  end
  local function check_binding_valid(symbol, scope, ast, _3fopts)
    local name = tostring(symbol)
    local macro_3f = nil
    do
      local _299_0 = _3fopts
      if (nil ~= _299_0) then
        _299_0 = _299_0["macro?"]
      end
      macro_3f = _299_0
    end
    assert_compile(("&" ~= name:match("[&.:]")), "invalid character: &", symbol)
    assert_compile(not name:find("^%."), "invalid character: .", symbol)
    assert_compile(not (scope.specials[name] or (not macro_3f and scope.macros[name])), ("local %s was overshadowed by a special form or macro"):format(name), ast)
    return assert_compile(not utils["quoted?"](symbol), string.format("macro tried to bind %s without gensym", name), symbol)
  end
  local function declare_local(symbol, scope, ast, _3fvar_3f, _3fdeferred_scope_changes)
    check_binding_valid(symbol, scope, ast)
    assert_compile(not utils["multi-sym?"](symbol), ("unexpected multi symbol " .. tostring(symbol)), ast)
    local str = tostring(symbol)
    local raw = nil
    if (utils["lua-keyword?"](str) or str:match("^%d")) then
      raw = ("_" .. str)
    else
      raw = str
    end
    local mangling = nil
    local function _302_(_241)
      return string.format("_%02x", _241:byte())
    end
    mangling = string.gsub(string.gsub(raw, "-", "_"), "[^%w_]", _302_)
    local unique = unique_mangling(mangling, mangling, scope, 0)
    scope.unmanglings[unique] = (scope["gensym-base"][str] or str)
    do
      local target = (_3fdeferred_scope_changes or scope)
      target.manglings[str] = unique
      target.symmeta[str] = {symbol = symbol, var = _3fvar_3f}
    end
    return unique
  end
  local function hashfn_arg_name(name, multi_sym_parts, scope)
    if not scope.hashfn then
      return nil
    elseif (name == "$") then
      return "$1"
    elseif multi_sym_parts then
      if (multi_sym_parts and (multi_sym_parts[1] == "$")) then
        multi_sym_parts[1] = "$1"
      end
      return table.concat(multi_sym_parts, ".")
    end
  end
  local function symbol_to_expression(symbol, scope, _3freference_3f)
    utils.hook("symbol-to-expression", symbol, scope, _3freference_3f)
    local name = symbol[1]
    local multi_sym_parts = utils["multi-sym?"](name)
    local name0 = (hashfn_arg_name(name, multi_sym_parts, scope) or name)
    local parts = (multi_sym_parts or {name0})
    local etype = (((1 < #parts) and "expression") or "sym")
    local local_3f = scope.manglings[parts[1]]
    if (local_3f and scope.symmeta[parts[1]]) then
      scope.symmeta[parts[1]]["used"] = true
      symbol.referent = scope.symmeta[parts[1]].symbol
    end
    assert_compile(not scope.macros[parts[1]], "tried to reference a macro without calling it", symbol)
    assert_compile((not scope.specials[parts[1]] or ("require" == parts[1])), "tried to reference a special form without calling it", symbol)
    assert_compile((not _3freference_3f or local_3f or ("_ENV" == parts[1]) or global_allowed_3f(parts[1])), ("unknown identifier: " .. tostring(parts[1])), symbol)
    local function _307_()
      local _306_0 = utils.root.options
      if (nil ~= _306_0) then
        _306_0 = _306_0.allowedGlobals
      end
      return _306_0
    end
    if (_307_() and not local_3f and scope.parent) then
      scope.parent.refedglobals[parts[1]] = true
    end
    return utils.expr(combine_parts(parts, scope), etype)
  end
  local function emit(chunk, out, _3fast)
    if (type(out) == "table") then
      return table.insert(chunk, out)
    else
      return table.insert(chunk, {ast = _3fast, leaf = out})
    end
  end
  local function peephole(chunk)
    if chunk.leaf then
      return chunk
    elseif ((3 <= #chunk) and (chunk[(#chunk - 2)].leaf == "do") and not chunk[(#chunk - 1)].leaf and (chunk[#chunk].leaf == "end")) then
      local kid = peephole(chunk[(#chunk - 1)])
      local new_chunk = {ast = chunk.ast}
      for i = 1, (#chunk - 3) do
        table.insert(new_chunk, peephole(chunk[i]))
      end
      for i = 1, #kid do
        table.insert(new_chunk, kid[i])
      end
      return new_chunk
    else
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, x in ipairs(chunk) do
        local val_19_ = peephole(x)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      return tbl_17_
    end
  end
  local function flatten_chunk_correlated(main_chunk, options)
    local function flatten(chunk, out, last_line, file)
      local last_line0 = last_line
      if chunk.leaf then
        out[last_line0] = ((out[last_line0] or "") .. " " .. chunk.leaf)
      else
        for _, subchunk in ipairs(chunk) do
          if (subchunk.leaf or next(subchunk)) then
            local source = utils["ast-source"](subchunk.ast)
            if (file == source.filename) then
              last_line0 = math.max(last_line0, (source.line or 0))
            end
            last_line0 = flatten(subchunk, out, last_line0, file)
          end
        end
      end
      return last_line0
    end
    local out = {}
    local last = flatten(main_chunk, out, 1, options.filename)
    for i = 1, last do
      if (out[i] == nil) then
        out[i] = ""
      end
    end
    return table.concat(out, "\n")
  end
  local function flatten_chunk(file_sourcemap, chunk, tab, depth)
    if chunk.leaf then
      local _317_ = utils["ast-source"](chunk.ast)
      local endline = _317_["endline"]
      local filename = _317_["filename"]
      local line = _317_["line"]
      if ("end" == chunk.leaf) then
        table.insert(file_sourcemap, {filename, (endline or line)})
      else
        table.insert(file_sourcemap, {filename, line})
      end
      return chunk.leaf
    else
      local tab0 = nil
      do
        local _319_0 = tab
        if (_319_0 == true) then
          tab0 = "  "
        elseif (_319_0 == false) then
          tab0 = ""
        elseif (nil ~= _319_0) then
          local tab1 = _319_0
          tab0 = tab1
        elseif (_319_0 == nil) then
          tab0 = ""
        else
        tab0 = nil
        end
      end
      local _321_
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, c in ipairs(chunk) do
          local val_19_ = nil
          if (c.leaf or next(c)) then
            local sub = flatten_chunk(file_sourcemap, c, tab0, (depth + 1))
            if (0 < depth) then
              val_19_ = (tab0 .. sub:gsub("\n", ("\n" .. tab0)))
            else
              val_19_ = sub
            end
          else
          val_19_ = nil
          end
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        _321_ = tbl_17_
      end
      return table.concat(_321_, "\n")
    end
  end
  local sourcemap = {}
  local function make_short_src(source)
    local source0 = source:gsub("\n", " ")
    if (#source0 <= 49) then
      return ("[fennel \"" .. source0 .. "\"]")
    else
      return ("[fennel \"" .. source0:sub(1, 46) .. "...\"]")
    end
  end
  local function flatten(chunk, options)
    local chunk0 = peephole(chunk)
    local indent = (options.indent or "  ")
    if options.correlate then
      return flatten_chunk_correlated(chunk0, options), {}
    else
      local file_sourcemap = {}
      local src = flatten_chunk(file_sourcemap, chunk0, indent, 0)
      file_sourcemap.short_src = (options.filename or make_short_src((options.source or src)))
      if options.filename then
        file_sourcemap.key = ("@" .. options.filename)
      else
        file_sourcemap.key = src
      end
      sourcemap[file_sourcemap.key] = file_sourcemap
      return src, file_sourcemap
    end
  end
  local function make_metadata()
    local function _329_(self, tgt, _3fkey)
      if self[tgt] then
        if (nil ~= _3fkey) then
          return self[tgt][_3fkey]
        else
          return self[tgt]
        end
      end
    end
    local function _332_(self, tgt, key, value)
      self[tgt] = (self[tgt] or {})
      self[tgt][key] = value
      return tgt
    end
    local function _333_(self, tgt, ...)
      local kv_len = select("#", ...)
      local kvs = {...}
      if ((kv_len % 2) ~= 0) then
        error("metadata:setall() expected even number of k/v pairs")
      end
      self[tgt] = (self[tgt] or {})
      for i = 1, kv_len, 2 do
        self[tgt][kvs[i]] = kvs[(i + 1)]
      end
      return tgt
    end
    return setmetatable({}, {__index = {get = _329_, set = _332_, setall = _333_}, __mode = "k"})
  end
  local function exprs1(exprs)
    local _335_
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, e in ipairs(exprs) do
        local val_19_ = tostring(e)
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      _335_ = tbl_17_
    end
    return table.concat(_335_, ", ")
  end
  local function keep_side_effects(exprs, chunk, _3fstart, ast)
    for j = (_3fstart or 1), #exprs do
      local subexp = exprs[j]
      if ((subexp.type == "expression") and (subexp[1] ~= "nil")) then
        emit(chunk, ("do local _ = %s end"):format(tostring(subexp)), ast)
      elseif (subexp.type == "statement") then
        local code = tostring(subexp)
        local disambiguated = nil
        if (code:byte() == 40) then
          disambiguated = ("do end " .. code)
        else
          disambiguated = code
        end
        emit(chunk, disambiguated, ast)
      end
    end
    return nil
  end
  local function handle_compile_opts(exprs, parent, opts, ast)
    if opts.nval then
      local n = opts.nval
      local len = #exprs
      if (n ~= len) then
        if (n < len) then
          keep_side_effects(exprs, parent, (n + 1), ast)
          for i = (n + 1), len do
            exprs[i] = nil
          end
        else
          for i = (#exprs + 1), n do
            exprs[i] = utils.expr("nil", "literal")
          end
        end
      end
    end
    if opts.tail then
      emit(parent, string.format("return %s", exprs1(exprs)), ast)
    end
    if opts.target then
      local result = exprs1(exprs)
      local function _343_()
        if (result == "") then
          return "nil"
        else
          return result
        end
      end
      emit(parent, string.format("%s = %s", opts.target, _343_()), ast)
    end
    if (opts.tail or opts.target) then
      return {returned = true}
    else
      exprs["returned"] = true
      return exprs
    end
  end
  local function find_macro(ast, scope)
    local macro_2a = nil
    do
      local _346_0 = utils["sym?"](ast[1])
      if (_346_0 ~= nil) then
        local _347_0 = tostring(_346_0)
        if (_347_0 ~= nil) then
          macro_2a = scope.macros[_347_0]
        else
          macro_2a = _347_0
        end
      else
        macro_2a = _346_0
      end
    end
    local multi_sym_parts = utils["multi-sym?"](ast[1])
    if (not macro_2a and multi_sym_parts) then
      local nested_macro = utils["get-in"](scope.macros, multi_sym_parts)
      assert_compile((not scope.macros[multi_sym_parts[1]] or (type(nested_macro) == "function")), "macro not found in imported macro module", ast)
      return nested_macro
    else
      return macro_2a
    end
  end
  local function propagate_trace_info(_351_0, _index, node)
    local _352_ = _351_0
    local byteend = _352_["byteend"]
    local bytestart = _352_["bytestart"]
    local filename = _352_["filename"]
    local line = _352_["line"]
    do
      local src = utils["ast-source"](node)
      if (("table" == type(node)) and (filename ~= src.filename)) then
        src.filename, src.line, src["from-macro?"] = filename, line, true
        src.bytestart, src.byteend = bytestart, byteend
      end
    end
    return ("table" == type(node))
  end
  local function quote_literal_nils(index, node, parent)
    if (parent and utils["list?"](parent)) then
      for i = 1, utils.maxn(parent) do
        local _354_0 = parent[i]
        if (_354_0 == nil) then
          parent[i] = utils.sym("nil")
        end
      end
    end
    return index, node, parent
  end
  local function built_in_3f(m)
    local found_3f = false
    for _, f in pairs(scopes.global.macros) do
      if found_3f then break end
      found_3f = (f == m)
    end
    return found_3f
  end
  local function macroexpand_2a(ast, scope, _3fonce)
    local _357_0 = nil
    if utils["list?"](ast) then
      _357_0 = find_macro(ast, scope)
    else
    _357_0 = nil
    end
    if (_357_0 == false) then
      return ast
    elseif (nil ~= _357_0) then
      local macro_2a = _357_0
      local old_scope = scopes.macro
      local _ = nil
      scopes.macro = scope
      _ = nil
      local ok, transformed = nil, nil
      local function _359_()
        return macro_2a(unpack(ast, 2))
      end
      local function _360_()
        if built_in_3f(macro_2a) then
          return tostring
        else
          return debug.traceback
        end
      end
      ok, transformed = xpcall(_359_, _360_())
      local function _361_(...)
        return propagate_trace_info(ast, quote_literal_nils(...))
      end
      utils["walk-tree"](transformed, _361_)
      scopes.macro = old_scope
      assert_compile(ok, transformed, ast)
      utils.hook("macroexpand", ast, transformed, scope)
      if (_3fonce or not transformed) then
        return transformed
      else
        return macroexpand_2a(transformed, scope)
      end
    else
      local _ = _357_0
      return ast
    end
  end
  local function compile_special(ast, scope, parent, opts, special)
    local exprs = (special(ast, scope, parent, opts) or utils.expr("nil", "literal"))
    local exprs0 = nil
    if ("table" ~= type(exprs)) then
      exprs0 = utils.expr(exprs, "expression")
    else
      exprs0 = exprs
    end
    local exprs2 = nil
    if utils["expr?"](exprs0) then
      exprs2 = {exprs0}
    else
      exprs2 = exprs0
    end
    if not exprs2.returned then
      return handle_compile_opts(exprs2, parent, opts, ast)
    elseif (opts.tail or opts.target) then
      return {returned = true}
    else
      return exprs2
    end
  end
  local function callable_3f(_367_0, ctype, callee)
    local _368_ = _367_0
    local call_ast = _368_[1]
    if ("literal" == ctype) then
      return ("\"" == string.sub(callee, 1, 1))
    else
      return (utils["sym?"](call_ast) or utils["list?"](call_ast))
    end
  end
  local function compile_function_call(ast, scope, parent, opts, compile1, len)
    local _370_ = compile1(ast[1], scope, parent, {nval = 1})[1]
    local callee = _370_[1]
    local ctype = _370_["type"]
    local fargs = {}
    assert_compile(callable_3f(ast, ctype, callee), ("cannot call literal value " .. tostring(ast[1])), ast)
    for i = 2, len do
      local subexprs = nil
      local _371_
      if (i ~= len) then
        _371_ = 1
      else
      _371_ = nil
      end
      subexprs = compile1(ast[i], scope, parent, {nval = _371_})
      table.insert(fargs, subexprs[1])
      if (i == len) then
        for j = 2, #subexprs do
          table.insert(fargs, subexprs[j])
        end
      else
        keep_side_effects(subexprs, parent, 2, ast[i])
      end
    end
    local pat = nil
    if ("literal" == ctype) then
      pat = "(%s)(%s)"
    else
      pat = "%s(%s)"
    end
    local call = string.format(pat, tostring(callee), exprs1(fargs))
    return handle_compile_opts({utils.expr(call, "statement")}, parent, opts, ast)
  end
  local function compile_call(ast, scope, parent, opts, compile1)
    utils.hook("call", ast, scope)
    local len = #ast
    local first = ast[1]
    local multi_sym_parts = utils["multi-sym?"](first)
    local special = (utils["sym?"](first) and scope.specials[tostring(first)])
    assert_compile((0 < len), "expected a function, macro, or special to call", ast)
    if special then
      return compile_special(ast, scope, parent, opts, special)
    elseif (multi_sym_parts and multi_sym_parts["multi-sym-method-call"]) then
      local table_with_method = table.concat({unpack(multi_sym_parts, 1, (#multi_sym_parts - 1))}, ".")
      local method_to_call = multi_sym_parts[#multi_sym_parts]
      local new_ast = utils.list(utils.sym(":", ast), utils.sym(table_with_method, ast), method_to_call, select(2, unpack(ast)))
      return compile1(new_ast, scope, parent, opts)
    else
      return compile_function_call(ast, scope, parent, opts, compile1, len)
    end
  end
  local function compile_varg(ast, scope, parent, opts)
    local _376_
    if scope.hashfn then
      _376_ = "use $... in hashfn"
    else
      _376_ = "unexpected vararg"
    end
    assert_compile(scope.vararg, _376_, ast)
    return handle_compile_opts({utils.expr("...", "varg")}, parent, opts, ast)
  end
  local function compile_sym(ast, scope, parent, opts)
    local multi_sym_parts = utils["multi-sym?"](ast)
    assert_compile(not (multi_sym_parts and multi_sym_parts["multi-sym-method-call"]), "multisym method calls may only be in call position", ast)
    local e = nil
    if (ast[1] == "nil") then
      e = utils.expr("nil", "literal")
    else
      e = symbol_to_expression(ast, scope, true)
    end
    return handle_compile_opts({e}, parent, opts, ast)
  end
  local view_opts = nil
  do
    local nan = tostring((0 / 0))
    local _379_
    if (45 == nan:byte()) then
      _379_ = "(0/0)"
    else
      _379_ = "(- (0/0))"
    end
    local _381_
    if (45 == nan:byte()) then
      _381_ = "(- (0/0))"
    else
      _381_ = "(0/0)"
    end
    view_opts = {["negative-infinity"] = "(-1/0)", ["negative-nan"] = _379_, infinity = "(1/0)", nan = _381_}
  end
  local function compile_scalar(ast, _scope, parent, opts)
    local compiled = nil
    do
      local _383_0 = type(ast)
      if (_383_0 == "nil") then
        compiled = "nil"
      elseif (_383_0 == "boolean") then
        compiled = tostring(ast)
      elseif (_383_0 == "string") then
        compiled = serialize_string(ast)
      elseif (_383_0 == "number") then
        compiled = view(ast, view_opts)
      else
      compiled = nil
      end
    end
    return handle_compile_opts({utils.expr(compiled, "literal")}, parent, opts)
  end
  local function compile_table(ast, scope, parent, opts, compile1)
    local function escape_key(k)
      if ((type(k) == "string") and utils["valid-lua-identifier?"](k)) then
        return k
      else
        local _385_ = compile1(k, scope, parent, {nval = 1})
        local compiled = _385_[1]
        return ("[" .. tostring(compiled) .. "]")
      end
    end
    local keys = {}
    local buffer = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i, elem in ipairs(ast) do
        local val_19_ = nil
        do
          local nval = ((nil ~= ast[(i + 1)]) and 1)
          keys[i] = true
          val_19_ = exprs1(compile1(elem, scope, parent, {nval = nval}))
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      buffer = tbl_17_
    end
    do
      local tbl_17_ = buffer
      local i_18_ = #tbl_17_
      for k in utils.stablepairs(ast) do
        local val_19_ = nil
        if not keys[k] then
          local _388_ = compile1(ast[k], scope, parent, {nval = 1})
          local v = _388_[1]
          val_19_ = string.format("%s = %s", escape_key(k), tostring(v))
        else
        val_19_ = nil
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
    end
    return handle_compile_opts({utils.expr(("{" .. table.concat(buffer, ", ") .. "}"), "expression")}, parent, opts, ast)
  end
  local function compile1(ast, scope, parent, _3fopts)
    local opts = (_3fopts or {})
    local ast0 = macroexpand_2a(ast, scope)
    if utils["list?"](ast0) then
      return compile_call(ast0, scope, parent, opts, compile1)
    elseif utils["varg?"](ast0) then
      return compile_varg(ast0, scope, parent, opts)
    elseif utils["sym?"](ast0) then
      return compile_sym(ast0, scope, parent, opts)
    elseif (type(ast0) == "table") then
      return compile_table(ast0, scope, parent, opts, compile1)
    elseif ((type(ast0) == "nil") or (type(ast0) == "boolean") or (type(ast0) == "number") or (type(ast0) == "string")) then
      return compile_scalar(ast0, scope, parent, opts)
    else
      return assert_compile(false, ("could not compile value of type " .. type(ast0)), ast0)
    end
  end
  local function destructure(to, from, ast, scope, parent, opts)
    local opts0 = (opts or {})
    local _392_ = opts0
    local declaration = _392_["declaration"]
    local forceglobal = _392_["forceglobal"]
    local forceset = _392_["forceset"]
    local isvar = _392_["isvar"]
    local symtype = _392_["symtype"]
    local symtype0 = ("_" .. (symtype or "dst"))
    local setter = nil
    if declaration then
      setter = "local %s = %s"
    else
      setter = "%s = %s"
    end
    local deferred_scope_changes = {manglings = {}, symmeta = {}}
    local function getname(symbol, ast0)
      local raw = symbol[1]
      assert_compile(not (opts0.nomulti and utils["multi-sym?"](raw)), ("unexpected multi symbol " .. raw), ast0)
      if declaration then
        return declare_local(symbol, scope, symbol, isvar, deferred_scope_changes)
      else
        local parts = (utils["multi-sym?"](raw) or {raw})
        local _394_ = parts
        local first = _394_[1]
        local meta = scope.symmeta[first]
        assert_compile(not raw:find(":"), "cannot set method sym", symbol)
        if ((#parts == 1) and not forceset) then
          assert_compile(not (forceglobal and meta), string.format("global %s conflicts with local", tostring(symbol)), symbol)
          assert_compile(not (meta and not meta.var), ("expected var " .. raw), symbol)
        end
        assert_compile((meta or not opts0.noundef or (scope.hashfn and ("$" == first)) or global_allowed_3f(first)), ("expected local " .. first), symbol)
        if forceglobal then
          assert_compile(not scope.symmeta[scope.unmanglings[raw]], ("global " .. raw .. " conflicts with local"), symbol)
          scope.manglings[raw] = global_mangling(raw)
          scope.unmanglings[global_mangling(raw)] = raw
          local _397_
          do
            local _396_0 = utils.root.options
            if (nil ~= _396_0) then
              _396_0 = _396_0.allowedGlobals
            end
            _397_ = _396_0
          end
          if _397_ then
            local _400_
            do
              local _399_0 = utils.root.options
              if (nil ~= _399_0) then
                _399_0 = _399_0.allowedGlobals
              end
              _400_ = _399_0
            end
            table.insert(_400_, raw)
          end
        end
        return symbol_to_expression(symbol, scope)[1]
      end
    end
    local function compile_top_target(lvalues)
      local inits = nil
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, l in ipairs(lvalues) do
          local val_19_ = nil
          if scope.manglings[l] then
            val_19_ = l
          else
            val_19_ = "nil"
          end
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        inits = tbl_17_
      end
      local init = table.concat(inits, ", ")
      local lvalue = table.concat(lvalues, ", ")
      local plast = parent[#parent]
      local plen = #parent
      local ret = compile1(from, scope, parent, {target = lvalue})
      if declaration then
        for pi = plen, #parent do
          if (parent[pi] == plast) then
            plen = pi
          end
        end
        if ((#parent == (plen + 1)) and parent[#parent].leaf) then
          parent[#parent]["leaf"] = ("local " .. parent[#parent].leaf)
        elseif (init == "nil") then
          table.insert(parent, (plen + 1), {ast = ast, leaf = ("local " .. lvalue)})
        else
          table.insert(parent, (plen + 1), {ast = ast, leaf = ("local " .. lvalue .. " = " .. init)})
        end
      end
      return ret
    end
    local function destructure_sym(left, rightexprs, up1, top_3f)
      local lname = getname(left, up1)
      check_binding_valid(left, scope, left)
      if top_3f then
        return compile_top_target({lname})
      else
        return emit(parent, setter:format(lname, exprs1(rightexprs)), left)
      end
    end
    local function dynamic_set_target(_411_0)
      local _412_ = _411_0
      local _ = _412_[1]
      local target = _412_[2]
      local keys = {(table.unpack or unpack)(_412_, 3)}
      assert_compile(utils["sym?"](target), "dynamic set needs symbol target", ast)
      assert_compile(next(keys), "dynamic set needs at least one key", ast)
      local keys0 = nil
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _0, k in ipairs(keys) do
          local val_19_ = tostring(compile1(k, scope, parent, {nval = 1})[1])
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        keys0 = tbl_17_
      end
      return string.format("%s[%s]", tostring(symbol_to_expression(target, scope, true)), table.concat(keys0, "]["))
    end
    local function destructure_values(left, rightexprs, up1, destructure1, top_3f)
      local left_names, tables = {}, {}
      for i, name in ipairs(left) do
        if utils["sym?"](name) then
          table.insert(left_names, getname(name, up1))
        elseif utils["call-of?"](name, ".") then
          table.insert(left_names, dynamic_set_target(name))
        else
          local symname = gensym(scope, symtype0)
          table.insert(left_names, symname)
          tables[i] = {name, utils.expr(symname, "sym")}
        end
      end
      assert_compile(left[1], "must provide at least one value", left)
      if top_3f then
        compile_top_target(left_names)
      elseif utils["expr?"](rightexprs) then
        emit(parent, setter:format(table.concat(left_names, ","), exprs1(rightexprs)), left)
      else
        local names = table.concat(left_names, ",")
        local target = nil
        if declaration then
          target = ("local " .. names)
        else
          target = names
        end
        emit(parent, compile1(rightexprs, scope, parent, {target = target}), left)
      end
      for _, pair in utils.stablepairs(tables) do
        destructure1(pair[1], {pair[2]}, left)
      end
      return nil
    end
    local unpack_fn = "function (t, k, e)\n                        local mt = getmetatable(t)\n                        if 'table' == type(mt) and mt.__fennelrest then\n                          return mt.__fennelrest(t, k)\n                        elseif e then\n                          local rest = {}\n                          for k, v in pairs(t) do\n                            if not e[k] then rest[k] = v end\n                          end\n                          return rest\n                        else\n                          return {(table.unpack or unpack)(t, k)}\n                        end\n                      end"
    local function destructure_kv_rest(s, v, left, excluded_keys, destructure1)
      local exclude_str = nil
      local _417_
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, k in ipairs(excluded_keys) do
          local val_19_ = string.format("[%s] = true", serialize_string(k))
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        _417_ = tbl_17_
      end
      exclude_str = table.concat(_417_, ", ")
      local subexpr = utils.expr(string.format(string.gsub(("(" .. unpack_fn .. ")(%s, %s, {%s})"), "\n%s*", " "), s, tostring(v), exclude_str), "expression")
      return destructure1(v, {subexpr}, left)
    end
    local function destructure_rest(s, k, left, destructure1)
      local unpack_str = ("(" .. unpack_fn .. ")(%s, %s)")
      local formatted = string.format(string.gsub(unpack_str, "\n%s*", " "), s, k)
      local subexpr = utils.expr(formatted, "expression")
      local function _419_()
        local next_symbol = left[(k + 2)]
        return ((nil == next_symbol) or utils["sym?"](next_symbol, "&as"))
      end
      assert_compile((utils["sequence?"](left) and _419_()), "expected rest argument before last parameter", left)
      return destructure1(left[(k + 1)], {subexpr}, left)
    end
    local function optimize_table_destructure_3f(left, right)
      local function _420_()
        local all = next(left)
        for _, d in ipairs(left) do
          if not all then break end
          all = ((utils["sym?"](d) and not tostring(d):find("^&")) or (utils["list?"](d) and utils["sym?"](d[1], ".")))
        end
        return all
      end
      return (utils["sequence?"](left) and utils["sequence?"](right) and _420_())
    end
    local function destructure_table(left, rightexprs, top_3f, destructure1, up1)
      if optimize_table_destructure_3f(left, rightexprs) then
        return destructure_values(utils.list(unpack(left)), utils.list(utils.sym("values"), unpack(rightexprs)), up1, destructure1)
      else
        local right = nil
        do
          local _421_0 = nil
          if top_3f then
            _421_0 = exprs1(compile1(from, scope, parent))
          else
            _421_0 = exprs1(rightexprs)
          end
          if (_421_0 == "") then
            right = "nil"
          elseif (nil ~= _421_0) then
            local right0 = _421_0
            right = right0
          else
          right = nil
          end
        end
        local s = nil
        if utils["sym?"](rightexprs) then
          s = right
        else
          s = gensym(scope, symtype0)
        end
        local excluded_keys = {}
        if not utils["sym?"](rightexprs) then
          emit(parent, string.format("local %s = %s", s, right), left)
        end
        for k, v in utils.stablepairs(left) do
          if not (("number" == type(k)) and tostring(left[(k - 1)]):find("^&")) then
            if (utils["sym?"](k) and (tostring(k) == "&")) then
              destructure_kv_rest(s, v, left, excluded_keys, destructure1)
            elseif (utils["sym?"](v) and (tostring(v) == "&")) then
              destructure_rest(s, k, left, destructure1)
            elseif (utils["sym?"](k) and (tostring(k) == "&as")) then
              destructure_sym(v, {utils.expr(tostring(s))}, left)
            elseif (utils["sequence?"](left) and (tostring(v) == "&as")) then
              local _, next_sym, trailing = select(k, unpack(left))
              assert_compile((nil == trailing), "expected &as argument before last parameter", left)
              destructure_sym(next_sym, {utils.expr(tostring(s))}, left)
            else
              local key = nil
              if (type(k) == "string") then
                key = serialize_string(k)
              else
                key = k
              end
              local subexpr = utils.expr(("%s[%s]"):format(s, key), "expression")
              if (type(k) == "string") then
                table.insert(excluded_keys, k)
              end
              destructure1(v, subexpr, left)
            end
          end
        end
        return nil
      end
    end
    local function destructure1(left, rightexprs, up1, top_3f)
      if (utils["sym?"](left) and (left[1] ~= "nil")) then
        destructure_sym(left, rightexprs, up1, top_3f)
      elseif utils["table?"](left) then
        destructure_table(left, rightexprs, top_3f, destructure1, up1)
      elseif utils["call-of?"](left, ".") then
        destructure_values({left}, rightexprs, up1, destructure1)
      elseif utils["list?"](left) then
        assert_compile(top_3f, "can't nest multi-value destructuring", left)
        destructure_values(left, rightexprs, up1, destructure1, true)
      else
        assert_compile(false, string.format("unable to bind %s %s", type(left), tostring(left)), (((type(up1[2]) == "table") and up1[2]) or up1))
      end
      return (top_3f and {returned = true})
    end
    local ret = destructure1(to, from, ast, true)
    utils.hook("destructure", from, to, scope, opts0)
    apply_deferred_scope_changes(scope, deferred_scope_changes, ast)
    return ret
  end
  local function require_include(ast, scope, parent, opts)
    opts.fallback = function(e, no_warn)
      if not no_warn then
        utils.warn(("include module not found, falling back to require: %s"):format(tostring(e)), ast)
      end
      return utils.expr(string.format("require(%s)", tostring(e)), "statement")
    end
    return scopes.global.specials.include(ast, scope, parent, opts)
  end
  local function compile_asts(asts, options)
    local opts = utils.copy(options)
    local scope = (opts.scope or make_scope(scopes.global))
    local chunk = {}
    if opts.requireAsInclude then
      scope.specials.require = require_include
    end
    if opts.assertAsRepl then
      scope.macros.assert = scope.macros["assert-repl"]
    end
    local _435_ = utils.root
    _435_["set-reset"](_435_)
    utils.root.chunk, utils.root.scope, utils.root.options = chunk, scope, opts
    for i = 1, #asts do
      local exprs = compile1(asts[i], scope, chunk, {nval = (((i < #asts) and 0) or nil), tail = (i == #asts)})
      keep_side_effects(exprs, chunk, nil, asts[i])
      if (i == #asts) then
        utils.hook("chunk", asts[i], scope)
      end
    end
    utils.root.reset()
    return flatten(chunk, opts)
  end
  local function compile_stream(stream, _3fopts)
    local opts = (_3fopts or {})
    local asts = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for _, ast in parser.parser(stream, opts.filename, opts) do
        local val_19_ = ast
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      asts = tbl_17_
    end
    return compile_asts(asts, opts)
  end
  local function compile_string(str, _3fopts)
    return compile_stream(parser["string-stream"](str, _3fopts), _3fopts)
  end
  local function compile(from, _3fopts)
    local _438_0 = type(from)
    if (_438_0 == "userdata") then
      local function _439_()
        local _440_0 = from:read(1)
        if (nil ~= _440_0) then
          return _440_0:byte()
        else
          return _440_0
        end
      end
      return compile_stream(_439_, _3fopts)
    elseif (_438_0 == "function") then
      return compile_stream(from, _3fopts)
    else
      local _ = _438_0
      return compile_asts({from}, _3fopts)
    end
  end
  local function traceback_frame(info)
    if ((info.what == "C") and info.name) then
      return string.format("\9[C]: in function '%s'", info.name)
    elseif (info.what == "C") then
      return "\9[C]: in ?"
    else
      local remap = sourcemap[info.source]
      if (remap and remap[info.currentline]) then
        if ((remap[info.currentline][1] or "unknown") ~= "unknown") then
          info.short_src = sourcemap[("@" .. remap[info.currentline][1])].short_src
        else
          info.short_src = remap.short_src
        end
        info.currentline = (remap[info.currentline][2] or -1)
      end
      if (info.what == "Lua") then
        local function _445_()
          if info.name then
            return ("'" .. info.name .. "'")
          else
            return "?"
          end
        end
        return string.format("\9%s:%d: in function %s", info.short_src, info.currentline, _445_())
      elseif (info.short_src == "(tail call)") then
        return "  (tail call)"
      else
        return string.format("\9%s:%d: in main chunk", info.short_src, info.currentline)
      end
    end
  end
  local lua_getinfo = debug.getinfo
  local function traceback(_3fmsg, _3fstart)
    local _448_0 = type(_3fmsg)
    if ((_448_0 == "nil") or (_448_0 == "string")) then
      local msg = (_3fmsg or "")
      if ((msg:find("^%g+:%d+:%d+ Compile error:.*") or msg:find("^%g+:%d+:%d+ Parse error:.*")) and not utils["debug-on?"]("trace")) then
        return msg
      else
        local lines = {}
        if (msg:find("^%g+:%d+:%d+ Compile error:") or msg:find("^%g+:%d+:%d+ Parse error:")) then
          table.insert(lines, msg)
        else
          local newmsg = msg:gsub("^[^:]*:%d+:%s+", "runtime error: ")
          table.insert(lines, newmsg)
        end
        table.insert(lines, "stack traceback:")
        local done_3f, level = false, (_3fstart or 2)
        while not done_3f do
          do
            local _450_0 = lua_getinfo(level, "Sln")
            if (_450_0 == nil) then
              done_3f = true
            elseif (nil ~= _450_0) then
              local info = _450_0
              table.insert(lines, traceback_frame(info))
            end
          end
          level = (level + 1)
        end
        return table.concat(lines, "\n")
      end
    else
      local _ = _448_0
      return _3fmsg
    end
  end
  local function getinfo(thread_or_level, ...)
    local thread_or_level0 = nil
    if ("number" == type(thread_or_level)) then
      thread_or_level0 = (1 + thread_or_level)
    else
      thread_or_level0 = thread_or_level
    end
    local info = lua_getinfo(thread_or_level0, ...)
    local mapped = (info and sourcemap[info.source])
    if mapped then
      for _, key in ipairs({"currentline", "linedefined", "lastlinedefined"}) do
        local mapped_value = nil
        do
          local _455_0 = mapped
          if (nil ~= _455_0) then
            _455_0 = _455_0[info[key]]
          end
          if (nil ~= _455_0) then
            _455_0 = _455_0[2]
          end
          mapped_value = _455_0
        end
        if (info[key] and mapped_value) then
          info[key] = mapped_value
        end
      end
      if info.activelines then
        local tbl_14_ = {}
        for line in pairs(info.activelines) do
          local k_15_, v_16_ = mapped[line][2], true
          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
            tbl_14_[k_15_] = v_16_
          end
        end
        info.activelines = tbl_14_
      end
      if (info.what == "Lua") then
        info.what = "Fennel"
      end
    end
    return info
  end
  local function mixed_concat(t, joiner)
    local seen = {}
    local ret, s = "", ""
    for k, v in ipairs(t) do
      table.insert(seen, k)
      ret = (ret .. s .. v)
      s = joiner
    end
    for k, v in utils.stablepairs(t) do
      if not seen[k] then
        ret = (ret .. s .. "[" .. k .. "]" .. "=" .. v)
        s = joiner
      end
    end
    return ret
  end
  local function do_quote(form, scope, parent, runtime_3f)
    local function quote_all(form0, discard_non_numbers)
      local tbl_14_ = {}
      for k, v in utils.stablepairs(form0) do
        local k_15_, v_16_ = nil, nil
        if (type(k) == "number") then
          k_15_, v_16_ = k, do_quote(v, scope, parent, runtime_3f)
        elseif not discard_non_numbers then
          k_15_, v_16_ = do_quote(k, scope, parent, runtime_3f), do_quote(v, scope, parent, runtime_3f)
        else
        k_15_, v_16_ = nil
        end
        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
          tbl_14_[k_15_] = v_16_
        end
      end
      return tbl_14_
    end
    if utils["varg?"](form) then
      assert_compile(not runtime_3f, "quoted ... may only be used at compile time", form)
      return "_VARARG"
    elseif utils["sym?"](form) then
      local filename = nil
      if form.filename then
        filename = string.format("%q", form.filename)
      else
        filename = "nil"
      end
      local symstr = tostring(form)
      assert_compile(not runtime_3f, "symbols may only be used at compile time", form)
      if (symstr:find("#$") or symstr:find("#[:.]")) then
        return string.format("_G.sym('%s', {filename=%s, line=%s})", autogensym(symstr, scope), filename, (form.line or "nil"))
      else
        return string.format("_G.sym('%s', {quoted=true, filename=%s, line=%s})", symstr, filename, (form.line or "nil"))
      end
    elseif utils["call-of?"](form, "unquote") then
      local res = unpack(compile1(form[2], scope, parent))
      return res[1]
    elseif utils["list?"](form) then
      local mapped = quote_all(form, true)
      local filename = nil
      if form.filename then
        filename = string.format("%q", form.filename)
      else
        filename = "nil"
      end
      assert_compile(not runtime_3f, "lists may only be used at compile time", form)
      return string.format(("setmetatable({filename=%s, line=%s, bytestart=%s, %s}" .. ", getmetatable(_G.list()))"), filename, (form.line or "nil"), (form.bytestart or "nil"), mixed_concat(mapped, ", "))
    elseif utils["sequence?"](form) then
      local mapped = quote_all(form)
      local source = getmetatable(form)
      local filename = nil
      if source.filename then
        filename = string.format("%q", source.filename)
      else
        filename = "nil"
      end
      local _470_
      if source then
        _470_ = source.line
      else
        _470_ = "nil"
      end
      return string.format("setmetatable({%s}, {filename=%s, line=%s, sequence=%s})", mixed_concat(mapped, ", "), filename, _470_, "(getmetatable(_G.sequence()))['sequence']")
    elseif (type(form) == "table") then
      local mapped = quote_all(form)
      local source = getmetatable(form)
      local filename = nil
      if source.filename then
        filename = string.format("%q", source.filename)
      else
        filename = "nil"
      end
      local function _473_()
        if source then
          return source.line
        else
          return "nil"
        end
      end
      return string.format("setmetatable({%s}, {filename=%s, line=%s})", mixed_concat(mapped, ", "), filename, _473_())
    elseif (type(form) == "string") then
      return serialize_string(form)
    else
      return tostring(form)
    end
  end
  return {["apply-deferred-scope-changes"] = apply_deferred_scope_changes, ["check-binding-valid"] = check_binding_valid, ["compile-stream"] = compile_stream, ["compile-string"] = compile_string, ["declare-local"] = declare_local, ["do-quote"] = do_quote, ["global-allowed?"] = global_allowed_3f, ["global-mangling"] = global_mangling, ["global-unmangling"] = global_unmangling, ["keep-side-effects"] = keep_side_effects, ["make-scope"] = make_scope, ["require-include"] = require_include, ["symbol-to-expression"] = symbol_to_expression, assert = assert_compile, autogensym = autogensym, compile = compile, compile1 = compile1, destructure = destructure, emit = emit, gensym = gensym, getinfo = getinfo, macroexpand = macroexpand_2a, metadata = make_metadata(), scopes = scopes, sourcemap = sourcemap, traceback = traceback}
end
package.preload["fennel.friend"] = package.preload["fennel.friend"] or function(...)
  local utils = require("fennel.utils")
  local utf8_ok_3f, utf8 = pcall(require, "utf8")
  local suggestions = {["$ and $... in hashfn are mutually exclusive"] = {"modifying the hashfn so it only contains $... or $, $1, $2, $3, etc"}, ["can't introduce (.*) here"] = {"declaring the local at the top-level"}, ["can't start multisym segment with a digit"] = {"removing the digit", "adding a non-digit before the digit"}, ["cannot call literal value"] = {"checking for typos", "checking for a missing function name", "making sure to use prefix operators, not infix"}, ["could not compile value of type "] = {"debugging the macro you're calling to return a list or table"}, ["could not read number (.*)"] = {"removing the non-digit character", "beginning the identifier with a non-digit if it is not meant to be a number"}, ["expected a function.* to call"] = {"removing the empty parentheses", "using square brackets if you want an empty table"}, ["expected at least one pattern/body pair"] = {"adding a pattern and a body to execute when the pattern matches"}, ["expected binding and iterator"] = {"making sure you haven't omitted a local name or iterator"}, ["expected binding sequence"] = {"placing a table here in square brackets containing identifiers to bind"}, ["expected body expression"] = {"putting some code in the body of this form after the bindings"}, ["expected each macro to be function"] = {"ensuring that the value for each key in your macros table contains a function", "avoid defining nested macro tables"}, ["expected even number of name/value bindings"] = {"finding where the identifier or value is missing"}, ["expected even number of pattern/body pairs"] = {"checking that every pattern has a body to go with it", "adding _ before the final body"}, ["expected even number of values in table literal"] = {"removing a key", "adding a value"}, ["expected local"] = {"looking for a typo", "looking for a local which is used out of its scope"}, ["expected macros to be table"] = {"ensuring your macro definitions return a table"}, ["expected parameters"] = {"adding function parameters as a list of identifiers in brackets"}, ["expected range to include start and stop"] = {"adding missing arguments"}, ["expected rest argument before last parameter"] = {"moving & to right before the final identifier when destructuring"}, ["expected symbol for function parameter: (.*)"] = {"changing %s to an identifier instead of a literal value"}, ["expected var (.*)"] = {"declaring %s using var instead of let/local", "introducing a new local instead of changing the value of %s"}, ["expected vararg as last parameter"] = {"moving the \"...\" to the end of the parameter list"}, ["expected whitespace before opening delimiter"] = {"adding whitespace"}, ["global (.*) conflicts with local"] = {"renaming local %s"}, ["invalid character: (.)"] = {"deleting or replacing %s", "avoiding reserved characters like \", \\, ', ~, ;, @, `, and comma"}, ["local (.*) was overshadowed by a special form or macro"] = {"renaming local %s"}, ["macro not found in macro module"] = {"checking the keys of the imported macro module's returned table"}, ["macro tried to bind (.*) without gensym"] = {"changing to %s# when introducing identifiers inside macros"}, ["malformed multisym"] = {"ensuring each period or colon is not followed by another period or colon"}, ["may only be used at compile time"] = {"moving this to inside a macro if you need to manipulate symbols/lists", "using square brackets instead of parens to construct a table"}, ["method must be last component"] = {"using a period instead of a colon for field access", "removing segments after the colon", "making the method call, then looking up the field on the result"}, ["mismatched closing delimiter (.), expected (.)"] = {"replacing %s with %s", "deleting %s", "adding matching opening delimiter earlier"}, ["missing subject"] = {"adding an item to operate on"}, ["multisym method calls may only be in call position"] = {"using a period instead of a colon to reference a table's fields", "putting parens around this"}, ["tried to reference a macro without calling it"] = {"renaming the macro so as not to conflict with locals"}, ["tried to reference a special form without calling it"] = {"making sure to use prefix operators, not infix", "wrapping the special in a function if you need it to be first class"}, ["tried to use unquote outside quote"] = {"moving the form to inside a quoted form", "removing the comma"}, ["tried to use vararg with operator"] = {"accumulating over the operands"}, ["unable to bind (.*)"] = {"replacing the %s with an identifier"}, ["unexpected arguments"] = {"removing an argument", "checking for typos"}, ["unexpected closing delimiter (.)"] = {"deleting %s", "adding matching opening delimiter earlier"}, ["unexpected iterator clause"] = {"removing an argument", "checking for typos"}, ["unexpected multi symbol (.*)"] = {"removing periods or colons from %s"}, ["unexpected vararg"] = {"putting \"...\" at the end of the fn parameters if the vararg was intended"}, ["unknown identifier: (.*)"] = {"looking to see if there's a typo", "using the _G table instead, eg. _G.%s if you really want a global", "moving this code to somewhere that %s is in scope", "binding %s as a local in the scope of this code"}, ["unused local (.*)"] = {"renaming the local to _%s if it is meant to be unused", "fixing a typo so %s is used", "disabling the linter which checks for unused locals"}, ["use of global (.*) is aliased by a local"] = {"renaming local %s", "refer to the global using _G.%s instead of directly"}}
  local unpack = (table.unpack or _G.unpack)
  local function suggest(msg)
    local s = nil
    for pat, sug in pairs(suggestions) do
      if s then break end
      local matches = {msg:match(pat)}
      if next(matches) then
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, s0 in ipairs(sug) do
          local val_19_ = s0:format(unpack(matches))
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        s = tbl_17_
      else
      s = nil
      end
    end
    return s
  end
  local function read_line(filename, line, _3fsource)
    if _3fsource then
      local matcher = string.gmatch((_3fsource .. "\n"), "(.-)(\13?\n)")
      for _ = 2, line do
        matcher()
      end
      return matcher()
    else
      local f = assert(_G.io.open(filename))
      local function close_handlers_10_(ok_11_, ...)
        f:close()
        if ok_11_ then
          return ...
        else
          return error(..., 0)
        end
      end
      local function _190_()
        for _ = 2, line do
          f:read()
        end
        return f:read()
      end
      return close_handlers_10_(_G.xpcall(_190_, (package.loaded.fennel or debug).traceback))
    end
  end
  local function sub(str, start, _end)
    if ((_end < start) or (#str < start)) then
      return ""
    elseif utf8_ok_3f then
      return string.sub(str, utf8.offset(str, start), ((utf8.offset(str, (_end + 1)) or (utf8.len(str) + 1)) - 1))
    else
      return string.sub(str, start, math.min(_end, str:len()))
    end
  end
  local function highlight_line(codeline, col, _3fendcol, opts)
    if ((opts and (false == opts["error-pinpoint"])) or (os and os.getenv and os.getenv("NO_COLOR"))) then
      return codeline
    else
      local _193_ = (opts or {})
      local error_pinpoint = _193_["error-pinpoint"]
      local endcol = (_3fendcol or col)
      local eol = nil
      if utf8_ok_3f then
        eol = utf8.len(codeline)
      else
        eol = string.len(codeline)
      end
      local _195_ = (error_pinpoint or {"\27[7m", "\27[0m"})
      local open = _195_[1]
      local close = _195_[2]
      return (sub(codeline, 1, col) .. open .. sub(codeline, (col + 1), (endcol + 1)) .. close .. sub(codeline, (endcol + 2), eol))
    end
  end
  local function friendly_msg(msg, _197_0, source, opts)
    local _198_ = _197_0
    local col = _198_["col"]
    local endcol = _198_["endcol"]
    local endline = _198_["endline"]
    local filename = _198_["filename"]
    local line = _198_["line"]
    local ok, codeline = pcall(read_line, filename, line, source)
    local endcol0 = nil
    if (ok and codeline and (line ~= endline)) then
      endcol0 = #codeline
    else
      endcol0 = endcol
    end
    local out = {msg, ""}
    if (ok and codeline) then
      if col then
        table.insert(out, highlight_line(codeline, col, endcol0, opts))
      else
        table.insert(out, codeline)
      end
    end
    for _, suggestion in ipairs((suggest(msg) or {})) do
      table.insert(out, ("* Try %s."):format(suggestion))
    end
    return table.concat(out, "\n")
  end
  local function assert_compile(condition, msg, ast, source, opts)
    if not condition then
      local _202_ = utils["ast-source"](ast)
      local col = _202_["col"]
      local filename = _202_["filename"]
      local line = _202_["line"]
      error(friendly_msg(("%s:%s:%s: Compile error: %s"):format((filename or "unknown"), (line or "?"), (col or "?"), msg), utils["ast-source"](ast), source, opts), 0)
    end
    return condition
  end
  local function parse_error(msg, filename, line, col, source, opts)
    return error(friendly_msg(("%s:%s:%s: Parse error: %s"):format(filename, line, col, msg), {col = col, filename = filename, line = line}, source, opts), 0)
  end
  return {["assert-compile"] = assert_compile, ["parse-error"] = parse_error}
end
package.preload["fennel.parser"] = package.preload["fennel.parser"] or function(...)
  local utils = require("fennel.utils")
  local friend = require("fennel.friend")
  local unpack = (table.unpack or _G.unpack)
  local function granulate(getchunk)
    local c, index, done_3f = "", 1, false
    local function _204_(parser_state)
      if not done_3f then
        if (index <= #c) then
          local b = c:byte(index)
          index = (index + 1)
          return b
        else
          local _205_0 = getchunk(parser_state)
          local function _206_()
            local char = _205_0
            return (char ~= "")
          end
          if ((nil ~= _205_0) and _206_()) then
            local char = _205_0
            c = char
            index = 2
            return c:byte()
          else
            local _ = _205_0
            done_3f = true
            return nil
          end
        end
      end
    end
    local function _210_()
      c = ""
      return nil
    end
    return _204_, _210_
  end
  local function string_stream(str, _3foptions)
    local str0 = str:gsub("^#!", ";;")
    if _3foptions then
      _3foptions.source = str0
    end
    local index = 1
    local function _212_()
      local r = str0:byte(index)
      index = (index + 1)
      return r
    end
    return _212_
  end
  local delims = {[123] = 125, [125] = true, [40] = 41, [41] = true, [91] = 93, [93] = true}
  local function sym_char_3f(b)
    local b0 = nil
    if ("number" == type(b)) then
      b0 = b
    else
      b0 = string.byte(b)
    end
    return ((32 < b0) and not delims[b0] and (b0 ~= 127) and (b0 ~= 34) and (b0 ~= 39) and (b0 ~= 126) and (b0 ~= 59) and (b0 ~= 44) and (b0 ~= 64) and (b0 ~= 96))
  end
  local prefixes = {[35] = "hashfn", [39] = "quote", [44] = "unquote", [96] = "quote"}
  local nan, negative_nan = nil, nil
  if (45 == string.byte(tostring((0 / 0)))) then
    nan, negative_nan = ( - (0 / 0)), (0 / 0)
  else
    nan, negative_nan = (0 / 0), ( - (0 / 0))
  end
  local function char_starter_3f(b)
    return (((1 < b) and (b < 127)) or ((192 < b) and (b < 247)))
  end
  local function parser_fn(getbyte, filename, _215_0)
    local _216_ = _215_0
    local options = _216_
    local comments = _216_["comments"]
    local source = _216_["source"]
    local unfriendly = _216_["unfriendly"]
    local stack = {}
    local line, byteindex, col, prev_col, lastb = 1, 0, 0, 0, nil
    local function ungetb(ub)
      if char_starter_3f(ub) then
        col = (col - 1)
      end
      if (ub == 10) then
        line, col = (line - 1), prev_col
      end
      byteindex = (byteindex - 1)
      lastb = ub
      return nil
    end
    local function getb()
      local r = nil
      if lastb then
        r, lastb = lastb, nil
      else
        r = getbyte({["stack-size"] = #stack})
      end
      if r then
        byteindex = (byteindex + 1)
      end
      if (r and char_starter_3f(r)) then
        col = (col + 1)
      end
      if (r == 10) then
        line, col, prev_col = (line + 1), 0, col
      end
      return r
    end
    local function whitespace_3f(b)
      local function _224_()
        local _223_0 = options.whitespace
        if (nil ~= _223_0) then
          _223_0 = _223_0[b]
        end
        return _223_0
      end
      return ((b == 32) or ((9 <= b) and (b <= 13)) or _224_())
    end
    local function parse_error(msg, _3fcol_adjust)
      local col0 = (col + (_3fcol_adjust or -1))
      if (nil == utils["hook-opts"]("parse-error", options, msg, filename, (line or "?"), col0, source, utils.root.reset)) then
        utils.root.reset()
        if unfriendly then
          return error(string.format("%s:%s:%s: Parse error: %s", filename, (line or "?"), col0, msg), 0)
        else
          return friend["parse-error"](msg, filename, (line or "?"), col0, source, options)
        end
      end
    end
    local function parse_stream()
      local whitespace_since_dispatch, done_3f, retval = true
      local function set_source_fields(source0)
        source0.byteend, source0.endcol, source0.endline = byteindex, (col - 1), line
        return nil
      end
      local function dispatch(v, _3fsource, _3fraw)
        whitespace_since_dispatch = false
        local v0 = nil
        do
          local _228_0 = utils["hook-opts"]("parse-form", options, v, _3fsource, _3fraw, stack)
          if (nil ~= _228_0) then
            local hookv = _228_0
            v0 = hookv
          else
            local _ = _228_0
            v0 = v
          end
        end
        local _230_0 = stack[#stack]
        if (_230_0 == nil) then
          retval, done_3f = v0, true
          return nil
        elseif ((_G.type(_230_0) == "table") and (nil ~= _230_0.prefix)) then
          local prefix = _230_0.prefix
          local source0 = nil
          do
            local _231_0 = table.remove(stack)
            set_source_fields(_231_0)
            source0 = _231_0
          end
          local list = utils.list(utils.sym(prefix, source0), v0)
          return dispatch(utils.copy(source0, list))
        elseif (nil ~= _230_0) then
          local top = _230_0
          return table.insert(top, v0)
        end
      end
      local function badend()
        local closers = nil
        do
          local tbl_17_ = {}
          local i_18_ = #tbl_17_
          for _, _233_0 in ipairs(stack) do
            local _234_ = _233_0
            local closer = _234_["closer"]
            local val_19_ = closer
            if (nil ~= val_19_) then
              i_18_ = (i_18_ + 1)
              tbl_17_[i_18_] = val_19_
            end
          end
          closers = tbl_17_
        end
        local _236_
        if (#stack == 1) then
          _236_ = ""
        else
          _236_ = "s"
        end
        return parse_error(string.format("expected closing delimiter%s %s", _236_, string.char(unpack(closers))), 0)
      end
      local function skip_whitespace(b, close_table)
        if (b and whitespace_3f(b)) then
          whitespace_since_dispatch = true
          return skip_whitespace(getb(), close_table)
        elseif (not b and next(stack)) then
          badend()
          for i = #stack, 2, -1 do
            close_table(stack[i].closer)
          end
          return stack[1].closer
        else
          return b
        end
      end
      local function parse_comment(b, contents)
        if (b and (10 ~= b)) then
          local function _239_()
            table.insert(contents, string.char(b))
            return contents
          end
          return parse_comment(getb(), _239_())
        elseif comments then
          ungetb(10)
          return dispatch(utils.comment(table.concat(contents), {filename = filename, line = line}))
        end
      end
      local function open_table(b)
        if not whitespace_since_dispatch then
          parse_error(("expected whitespace before opening delimiter " .. string.char(b)))
        end
        return table.insert(stack, {bytestart = byteindex, closer = delims[b], col = (col - 1), filename = filename, line = line})
      end
      local function close_list(list)
        return dispatch(setmetatable(list, getmetatable(utils.list())))
      end
      local function close_sequence(tbl)
        local mt = getmetatable(utils.sequence())
        for k, v in pairs(tbl) do
          if ("number" ~= type(k)) then
            mt[k] = v
            tbl[k] = nil
          end
        end
        return dispatch(setmetatable(tbl, mt))
      end
      local function add_comment_at(comments0, index, node)
        local _243_0 = comments0[index]
        if (nil ~= _243_0) then
          local existing = _243_0
          return table.insert(existing, node)
        else
          local _ = _243_0
          comments0[index] = {node}
          return nil
        end
      end
      local function next_noncomment(tbl, i)
        if utils["comment?"](tbl[i]) then
          return next_noncomment(tbl, (i + 1))
        elseif utils["sym?"](tbl[i], ":") then
          return tostring(tbl[(i + 1)])
        else
          return tbl[i]
        end
      end
      local function extract_comments(tbl)
        local comments0 = {keys = {}, last = {}, values = {}}
        while utils["comment?"](tbl[#tbl]) do
          table.insert(comments0.last, 1, table.remove(tbl))
        end
        local last_key_3f = false
        for i, node in ipairs(tbl) do
          if not utils["comment?"](node) then
            last_key_3f = not last_key_3f
          elseif last_key_3f then
            add_comment_at(comments0.values, next_noncomment(tbl, i), node)
          else
            add_comment_at(comments0.keys, next_noncomment(tbl, i), node)
          end
        end
        for i = #tbl, 1, -1 do
          if utils["comment?"](tbl[i]) then
            table.remove(tbl, i)
          end
        end
        return comments0
      end
      local function close_curly_table(tbl)
        local comments0 = extract_comments(tbl)
        local keys = {}
        local val = {}
        if ((#tbl % 2) ~= 0) then
          byteindex = (byteindex - 1)
          parse_error("expected even number of values in table literal")
        end
        setmetatable(val, tbl)
        for i = 1, #tbl, 2 do
          if ((tostring(tbl[i]) == ":") and utils["sym?"](tbl[(i + 1)]) and utils["sym?"](tbl[i])) then
            tbl[i] = tostring(tbl[(i + 1)])
          end
          val[tbl[i]] = tbl[(i + 1)]
          table.insert(keys, tbl[i])
        end
        tbl.comments = comments0
        tbl.keys = keys
        return dispatch(val)
      end
      local function close_table(b)
        local top = table.remove(stack)
        if (top == nil) then
          parse_error(("unexpected closing delimiter " .. string.char(b)))
        end
        if (top.closer and (top.closer ~= b)) then
          parse_error(("mismatched closing delimiter " .. string.char(b) .. ", expected " .. string.char(top.closer)))
        end
        set_source_fields(top)
        if (b == 41) then
          return close_list(top)
        elseif (b == 93) then
          return close_sequence(top)
        else
          return close_curly_table(top)
        end
      end
      local function parse_string_loop(chars, b, state)
        if b then
          table.insert(chars, string.char(b))
        end
        local state0 = nil
        do
          local _254_0 = {state, b}
          if ((_G.type(_254_0) == "table") and (_254_0[1] == "base") and (_254_0[2] == 92)) then
            state0 = "backslash"
          elseif ((_G.type(_254_0) == "table") and (_254_0[1] == "base") and (_254_0[2] == 34)) then
            state0 = "done"
          elseif ((_G.type(_254_0) == "table") and (_254_0[1] == "backslash") and (_254_0[2] == 10)) then
            table.remove(chars, (#chars - 1))
            state0 = "base"
          else
            local _ = _254_0
            state0 = "base"
          end
        end
        if (b and (state0 ~= "done")) then
          return parse_string_loop(chars, getb(), state0)
        else
          return b
        end
      end
      local function escape_char(c)
        return ({[10] = "\\n", [11] = "\\v", [12] = "\\f", [13] = "\\r", [7] = "\\a", [8] = "\\b", [9] = "\\t"})[c:byte()]
      end
      local function parse_string(source0)
        if not whitespace_since_dispatch then
          utils.warn("expected whitespace before string", nil, filename, line)
        end
        table.insert(stack, {closer = 34})
        local chars = {"\""}
        if not parse_string_loop(chars, getb(), "base") then
          badend()
        end
        table.remove(stack)
        local raw = table.concat(chars)
        local formatted = raw:gsub("[\7-\13]", escape_char)
        local _259_0 = (rawget(_G, "loadstring") or load)(("return " .. formatted))
        if (nil ~= _259_0) then
          local load_fn = _259_0
          return dispatch(load_fn(), source0, raw)
        elseif (_259_0 == nil) then
          return parse_error(("Invalid string: " .. raw))
        end
      end
      local function parse_prefix(b)
        table.insert(stack, {bytestart = byteindex, col = (col - 1), filename = filename, line = line, prefix = prefixes[b]})
        local nextb = getb()
        local trailing_whitespace_3f = (whitespace_3f(nextb) or (true == delims[nextb]))
        if (trailing_whitespace_3f and (b ~= 35)) then
          parse_error("invalid whitespace after quoting prefix")
        end
        ungetb(nextb)
        if (trailing_whitespace_3f and (b == 35)) then
          local source0 = table.remove(stack)
          set_source_fields(source0)
          return dispatch(utils.sym("#", source0))
        end
      end
      local function parse_sym_loop(chars, b)
        if (b and sym_char_3f(b)) then
          table.insert(chars, string.char(b))
          return parse_sym_loop(chars, getb())
        else
          if b then
            ungetb(b)
          end
          return chars
        end
      end
      local function parse_number(rawstr, source0)
        local trimmed = (not rawstr:find("^_") and rawstr:gsub("_", ""))
        if ((trimmed == "nan") or (trimmed == "-nan")) then
          return false
        elseif rawstr:match("^%d") then
          dispatch((tonumber(trimmed) or parse_error(("could not read number \"" .. rawstr .. "\""))), source0, rawstr)
          return true
        else
          local _265_0 = tonumber(trimmed)
          if (nil ~= _265_0) then
            local x = _265_0
            dispatch(x, source0, rawstr)
            return true
          else
            local _ = _265_0
            return false
          end
        end
      end
      local function check_malformed_sym(rawstr)
        local function col_adjust(pat)
          return (rawstr:find(pat) - utils.len(rawstr) - 1)
        end
        if (rawstr:match("^~") and (rawstr ~= "~=")) then
          parse_error("invalid character: ~")
        elseif (rawstr:match("[%.:][%.:]") and (rawstr ~= "..") and (rawstr ~= "$...")) then
          parse_error(("malformed multisym: " .. rawstr), col_adjust("[%.:][%.:]"))
        elseif ((rawstr ~= ":") and rawstr:match(":$")) then
          parse_error(("malformed multisym: " .. rawstr), col_adjust(":$"))
        elseif rawstr:match(":.+[%.:]") then
          parse_error(("method must be last component of multisym: " .. rawstr), col_adjust(":.+[%.:]"))
        end
        if not whitespace_since_dispatch then
          utils.warn("expected whitespace before token", nil, filename, line)
        end
        return rawstr
      end
      local function parse_sym(b)
        local source0 = {bytestart = byteindex, col = (col - 1), filename = filename, line = line}
        local rawstr = table.concat(parse_sym_loop({string.char(b)}, getb()))
        set_source_fields(source0)
        if (rawstr == "true") then
          return dispatch(true, source0)
        elseif (rawstr == "false") then
          return dispatch(false, source0)
        elseif (rawstr == "...") then
          return dispatch(utils.varg(source0))
        elseif (rawstr == ".inf") then
          return dispatch((1 / 0), source0, rawstr)
        elseif (rawstr == "-.inf") then
          return dispatch((-1 / 0), source0, rawstr)
        elseif (rawstr == ".nan") then
          return dispatch(nan, source0, rawstr)
        elseif (rawstr == "-.nan") then
          return dispatch(negative_nan, source0, rawstr)
        elseif rawstr:match("^:.+$") then
          return dispatch(rawstr:sub(2), source0, rawstr)
        elseif not parse_number(rawstr, source0) then
          return dispatch(utils.sym(check_malformed_sym(rawstr), source0))
        end
      end
      local function parse_loop(b)
        if not b then
        elseif (b == 59) then
          parse_comment(getb(), {";"})
        elseif (type(delims[b]) == "number") then
          open_table(b)
        elseif delims[b] then
          close_table(b)
        elseif (b == 34) then
          parse_string({bytestart = byteindex, col = col, filename = filename, line = line})
        elseif prefixes[b] then
          parse_prefix(b)
        elseif (sym_char_3f(b) or (b == string.byte("~"))) then
          parse_sym(b)
        elseif not utils["hook-opts"]("illegal-char", options, b, getb, ungetb, dispatch) then
          parse_error(("invalid character: " .. string.char(b)))
        end
        if not b then
          return nil
        elseif done_3f then
          return true, retval
        else
          return parse_loop(skip_whitespace(getb(), close_table))
        end
      end
      return parse_loop(skip_whitespace(getb(), close_table))
    end
    local function _273_()
      stack, line, byteindex, col, lastb = {}, 1, 0, 0, ((lastb ~= 10) and lastb)
      return nil
    end
    return parse_stream, _273_
  end
  local function parser(stream_or_string, _3ffilename, _3foptions)
    local filename = (_3ffilename or "unknown")
    local options = (_3foptions or utils.root.options or {})
    assert(("string" == type(filename)), "expected filename as second argument to parser")
    if ("string" == type(stream_or_string)) then
      return parser_fn(string_stream(stream_or_string, options), filename, options)
    else
      return parser_fn(stream_or_string, filename, options)
    end
  end
  return {["string-stream"] = string_stream, ["sym-char?"] = sym_char_3f, granulate = granulate, parser = parser}
end
local utils = nil
package.preload["fennel.view"] = package.preload["fennel.view"] or function(...)
  local type_order = {["function"] = 5, boolean = 2, number = 1, string = 3, table = 4, thread = 7, userdata = 6}
  local default_opts = {["detect-cycles?"] = true, ["empty-as-sequence?"] = false, ["escape-newlines?"] = false, ["line-length"] = 80, ["max-sparse-gap"] = 10, ["metamethod?"] = true, ["one-line?"] = false, ["prefer-colon?"] = false, ["utf8?"] = true, depth = 128}
  local lua_pairs = pairs
  local lua_ipairs = ipairs
  local function pairs(t)
    local _1_0 = getmetatable(t)
    if ((_G.type(_1_0) == "table") and (nil ~= _1_0.__pairs)) then
      local p = _1_0.__pairs
      return p(t)
    else
      local _ = _1_0
      return lua_pairs(t)
    end
  end
  local function ipairs(t)
    local _3_0 = getmetatable(t)
    if ((_G.type(_3_0) == "table") and (nil ~= _3_0.__ipairs)) then
      local i = _3_0.__ipairs
      return i(t)
    else
      local _ = _3_0
      return lua_ipairs(t)
    end
  end
  local function length_2a(t)
    local _5_0 = getmetatable(t)
    if ((_G.type(_5_0) == "table") and (nil ~= _5_0.__len)) then
      local l = _5_0.__len
      return l(t)
    else
      local _ = _5_0
      return #t
    end
  end
  local function get_default(key)
    local _7_0 = default_opts[key]
    if (_7_0 == nil) then
      return error(("option '%s' doesn't have a default value, use the :after key to set it"):format(tostring(key)))
    elseif (nil ~= _7_0) then
      local v = _7_0
      return v
    end
  end
  local function getopt(options, key)
    local _9_0 = options[key]
    if ((_G.type(_9_0) == "table") and (nil ~= _9_0.once)) then
      local val_2a = _9_0.once
      return val_2a
    else
      local _3fval = _9_0
      return _3fval
    end
  end
  local function normalize_opts(options)
    local tbl_14_ = {}
    for k, v in pairs(options) do
      local k_15_, v_16_ = nil, nil
      local function _12_()
        local _11_0 = v
        if ((_G.type(_11_0) == "table") and (nil ~= _11_0.after)) then
          local val = _11_0.after
          return val
        else
          local function _13_()
            return v.once
          end
          if ((_G.type(_11_0) == "table") and _13_()) then
            return get_default(k)
          else
            local _ = _11_0
            return v
          end
        end
      end
      k_15_, v_16_ = k, _12_()
      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
        tbl_14_[k_15_] = v_16_
      end
    end
    return tbl_14_
  end
  local function sort_keys(_16_0, _18_0)
    local _17_ = _16_0
    local a = _17_[1]
    local _19_ = _18_0
    local b = _19_[1]
    local ta = type(a)
    local tb = type(b)
    if ((ta == tb) and ((ta == "string") or (ta == "number"))) then
      return (a < b)
    else
      local dta = type_order[ta]
      local dtb = type_order[tb]
      if (dta and dtb) then
        return (dta < dtb)
      elseif dta then
        return true
      elseif dtb then
        return false
      else
        return (ta < tb)
      end
    end
  end
  local function max_index_gap(kv)
    local gap = 0
    if (0 < length_2a(kv)) then
      local i = 0
      for _, _22_0 in ipairs(kv) do
        local _23_ = _22_0
        local k = _23_[1]
        if (gap < (k - i)) then
          gap = (k - i)
        end
        i = k
      end
    end
    return gap
  end
  local function fill_gaps(kv)
    local missing_indexes = {}
    local i = 0
    for _, _26_0 in ipairs(kv) do
      local _27_ = _26_0
      local j = _27_[1]
      i = (i + 1)
      while (i < j) do
        table.insert(missing_indexes, i)
        i = (i + 1)
      end
    end
    for _, k in ipairs(missing_indexes) do
      table.insert(kv, k, {k})
    end
    return nil
  end
  local function table_kv_pairs(t, options)
    local assoc_3f = false
    local kv = {}
    local insert = table.insert
    for k, v in pairs(t) do
      if ((type(k) ~= "number") or (k < 1)) then
        assoc_3f = true
      end
      insert(kv, {k, v})
    end
    table.sort(kv, sort_keys)
    if not assoc_3f then
      if (options["max-sparse-gap"] < max_index_gap(kv)) then
        assoc_3f = true
      else
        fill_gaps(kv)
      end
    end
    if (length_2a(kv) == 0) then
      return kv, "empty"
    else
      local function _31_()
        if assoc_3f then
          return "table"
        else
          return "seq"
        end
      end
      return kv, _31_()
    end
  end
  local function count_table_appearances(t, appearances)
    if (type(t) == "table") then
      if not appearances[t] then
        appearances[t] = 1
        for k, v in pairs(t) do
          count_table_appearances(k, appearances)
          count_table_appearances(v, appearances)
        end
      else
        appearances[t] = ((appearances[t] or 0) + 1)
      end
    end
    return appearances
  end
  local function save_table(t, seen)
    local seen0 = (seen or {len = 0})
    local id = (seen0.len + 1)
    if not seen0[t] then
      seen0[t] = id
      seen0.len = id
    end
    return seen0
  end
  local function detect_cycle(t, seen)
    if ("table" == type(t)) then
      seen[t] = true
      local res = nil
      for k, v in pairs(t) do
        if res then break end
        res = (seen[k] or detect_cycle(k, seen) or seen[v] or detect_cycle(v, seen))
      end
      return res
    end
  end
  local function visible_cycle_3f(t, options)
    return (getopt(options, "detect-cycles?") and detect_cycle(t, {}) and save_table(t, options.seen) and (1 < (options.appearances[t] or 0)))
  end
  local function table_indent(indent, id)
    local opener_length = nil
    if id then
      opener_length = (length_2a(tostring(id)) + 2)
    else
      opener_length = 1
    end
    return (indent + opener_length)
  end
  local pp = nil
  local function concat_table_lines(elements, options, multiline_3f, indent, table_type, prefix, last_comment_3f)
    local indent_str = ("\n" .. string.rep(" ", indent))
    local open = nil
    local function _38_()
      if ("seq" == table_type) then
        return "["
      else
        return "{"
      end
    end
    open = ((prefix or "") .. _38_())
    local close = nil
    if ("seq" == table_type) then
      close = "]"
    else
      close = "}"
    end
    local oneline = (open .. table.concat(elements, " ") .. close)
    if (not getopt(options, "one-line?") and (multiline_3f or (options["line-length"] < (indent + length_2a(oneline))) or last_comment_3f)) then
      local function _40_()
        if last_comment_3f then
          return indent_str
        else
          return ""
        end
      end
      return (open .. table.concat(elements, indent_str) .. _40_() .. close)
    else
      return oneline
    end
  end
  local function utf8_len(x)
    local n = 0
    for _ in string.gmatch(x, "[%z\1-\127\192-\247]") do
      n = (n + 1)
    end
    return n
  end
  local function comment_3f(x)
    if ("table" == type(x)) then
      local fst = x[1]
      return (("string" == type(fst)) and (nil ~= fst:find("^;")))
    else
      return false
    end
  end
  local function pp_associative(t, kv, options, indent)
    local multiline_3f = false
    local id = options.seen[t]
    if (options.depth <= options.level) then
      return "{...}"
    elseif (id and getopt(options, "detect-cycles?")) then
      return ("@" .. id .. "{...}")
    else
      local visible_cycle_3f0 = visible_cycle_3f(t, options)
      local id0 = (visible_cycle_3f0 and options.seen[t])
      local indent0 = table_indent(indent, id0)
      local slength = nil
      if getopt(options, "utf8?") then
        slength = utf8_len
      else
        local function _43_(_241)
          return #_241
        end
        slength = _43_
      end
      local prefix = nil
      if visible_cycle_3f0 then
        prefix = ("@" .. id0)
      else
        prefix = ""
      end
      local items = nil
      do
        local options0 = normalize_opts(options)
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, _46_0 in ipairs(kv) do
          local _47_ = _46_0
          local k = _47_[1]
          local v = _47_[2]
          local val_19_ = nil
          do
            local k0 = pp(k, options0, (indent0 + 1), true)
            local v0 = pp(v, options0, (indent0 + slength(k0) + 1))
            multiline_3f = (multiline_3f or k0:find("\n") or v0:find("\n"))
            val_19_ = (k0 .. " " .. v0)
          end
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        items = tbl_17_
      end
      return concat_table_lines(items, options, multiline_3f, indent0, "table", prefix, false)
    end
  end
  local function pp_sequence(t, kv, options, indent)
    local multiline_3f = false
    local id = options.seen[t]
    if (options.depth <= options.level) then
      return "[...]"
    elseif (id and getopt(options, "detect-cycles?")) then
      return ("@" .. id .. "[...]")
    else
      local visible_cycle_3f0 = visible_cycle_3f(t, options)
      local id0 = (visible_cycle_3f0 and options.seen[t])
      local indent0 = table_indent(indent, id0)
      local prefix = nil
      if visible_cycle_3f0 then
        prefix = ("@" .. id0)
      else
        prefix = ""
      end
      local last_comment_3f = comment_3f(t[#t])
      local items = nil
      do
        local options0 = normalize_opts(options)
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, _51_0 in ipairs(kv) do
          local _52_ = _51_0
          local _0 = _52_[1]
          local v = _52_[2]
          local val_19_ = nil
          do
            local v0 = pp(v, options0, indent0)
            multiline_3f = (multiline_3f or v0:find("\n") or v0:find("^;"))
            val_19_ = v0
          end
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        items = tbl_17_
      end
      return concat_table_lines(items, options, multiline_3f, indent0, "seq", prefix, last_comment_3f)
    end
  end
  local function concat_lines(lines, options, indent, force_multi_line_3f)
    if (length_2a(lines) == 0) then
      if getopt(options, "empty-as-sequence?") then
        return "[]"
      else
        return "{}"
      end
    else
      local oneline = nil
      local _56_
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for _, line in ipairs(lines) do
          local val_19_ = line:gsub("^%s+", "")
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        _56_ = tbl_17_
      end
      oneline = table.concat(_56_, " ")
      if (not getopt(options, "one-line?") and (force_multi_line_3f or oneline:find("\n") or (options["line-length"] < (indent + length_2a(oneline))))) then
        return table.concat(lines, ("\n" .. string.rep(" ", indent)))
      else
        return oneline
      end
    end
  end
  local function pp_metamethod(t, metamethod, options, indent)
    if (options.depth <= options.level) then
      if getopt(options, "empty-as-sequence?") then
        return "[...]"
      else
        return "{...}"
      end
    else
      local _ = nil
      local function _61_(_241)
        return visible_cycle_3f(_241, options)
      end
      options["visible-cycle?"] = _61_
      _ = nil
      local lines, force_multi_line_3f = nil, nil
      do
        local options0 = normalize_opts(options)
        lines, force_multi_line_3f = metamethod(t, pp, options0, indent)
      end
      options["visible-cycle?"] = nil
      local _62_0 = type(lines)
      if (_62_0 == "string") then
        return lines
      elseif (_62_0 == "table") then
        return concat_lines(lines, options, indent, force_multi_line_3f)
      else
        local _0 = _62_0
        return error("__fennelview metamethod must return a table of lines")
      end
    end
  end
  local function pp_table(x, options, indent)
    options.level = (options.level + 1)
    local x0 = nil
    do
      local _65_0 = nil
      if getopt(options, "metamethod?") then
        local _66_0 = x
        if (nil ~= _66_0) then
          local _67_0 = getmetatable(_66_0)
          if (nil ~= _67_0) then
            _65_0 = _67_0.__fennelview
          else
            _65_0 = _67_0
          end
        else
          _65_0 = _66_0
        end
      else
      _65_0 = nil
      end
      if (nil ~= _65_0) then
        local metamethod = _65_0
        x0 = pp_metamethod(x, metamethod, options, indent)
      else
        local _ = _65_0
        local _71_0, _72_0 = table_kv_pairs(x, options)
        if (true and (_72_0 == "empty")) then
          local _0 = _71_0
          if getopt(options, "empty-as-sequence?") then
            x0 = "[]"
          else
            x0 = "{}"
          end
        elseif ((nil ~= _71_0) and (_72_0 == "table")) then
          local kv = _71_0
          x0 = pp_associative(x, kv, options, indent)
        elseif ((nil ~= _71_0) and (_72_0 == "seq")) then
          local kv = _71_0
          x0 = pp_sequence(x, kv, options, indent)
        else
        x0 = nil
        end
      end
    end
    options.level = (options.level - 1)
    return x0
  end
  local function exponential_notation(n, fallback)
    local s = nil
    for i = 0, 308 do
      if s then break end
      local s0 = string.format(("%." .. i .. "e"), n)
      if (n == tonumber(s0)) then
        local exp = s0:match("e%+?(%d+)$")
        if (exp and (14 < tonumber(exp))) then
          s = s0
        else
          s = fallback
        end
      else
      s = nil
      end
    end
    return s
  end
  local inf_str = tostring((1 / 0))
  local neg_inf_str = tostring((-1 / 0))
  local function number__3estring(n, options)
    local val = nil
    if (n ~= n) then
      if (45 == string.byte(tostring(n))) then
        val = (options["negative-nan"] or "-.nan")
      else
        val = (options.nan or ".nan")
      end
    elseif (math.floor(n) == n) then
      local s1 = string.format("%.f", n)
      if (s1 == inf_str) then
        val = (options.infinity or ".inf")
      elseif (s1 == neg_inf_str) then
        val = (options["negative-infinity"] or "-.inf")
      elseif (s1 == tostring(n)) then
        val = s1
      else
        val = (exponential_notation(n, s1) or s1)
      end
    else
      val = tostring(n)
    end
    local _81_0 = string.gsub(val, ",", ".")
    return _81_0
  end
  local function colon_string_3f(s)
    return s:find("^[-%w?^_!$%&*+./|<=>]+$")
  end
  local utf8_inits = {{["max-byte"] = 127, ["max-code"] = 127, ["min-byte"] = 0, ["min-code"] = 0, len = 1}, {["max-byte"] = 223, ["max-code"] = 2047, ["min-byte"] = 192, ["min-code"] = 128, len = 2}, {["max-byte"] = 239, ["max-code"] = 65535, ["min-byte"] = 224, ["min-code"] = 2048, len = 3}, {["max-byte"] = 247, ["max-code"] = 1114111, ["min-byte"] = 240, ["min-code"] = 65536, len = 4}}
  local function default_byte_escape(byte, _options)
    return ("\\%03d"):format(byte)
  end
  local function utf8_escape(str, options)
    local function validate_utf8(str0, index)
      local inits = utf8_inits
      local byte = string.byte(str0, index)
      local init = nil
      do
        local ret = nil
        for _, init0 in ipairs(inits) do
          if ret then break end
          ret = (byte and (function(_82_,_83_,_84_) return (_82_ <= _83_) and (_83_ <= _84_) end)(init0["min-byte"],byte,init0["max-byte"]) and init0)
        end
        init = ret
      end
      local code = nil
      local function _85_()
        local code0 = nil
        if init then
          code0 = (byte - init["min-byte"])
        else
          code0 = nil
        end
        for i = (index + 1), (index + init.len + -1) do
          local byte0 = string.byte(str0, i)
          code0 = (byte0 and code0 and ((128 <= byte0) and (byte0 <= 191)) and ((code0 * 64) + (byte0 - 128)))
        end
        return code0
      end
      code = (init and _85_())
      if (code and (function(_87_,_88_,_89_) return (_87_ <= _88_) and (_88_ <= _89_) end)(init["min-code"],code,init["max-code"]) and not ((55296 <= code) and (code <= 57343))) then
        return init.len
      end
    end
    local index = 1
    local output = {}
    local byte_escape = (getopt(options, "byte-escape") or default_byte_escape)
    while (index <= #str) do
      local nexti = (string.find(str, "[\128-\255]", index) or (#str + 1))
      local len = validate_utf8(str, nexti)
      table.insert(output, string.sub(str, index, (nexti + (len or 0) + -1)))
      if (not len and (nexti <= #str)) then
        table.insert(output, byte_escape(str:byte(nexti), options))
      end
      if len then
        index = (nexti + len)
      else
        index = (nexti + 1)
      end
    end
    return table.concat(output)
  end
  local function pp_string(str, options, indent)
    local len = length_2a(str)
    local esc_newline_3f = ((len < 2) or (getopt(options, "escape-newlines?") and (len < (options["line-length"] - indent))))
    local byte_escape = (getopt(options, "byte-escape") or default_byte_escape)
    local escs = nil
    local _93_
    if esc_newline_3f then
      _93_ = "\\n"
    else
      _93_ = "\n"
    end
    local function _95_(_241, _242)
      return byte_escape(_242:byte(), options)
    end
    escs = setmetatable({["\""] = "\\\"", ["\11"] = "\\v", ["\12"] = "\\f", ["\13"] = "\\r", ["\7"] = "\\a", ["\8"] = "\\b", ["\9"] = "\\t", ["\\"] = "\\\\", ["\n"] = _93_}, {__index = _95_})
    local str0 = ("\"" .. str:gsub("[%c\\\"]", escs) .. "\"")
    if getopt(options, "utf8?") then
      return utf8_escape(str0, options)
    else
      return str0
    end
  end
  local function make_options(t, options)
    local defaults = nil
    do
      local tbl_14_ = {}
      for k, v in pairs(default_opts) do
        local k_15_, v_16_ = k, v
        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
          tbl_14_[k_15_] = v_16_
        end
      end
      defaults = tbl_14_
    end
    local overrides = {appearances = count_table_appearances(t, {}), level = 0, seen = {len = 0}}
    for k, v in pairs((options or {})) do
      defaults[k] = v
    end
    for k, v in pairs(overrides) do
      defaults[k] = v
    end
    return defaults
  end
  local function _98_(x, options, indent, colon_3f)
    local indent0 = (indent or 0)
    local options0 = (options or make_options(x))
    local x0 = nil
    if options0.preprocess then
      x0 = options0.preprocess(x, options0)
    else
      x0 = x
    end
    local tv = type(x0)
    local function _101_()
      local _100_0 = getmetatable(x0)
      if ((_G.type(_100_0) == "table") and true) then
        local __fennelview = _100_0.__fennelview
        return __fennelview
      end
    end
    if ((tv == "table") or ((tv == "userdata") and _101_())) then
      return pp_table(x0, options0, indent0)
    elseif (tv == "number") then
      return number__3estring(x0, options0)
    else
      local function _103_()
        if (colon_3f ~= nil) then
          return colon_3f
        elseif ("function" == type(options0["prefer-colon?"])) then
          return options0["prefer-colon?"](x0)
        else
          return getopt(options0, "prefer-colon?")
        end
      end
      if ((tv == "string") and colon_string_3f(x0) and _103_()) then
        return (":" .. x0)
      elseif (tv == "string") then
        return pp_string(x0, options0, indent0)
      elseif ((tv == "boolean") or (tv == "nil")) then
        return tostring(x0)
      else
        return ("#<" .. tostring(x0) .. ">")
      end
    end
  end
  pp = _98_
  local function _view(x, _3foptions)
    return pp(x, make_options(x, _3foptions), 0)
  end
  return _view
end
package.preload["fennel.utils"] = package.preload["fennel.utils"] or function(...)
  local view = require("fennel.view")
  local version = "1.5.1"
  local function luajit_vm_3f()
    return ((nil ~= _G.jit) and (type(_G.jit) == "table") and (nil ~= _G.jit.on) and (nil ~= _G.jit.off) and (type(_G.jit.version_num) == "number"))
  end
  local function luajit_vm_version()
    local jit_os = nil
    if (_G.jit.os == "OSX") then
      jit_os = "macOS"
    else
      jit_os = _G.jit.os
    end
    return (_G.jit.version .. " " .. jit_os .. "/" .. _G.jit.arch)
  end
  local function fengari_vm_3f()
    return ((nil ~= _G.fengari) and (type(_G.fengari) == "table") and (nil ~= _G.fengari.VERSION) and (type(_G.fengari.VERSION_NUM) == "number"))
  end
  local function fengari_vm_version()
    return (_G.fengari.RELEASE .. " (" .. _VERSION .. ")")
  end
  local function lua_vm_version()
    if luajit_vm_3f() then
      return luajit_vm_version()
    elseif fengari_vm_3f() then
      return fengari_vm_version()
    else
      return ("PUC " .. _VERSION)
    end
  end
  local function runtime_version(_3fas_table)
    if _3fas_table then
      return {fennel = version, lua = lua_vm_version()}
    else
      return ("Fennel " .. version .. " on " .. lua_vm_version())
    end
  end
  local len = nil
  do
    local _108_0, _109_0 = pcall(require, "utf8")
    if ((_108_0 == true) and (nil ~= _109_0)) then
      local utf8 = _109_0
      len = utf8.len
    else
      local _ = _108_0
      len = string.len
    end
  end
  local kv_order = {boolean = 2, number = 1, string = 3, table = 4}
  local function kv_compare(a, b)
    local _111_0, _112_0 = type(a), type(b)
    if (((_111_0 == "number") and (_112_0 == "number")) or ((_111_0 == "string") and (_112_0 == "string"))) then
      return (a < b)
    else
      local function _113_()
        local a_t = _111_0
        local b_t = _112_0
        return (a_t ~= b_t)
      end
      if (((nil ~= _111_0) and (nil ~= _112_0)) and _113_()) then
        local a_t = _111_0
        local b_t = _112_0
        return ((kv_order[a_t] or 5) < (kv_order[b_t] or 5))
      else
        local _ = _111_0
        return (tostring(a) < tostring(b))
      end
    end
  end
  local function add_stable_keys(succ, prev_key, src, _3fpred)
    local first = prev_key
    local last = nil
    do
      local prev = prev_key
      for _, k in ipairs(src) do
        if ((prev == k) or (succ[k] ~= nil) or (_3fpred and not _3fpred(k))) then
          prev = prev
        else
          if (first == nil) then
            first = k
            prev = k
          elseif (prev ~= nil) then
            succ[prev] = k
            prev = k
          else
            prev = k
          end
        end
      end
      last = prev
    end
    return succ, last, first
  end
  local function stablepairs(t)
    local mt_keys = nil
    do
      local _117_0 = getmetatable(t)
      if (nil ~= _117_0) then
        _117_0 = _117_0.keys
      end
      mt_keys = _117_0
    end
    local succ, prev, first_mt = nil, nil, nil
    local function _119_(_241)
      return t[_241]
    end
    succ, prev, first_mt = add_stable_keys({}, nil, (mt_keys or {}), _119_)
    local pairs_keys = nil
    do
      local _120_0 = nil
      do
        local tbl_17_ = {}
        local i_18_ = #tbl_17_
        for k in pairs(t) do
          local val_19_ = k
          if (nil ~= val_19_) then
            i_18_ = (i_18_ + 1)
            tbl_17_[i_18_] = val_19_
          end
        end
        _120_0 = tbl_17_
      end
      table.sort(_120_0, kv_compare)
      pairs_keys = _120_0
    end
    local succ0, _, first_after_mt = add_stable_keys(succ, prev, pairs_keys)
    local first = nil
    if (first_mt == nil) then
      first = first_after_mt
    else
      first = first_mt
    end
    local function stablenext(tbl, key)
      local _123_0 = nil
      if (key == nil) then
        _123_0 = first
      else
        _123_0 = succ0[key]
      end
      if (nil ~= _123_0) then
        local next_key = _123_0
        local _125_0 = tbl[next_key]
        if (_125_0 ~= nil) then
          return next_key, _125_0
        else
          return _125_0
        end
      end
    end
    return stablenext, t, nil
  end
  local function get_in(tbl, path)
    if (nil ~= path[1]) then
      local t = tbl
      for _, k in ipairs(path) do
        if (nil == t) then break end
        if (type(t) == "table") then
          t = t[k]
        else
        t = nil
        end
      end
      return t
    end
  end
  local function copy(_3ffrom, _3fto)
    local tbl_14_ = (_3fto or {})
    for k, v in pairs((_3ffrom or {})) do
      local k_15_, v_16_ = k, v
      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
        tbl_14_[k_15_] = v_16_
      end
    end
    return tbl_14_
  end
  local function member_3f(x, tbl, _3fn)
    local _131_0 = tbl[(_3fn or 1)]
    if (_131_0 == x) then
      return true
    elseif (_131_0 == nil) then
      return nil
    else
      local _ = _131_0
      return member_3f(x, tbl, ((_3fn or 1) + 1))
    end
  end
  local function maxn(tbl)
    local max = 0
    for k in pairs(tbl) do
      if ("number" == type(k)) then
        max = math.max(max, k)
      else
        max = max
      end
    end
    return max
  end
  local function every_3f(t, predicate)
    local result = true
    for _, item in ipairs(t) do
      if not result then break end
      result = predicate(item)
    end
    return result
  end
  local function allpairs(tbl)
    assert((type(tbl) == "table"), "allpairs expects a table")
    local t = tbl
    local seen = {}
    local function allpairs_next(_, state)
      local next_state, value = next(t, state)
      if seen[next_state] then
        return allpairs_next(nil, next_state)
      elseif next_state then
        seen[next_state] = true
        return next_state, value
      else
        local _134_0 = getmetatable(t)
        if ((_G.type(_134_0) == "table") and true) then
          local __index = _134_0.__index
          if ("table" == type(__index)) then
            t = __index
            return allpairs_next(t)
          end
        end
      end
    end
    return allpairs_next
  end
  local function deref(self)
    return self[1]
  end
  local function list__3estring(self, _3fview, _3foptions, _3findent)
    local viewed = nil
    do
      local tbl_17_ = {}
      local i_18_ = #tbl_17_
      for i = 1, maxn(self) do
        local val_19_ = nil
        if _3fview then
          val_19_ = _3fview(self[i], _3foptions, _3findent)
        else
          val_19_ = view(self[i])
        end
        if (nil ~= val_19_) then
          i_18_ = (i_18_ + 1)
          tbl_17_[i_18_] = val_19_
        end
      end
      viewed = tbl_17_
    end
    return ("(" .. table.concat(viewed, " ") .. ")")
  end
  local function comment_view(c)
    return c, true
  end
  local function sym_3d(a, b)
    return ((deref(a) == deref(b)) and (getmetatable(a) == getmetatable(b)))
  end
  local function sym_3c(a, b)
    return (a[1] < tostring(b))
  end
  local symbol_mt = {"SYMBOL", __eq = sym_3d, __fennelview = deref, __lt = sym_3c, __tostring = deref}
  local expr_mt = nil
  local function _140_(x)
    return tostring(deref(x))
  end
  expr_mt = {"EXPR", __tostring = _140_}
  local list_mt = {"LIST", __fennelview = list__3estring, __tostring = list__3estring}
  local comment_mt = {"COMMENT", __eq = sym_3d, __fennelview = comment_view, __lt = sym_3c, __tostring = deref}
  local sequence_marker = {"SEQUENCE"}
  local varg_mt = {"VARARG", __fennelview = deref, __tostring = deref}
  local getenv = nil
  local function _141_()
    return nil
  end
  getenv = ((os and os.getenv) or _141_)
  local function debug_on_3f(flag)
    local level = (getenv("FENNEL_DEBUG") or "")
    return ((level == "all") or level:find(flag))
  end
  local function list(...)
    return setmetatable({...}, list_mt)
  end
  local function sym(str, _3fsource)
    local _142_
    do
      local tbl_14_ = {str}
      for k, v in pairs((_3fsource or {})) do
        local k_15_, v_16_ = nil, nil
        if (type(k) == "string") then
          k_15_, v_16_ = k, v
        else
        k_15_, v_16_ = nil
        end
        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
          tbl_14_[k_15_] = v_16_
        end
      end
      _142_ = tbl_14_
    end
    return setmetatable(_142_, symbol_mt)
  end
  local function sequence(...)
    local function _145_(seq, view0, inspector, indent)
      local opts = nil
      do
        inspector["empty-as-sequence?"] = {after = inspector["empty-as-sequence?"], once = true}
        inspector["metamethod?"] = {after = inspector["metamethod?"], once = false}
        opts = inspector
      end
      return view0(seq, opts, indent)
    end
    return setmetatable({...}, {__fennelview = _145_, sequence = sequence_marker})
  end
  local function expr(strcode, etype)
    return setmetatable({strcode, type = etype}, expr_mt)
  end
  local function comment_2a(contents, _3fsource)
    local _146_ = (_3fsource or {})
    local filename = _146_["filename"]
    local line = _146_["line"]
    return setmetatable({contents, filename = filename, line = line}, comment_mt)
  end
  local function varg(_3fsource)
    local _147_
    do
      local tbl_14_ = {"..."}
      for k, v in pairs((_3fsource or {})) do
        local k_15_, v_16_ = nil, nil
        if (type(k) == "string") then
          k_15_, v_16_ = k, v
        else
        k_15_, v_16_ = nil
        end
        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
          tbl_14_[k_15_] = v_16_
        end
      end
      _147_ = tbl_14_
    end
    return setmetatable(_147_, varg_mt)
  end
  local function expr_3f(x)
    return ((type(x) == "table") and (getmetatable(x) == expr_mt) and x)
  end
  local function varg_3f(x)
    return ((type(x) == "table") and (getmetatable(x) == varg_mt) and x)
  end
  local function list_3f(x)
    return ((type(x) == "table") and (getmetatable(x) == list_mt) and x)
  end
  local function sym_3f(x, _3fname)
    return ((type(x) == "table") and (getmetatable(x) == symbol_mt) and ((nil == _3fname) or (x[1] == _3fname)) and x)
  end
  local function sequence_3f(x)
    local mt = ((type(x) == "table") and getmetatable(x))
    return (mt and (mt.sequence == sequence_marker) and x)
  end
  local function comment_3f(x)
    return ((type(x) == "table") and (getmetatable(x) == comment_mt) and x)
  end
  local function table_3f(x)
    return ((type(x) == "table") and not varg_3f(x) and (getmetatable(x) ~= list_mt) and (getmetatable(x) ~= symbol_mt) and not comment_3f(x) and x)
  end
  local function kv_table_3f(t)
    if table_3f(t) then
      local nxt, t0, k = pairs(t)
      local len0 = #t0
      local next_state = nil
      if (0 == len0) then
        next_state = k
      else
        next_state = len0
      end
      return ((nil ~= nxt(t0, next_state)) and t0)
    end
  end
  local function string_3f(x)
    if (type(x) == "string") then
      return x
    else
      return false
    end
  end
  local function multi_sym_3f(str)
    if sym_3f(str) then
      return multi_sym_3f(tostring(str))
    elseif (type(str) ~= "string") then
      return false
    else
      local function _153_()
        local parts = {}
        for part in str:gmatch("[^%.%:]+[%.%:]?") do
          local last_char = part:sub(-1)
          if (last_char == ":") then
            parts["multi-sym-method-call"] = true
          end
          if ((last_char == ":") or (last_char == ".")) then
            parts[(#parts + 1)] = part:sub(1, -2)
          else
            parts[(#parts + 1)] = part
          end
        end
        return (next(parts) and parts)
      end
      return ((str:match("%.") or str:match(":")) and not str:match("%.%.") and (str:byte() ~= string.byte(".")) and (str:byte() ~= string.byte(":")) and (str:byte(-1) ~= string.byte(".")) and (str:byte(-1) ~= string.byte(":")) and _153_())
    end
  end
  local function call_of_3f(ast, callee)
    return (list_3f(ast) and sym_3f(ast[1], callee))
  end
  local function quoted_3f(symbol)
    return symbol.quoted
  end
  local function idempotent_expr_3f(x)
    local t = type(x)
    return ((t == "string") or (t == "number") or (t == "boolean") or (sym_3f(x) and not multi_sym_3f(x)))
  end
  local function walk_tree(root, f, _3fcustom_iterator)
    local function walk(iterfn, parent, idx, node)
      if (f(idx, node, parent) and not sym_3f(node)) then
        for k, v in iterfn(node) do
          walk(iterfn, node, k, v)
        end
        return nil
      end
    end
    walk((_3fcustom_iterator or pairs), nil, nil, root)
    return root
  end
  local root = nil
  local function _158_()
  end
  root = {chunk = nil, options = nil, reset = _158_, scope = nil}
  root["set-reset"] = function(_159_0)
    local _160_ = _159_0
    local chunk = _160_["chunk"]
    local options = _160_["options"]
    local reset = _160_["reset"]
    local scope = _160_["scope"]
    root.reset = function()
      root.chunk, root.scope, root.options, root.reset = chunk, scope, options, reset
      return nil
    end
    return root.reset
  end
  local lua_keywords = {["and"] = true, ["break"] = true, ["do"] = true, ["else"] = true, ["elseif"] = true, ["end"] = true, ["false"] = true, ["for"] = true, ["function"] = true, ["goto"] = true, ["if"] = true, ["in"] = true, ["local"] = true, ["nil"] = true, ["not"] = true, ["or"] = true, ["repeat"] = true, ["return"] = true, ["then"] = true, ["true"] = true, ["until"] = true, ["while"] = true}
  local function lua_keyword_3f(str)
    local function _162_()
      local _161_0 = root.options
      if (nil ~= _161_0) then
        _161_0 = _161_0.keywords
      end
      if (nil ~= _161_0) then
        _161_0 = _161_0[str]
      end
      return _161_0
    end
    return (lua_keywords[str] or _162_())
  end
  local function valid_lua_identifier_3f(str)
    return (str:match("^[%a_][%w_]*$") and not lua_keyword_3f(str))
  end
  local propagated_options = {"allowedGlobals", "indent", "correlate", "useMetadata", "env", "compiler-env", "compilerEnv"}
  local function propagate_options(options, subopts)
    local tbl_14_ = subopts
    for _, name in ipairs(propagated_options) do
      local k_15_, v_16_ = name, options[name]
      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then
        tbl_14_[k_15_] = v_16_
      end
    end
    return tbl_14_
  end
  local function ast_source(ast)
    if (table_3f(ast) or sequence_3f(ast)) then
      return (getmetatable(ast) or {})
    elseif ("table" == type(ast)) then
      return ast
    else
      return {}
    end
  end
  local function warn(msg, _3fast, _3ffilename, _3fline)
    local _167_0 = nil
    do
      local _168_0 = root.options
      if (nil ~= _168_0) then
        _168_0 = _168_0.warn
      end
      _167_0 = _168_0
    end
    if (nil ~= _167_0) then
      local opt_warn = _167_0
      return opt_warn(msg, _3fast, _3ffilename, _3fline)
    else
      local _ = _167_0
      if (_G.io and _G.io.stderr) then
        local loc = nil
        do
          local _170_0 = ast_source(_3fast)
          if ((_G.type(_170_0) == "table") and (nil ~= _170_0.filename) and (nil ~= _170_0.line)) then
            local filename = _170_0.filename
            local line = _170_0.line
            loc = (filename .. ":" .. line .. ": ")
          else
            local _0 = _170_0
            if (_3ffilename and _3fline) then
              loc = (_3ffilename .. ":" .. _3fline .. ": ")
            else
              loc = ""
            end
          end
        end
        return (_G.io.stderr):write(("--WARNING: %s%s\n"):format(loc, msg))
      end
    end
  end
  local warned = {}
  local function check_plugin_version(_175_0)
    local _176_ = _175_0
    local plugin = _176_
    local name = _176_["name"]
    local versions = _176_["versions"]
    if (not member_3f(version:gsub("-dev", ""), (versions or {})) and not (string_3f(versions) and version:find(versions)) and not warned[plugin]) then
      warned[plugin] = true
      return warn(string.format("plugin %s does not support Fennel version %s", (name or "unknown"), version))
    end
  end
  local function hook_opts(event, _3foptions, ...)
    local plugins = nil
    local function _179_(...)
      local _178_0 = _3foptions
      if (nil ~= _178_0) then
        _178_0 = _178_0.plugins
      end
      return _178_0
    end
    local function _182_(...)
      local _181_0 = root.options
      if (nil ~= _181_0) then
        _181_0 = _181_0.plugins
      end
      return _181_0
    end
    plugins = (_179_(...) or _182_(...))
    if plugins then
      local result = nil
      for _, plugin in ipairs(plugins) do
        if (nil ~= result) then break end
        check_plugin_version(plugin)
        local _184_0 = plugin[event]
        if (nil ~= _184_0) then
          local f = _184_0
          result = f(...)
        else
        result = nil
        end
      end
      return result
    end
  end
  local function hook(event, ...)
    return hook_opts(event, root.options, ...)
  end
  return {["ast-source"] = ast_source, ["call-of?"] = call_of_3f, ["comment?"] = comment_3f, ["debug-on?"] = debug_on_3f, ["every?"] = every_3f, ["expr?"] = expr_3f, ["fennel-module"] = nil, ["get-in"] = get_in, ["hook-opts"] = hook_opts, ["idempotent-expr?"] = idempotent_expr_3f, ["kv-table?"] = kv_table_3f, ["list?"] = list_3f, ["lua-keyword?"] = lua_keyword_3f, ["macro-path"] = table.concat({"./?.fnl", "./?/init-macros.fnl", "./?/init.fnl", getenv("FENNEL_MACRO_PATH")}, ";"), ["member?"] = member_3f, ["multi-sym?"] = multi_sym_3f, ["propagate-options"] = propagate_options, ["quoted?"] = quoted_3f, ["runtime-version"] = runtime_version, ["sequence?"] = sequence_3f, ["string?"] = string_3f, ["sym?"] = sym_3f, ["table?"] = table_3f, ["valid-lua-identifier?"] = valid_lua_identifier_3f, ["varg?"] = varg_3f, ["walk-tree"] = walk_tree, allpairs = allpairs, comment = comment_2a, copy = copy, expr = expr, hook = hook, len = len, list = list, maxn = maxn, path = table.concat({"./?.fnl", "./?/init.fnl", getenv("FENNEL_PATH")}, ";"), root = root, sequence = sequence, stablepairs = stablepairs, sym = sym, varg = varg, version = version, warn = warn}
end
utils = require("fennel.utils")
local parser = require("fennel.parser")
local compiler = require("fennel.compiler")
local specials = require("fennel.specials")
local repl = require("fennel.repl")
local view = require("fennel.view")
local function eval_env(env, opts)
  if (env == "_COMPILER") then
    local env0 = specials["make-compiler-env"](nil, compiler.scopes.compiler, {}, opts)
    if (opts.allowedGlobals == nil) then
      opts.allowedGlobals = specials["current-global-names"](env0)
    end
    return specials["wrap-env"](env0)
  else
    return (env and specials["wrap-env"](env))
  end
end
local function eval_opts(options, str)
  local opts = utils.copy(options)
  if (opts.allowedGlobals == nil) then
    opts.allowedGlobals = specials["current-global-names"](opts.env)
  end
  if (not opts.filename and not opts.source) then
    opts.source = str
  end
  if (opts.env == "_COMPILER") then
    opts.scope = compiler["make-scope"](compiler.scopes.compiler)
  end
  return opts
end
local function eval(str, _3foptions, ...)
  local opts = eval_opts(_3foptions, str)
  local env = eval_env(opts.env, opts)
  local lua_source = compiler["compile-string"](str, opts)
  local loader = nil
  local function _841_(...)
    if opts.filename then
      return ("@" .. opts.filename)
    else
      return str
    end
  end
  loader = specials["load-code"](lua_source, env, _841_(...))
  opts.filename = nil
  return loader(...)
end
local function dofile_2a(filename, _3foptions, ...)
  local opts = utils.copy(_3foptions)
  local f = assert(io.open(filename, "rb"))
  local source = assert(f:read("*all"), ("Could not read " .. filename))
  f:close()
  opts.filename = filename
  return eval(source, opts, ...)
end
local function syntax()
  local body_3f = {"when", "with-open", "collect", "icollect", "fcollect", "lambda", "\206\187", "macro", "match", "match-try", "case", "case-try", "accumulate", "faccumulate", "doto"}
  local binding_3f = {"collect", "icollect", "fcollect", "each", "for", "let", "with-open", "accumulate", "faccumulate"}
  local define_3f = {"fn", "lambda", "\206\187", "var", "local", "macro", "macros", "global"}
  local deprecated = {"~=", "#", "global", "require-macros", "pick-args"}
  local out = {}
  for k, v in pairs(compiler.scopes.global.specials) do
    local metadata = (compiler.metadata[v] or {})
    out[k] = {["binding-form?"] = utils["member?"](k, binding_3f), ["body-form?"] = metadata["fnl/body-form?"], ["define?"] = utils["member?"](k, define_3f), ["deprecated?"] = utils["member?"](k, deprecated), ["special?"] = true}
  end
  for k in pairs(compiler.scopes.global.macros) do
    out[k] = {["binding-form?"] = utils["member?"](k, binding_3f), ["body-form?"] = utils["member?"](k, body_3f), ["define?"] = utils["member?"](k, define_3f), ["macro?"] = true}
  end
  for k, v in pairs(_G) do
    local _842_0 = type(v)
    if (_842_0 == "function") then
      out[k] = {["function?"] = true, ["global?"] = true}
    elseif (_842_0 == "table") then
      if not k:find("^_") then
        for k2, v2 in pairs(v) do
          if ("function" == type(v2)) then
            out[(k .. "." .. k2)] = {["function?"] = true, ["global?"] = true}
          end
        end
        out[k] = {["global?"] = true}
      end
    end
  end
  return out
end
local mod = {["ast-source"] = utils["ast-source"], ["comment?"] = utils["comment?"], ["compile-stream"] = compiler["compile-stream"], ["compile-string"] = compiler["compile-string"], ["list?"] = utils["list?"], ["load-code"] = specials["load-code"], ["macro-loaded"] = specials["macro-loaded"], ["macro-path"] = utils["macro-path"], ["macro-searchers"] = specials["macro-searchers"], ["make-searcher"] = specials["make-searcher"], ["multi-sym?"] = utils["multi-sym?"], ["runtime-version"] = utils["runtime-version"], ["search-module"] = specials["search-module"], ["sequence?"] = utils["sequence?"], ["string-stream"] = parser["string-stream"], ["sym-char?"] = parser["sym-char?"], ["sym?"] = utils["sym?"], ["table?"] = utils["table?"], ["varg?"] = utils["varg?"], comment = utils.comment, compile = compiler.compile, compile1 = compiler.compile1, compileStream = compiler["compile-stream"], compileString = compiler["compile-string"], doc = specials.doc, dofile = dofile_2a, eval = eval, gensym = compiler.gensym, getinfo = compiler.getinfo, granulate = parser.granulate, list = utils.list, loadCode = specials["load-code"], macroLoaded = specials["macro-loaded"], macroPath = utils["macro-path"], macroSearchers = specials["macro-searchers"], makeSearcher = specials["make-searcher"], make_searcher = specials["make-searcher"], mangle = compiler["global-mangling"], metadata = compiler.metadata, parser = parser.parser, path = utils.path, repl = repl, runtimeVersion = utils["runtime-version"], scope = compiler["make-scope"], searchModule = specials["search-module"], searcher = specials["make-searcher"](), sequence = utils.sequence, stringStream = parser["string-stream"], sym = utils.sym, syntax = syntax, traceback = compiler.traceback, unmangle = compiler["global-unmangling"], varg = utils.varg, version = utils.version, view = view}
mod.install = function(_3fopts)
  table.insert((package.searchers or package.loaders), specials["make-searcher"](_3fopts))
  return mod
end
utils["fennel-module"] = mod
do
  local module_name = "fennel.macros"
  local _ = nil
  local function _846_()
    return mod
  end
  package.preload[module_name] = _846_
  _ = nil
  local env = nil
  do
    local _847_0 = specials["make-compiler-env"](nil, compiler.scopes.compiler, {})
    _847_0["utils"] = utils
    _847_0["fennel"] = mod
    _847_0["get-function-metadata"] = specials["get-function-metadata"]
    env = _847_0
  end
  local built_ins = eval([===[;; fennel-ls: macro-file
  
  ;; These macros are awkward because their definition cannot rely on the any
  ;; built-in macros, only special forms. (no when, no icollect, etc)
  
  (fn copy [t]
    (let [out []]
      (each [_ v (ipairs t)] (table.insert out v))
      (setmetatable out (getmetatable t))))
  
  (fn ->* [val ...]
    "Thread-first macro.
  Take the first value and splice it into the second form as its first argument.
  The value of the second form is spliced into the first arg of the third, etc."
    (var x val)
    (each [_ e (ipairs [...])]
      (let [elt (if (list? e) (copy e) (list e))]
        (table.insert elt 2 x)
        (set x elt)))
    x)
  
  (fn ->>* [val ...]
    "Thread-last macro.
  Same as ->, except splices the value into the last position of each form
  rather than the first."
    (var x val)
    (each [_ e (ipairs [...])]
      (let [elt (if (list? e) (copy e) (list e))]
        (table.insert elt x)
        (set x elt)))
    x)
  
  (fn -?>* [val ?e ...]
    "Nil-safe thread-first macro.
  Same as -> except will short-circuit with nil when it encounters a nil value."
    (if (= nil ?e)
        val
        (not (utils.idempotent-expr? val))
        ;; try again, but with an eval-safe val
        `(let [tmp# ,val]
          (-?> tmp# ,?e ,...))
        (let [call (if (list? ?e) (copy ?e) (list ?e))]
          (table.insert call 2 val)
          `(if (not= nil ,val)
               ,(-?>* call ...)))))
  
  (fn -?>>* [val ?e ...]
    "Nil-safe thread-last macro.
  Same as ->> except will short-circuit with nil when it encounters a nil value."
    (if (= nil ?e)
        val
        (not (utils.idempotent-expr? val))
        ;; try again, but with an eval-safe val
        `(let [tmp# ,val]
          (-?>> tmp# ,?e ,...))
        (let [call (if (list? ?e) (copy ?e) (list ?e))]
          (table.insert call val)
          `(if (not= ,val nil)
               ,(-?>>* call ...)))))
  
  (fn ?dot [tbl ...]
    "Nil-safe table look up.
  Same as . (dot), except will short-circuit with nil when it encounters
  a nil value in any of subsequent keys."
    (let [head (gensym :t)
          lookups `(do
                     (var ,head ,tbl)
                     ,head)]
      (each [i k (ipairs [...])]
        ;; Kinda gnarly to reassign in place like this, but it emits the best lua.
        ;; With this impl, it emits a flat, concise, and readable set of ifs
        (table.insert lookups (+ i 2)
                      `(if (not= nil ,head) (set ,head (. ,head ,k)))))
      lookups))
  
  (fn doto* [val ...]
    "Evaluate val and splice it into the first argument of subsequent forms."
    (assert (not= val nil) "missing subject")
    (if (not (utils.idempotent-expr? val))
      `(let [tmp# ,val]
         (doto tmp# ,...))
      (let [form `(do)]
        (each [_ elt (ipairs [...])]
          (let [elt (if (list? elt) (copy elt) (list elt))]
            (table.insert elt 2 val)
            (table.insert form elt)))
        (table.insert form val)
        form)))
  
  (fn when* [condition body1 ...]
    "Evaluate body for side-effects only when condition is truthy."
    (assert body1 "expected body")
    `(if ,condition
         (do
           ,body1
           ,...)))
  
  (fn with-open* [closable-bindings ...]
    "Like `let`, but invokes (v:close) on each binding after evaluating the body.
  The body is evaluated inside `xpcall` so that bound values will be closed upon
  encountering an error before propagating it."
    (let [bodyfn `(fn []
                    ,...)
          closer `(fn close-handlers# [ok# ...]
                    (if ok# ... (error ... 0)))
          traceback `(. (or (. package.loaded ,(fennel-module-name)) _G.debug {})
                        :traceback)]
      (for [i 1 (length closable-bindings) 2]
        (assert (sym? (. closable-bindings i))
                "with-open only allows symbols in bindings")
        (table.insert closer 4 `(: ,(. closable-bindings i) :close)))
      `(let ,closable-bindings
         ,closer
         (close-handlers# (_G.xpcall ,bodyfn ,traceback)))))
  
  (fn extract-into [iter-tbl]
    (var (into iter-out found?) (values [] (copy iter-tbl)))
    (for [i (length iter-tbl) 2 -1]
      (let [item (. iter-tbl i)]
        (if (or (sym? item "&into") (= :into item))
            (do
              (assert (not found?) "expected only one &into clause")
              (set found? true)
              (set into (. iter-tbl (+ i 1)))
              (table.remove iter-out i)
              (table.remove iter-out i)))))
    (assert (or (not found?) (sym? into) (table? into) (list? into))
            "expected table, function call, or symbol in &into clause")
    (values into iter-out found?))
  
  (fn collect* [iter-tbl key-expr value-expr ...]
    "Return a table made by running an iterator and evaluating an expression that
  returns key-value pairs to be inserted sequentially into the table.  This can
  be thought of as a table comprehension. The body should provide two expressions
  (used as key and value) or nil, which causes it to be omitted.
  
  For example,
    (collect [k v (pairs {:apple \"red\" :orange \"orange\"})]
      (values v k))
  returns
    {:red \"apple\" :orange \"orange\"}
  
  Supports an &into clause after the iterator to put results in an existing table.
  Supports early termination with an &until clause."
    (assert (and (sequence? iter-tbl) (<= 2 (length iter-tbl)))
            "expected iterator binding table")
    (assert (not= nil key-expr) "expected key and value expression")
    (assert (= nil ...)
            "expected 1 or 2 body expressions; wrap multiple expressions with do")
    (assert (or value-expr (list? key-expr)) "need key and value")
    (let [kv-expr (if (= nil value-expr) key-expr `(values ,key-expr ,value-expr))
          (into iter) (extract-into iter-tbl)]
      `(let [tbl# ,into]
         (each ,iter
           (let [(k# v#) ,kv-expr]
             (if (and (not= k# nil) (not= v# nil))
               (tset tbl# k# v#))))
         tbl#)))
  
  (fn seq-collect [how iter-tbl value-expr ...]
    "Common part between icollect and fcollect for producing sequential tables.
  
  Iteration code only differs in using the for or each keyword, the rest
  of the generated code is identical."
    (assert (not= nil value-expr) "expected table value expression")
    (assert (= nil ...)
            "expected exactly one body expression. Wrap multiple expressions in do")
    (let [(into iter has-into?) (extract-into iter-tbl)]
      (if has-into?
          `(let [tbl# ,into]
             (,how ,iter (let [val# ,value-expr]
                           (table.insert tbl# val#)))
             tbl#)
          ;; believe it or not, using a var here has a pretty good performance
          ;; boost: https://p.hagelb.org/icollect-performance.html
          ;; but it doesn't always work with &into clauses, so skip if that's used
          `(let [tbl# []]
             (var i# 0)
             (,how ,iter
                   (let [val# ,value-expr]
                     (when (not= nil val#)
                       (set i# (+ i# 1))
                       (tset tbl# i# val#))))
             tbl#))))
  
  (fn icollect* [iter-tbl value-expr ...]
    "Return a sequential table made by running an iterator and evaluating an
  expression that returns values to be inserted sequentially into the table.
  This can be thought of as a table comprehension. If the body evaluates to nil
  that element is omitted.
  
  For example,
    (icollect [_ v (ipairs [1 2 3 4 5])]
      (when (not= v 3)
        (* v v)))
  returns
    [1 4 16 25]
  
  Supports an &into clause after the iterator to put results in an existing table.
  Supports early termination with an &until clause."
    (assert (and (sequence? iter-tbl) (<= 2 (length iter-tbl)))
            "expected iterator binding table")
    (seq-collect 'each iter-tbl value-expr ...))
  
  (fn fcollect* [iter-tbl value-expr ...]
    "Return a sequential table made by advancing a range as specified by
  for, and evaluating an expression that returns values to be inserted
  sequentially into the table.  This can be thought of as a range
  comprehension. If the body evaluates to nil that element is omitted.
  
  For example,
    (fcollect [i 1 10 2]
      (when (not= i 3)
        (* i i)))
  returns
    [1 25 49 81]
  
  Supports an &into clause after the range to put results in an existing table.
  Supports early termination with an &until clause."
    (assert (and (sequence? iter-tbl) (< 2 (length iter-tbl)))
            "expected range binding table")
    (seq-collect 'for iter-tbl value-expr ...))
  
  (fn accumulate-impl [for? iter-tbl body ...]
    (assert (and (sequence? iter-tbl) (<= 4 (length iter-tbl)))
            "expected initial value and iterator binding table")
    (assert (not= nil body) "expected body expression")
    (assert (= nil ...)
            "expected exactly one body expression. Wrap multiple expressions with do")
    (let [[accum-var accum-init] iter-tbl
          iter (sym (if for? "for" "each"))] ; accumulate or faccumulate?
      `(do
         (var ,accum-var ,accum-init)
         (,iter ,[(unpack iter-tbl 3)]
                (set ,accum-var ,body))
         ,(if (list? accum-var)
            (list (sym :values) (unpack accum-var))
            accum-var))))
  
  (fn accumulate* [iter-tbl body ...]
    "Accumulation macro.
  
  It takes a binding table and an expression as its arguments.  In the binding
  table, the first form starts out bound to the second value, which is an initial
  accumulator. The rest are an iterator binding table in the format `each` takes.
  
  It runs through the iterator in each step of which the given expression is
  evaluated, and the accumulator is set to the value of the expression. It
  eventually returns the final value of the accumulator.
  
  For example,
    (accumulate [total 0
                 _ n (pairs {:apple 2 :orange 3})]
      (+ total n))
  returns 5"
    (accumulate-impl false iter-tbl body ...))
  
  (fn faccumulate* [iter-tbl body ...]
    "Identical to accumulate, but after the accumulator the binding table is the
  same as `for` instead of `each`. Like collect to fcollect, will iterate over a
  numerical range like `for` rather than an iterator."
    (accumulate-impl true iter-tbl body ...))
  
  (fn partial* [f ...]
    "Return a function with all arguments partially applied to f."
    (assert f "expected a function to partially apply")
    (let [bindings []
          args []]
      (each [_ arg (ipairs [...])]
        (if (utils.idempotent-expr? arg)
          (table.insert args arg)
          (let [name (gensym)]
            (table.insert bindings name)
            (table.insert bindings arg)
            (table.insert args name))))
      (let [body (list f (unpack args))]
        (table.insert body _VARARG)
        ;; only use the extra let if we need double-eval protection
        (if (= nil (. bindings 1))
            `(fn [,_VARARG] ,body)
            `(let ,bindings
               (fn [,_VARARG] ,body))))))
  
  (fn pick-args* [n f]
    "Create a function of arity n that applies its arguments to f. Deprecated."
    (if (and _G.io _G.io.stderr)
        (_G.io.stderr:write
         "-- WARNING: pick-args is deprecated and will be removed in the future.\n"))
    (let [bindings []]
      (for [i 1 n] (tset bindings i (gensym)))
      `(fn ,bindings (,f ,(unpack bindings)))))
  
  (fn lambda* [...]
    "Function literal with nil-checked arguments.
  Like `fn`, but will throw an exception if a declared argument is passed in as
  nil, unless that argument's name begins with a question mark."
    (let [args [...]
          args-len (length args)
          has-internal-name? (sym? (. args 1))
          arglist (if has-internal-name? (. args 2) (. args 1))
          metadata-position (if has-internal-name? 3 2)
          (_ check-position) (get-function-metadata [:lambda ...] arglist
                                                    metadata-position)
          empty-body? (< args-len check-position)]
      (fn check! [a]
        (if (table? a)
            (each [_ a (pairs a)] (check! a))
            (let [as (tostring a)]
              (and (not (as:find "^?")) (not= as "&") (not (as:find "^_"))
                   (not= as "...") (not= as "&as")))
            (table.insert args check-position
                          `(_G.assert (not= nil ,a)
                                      ,(: "Missing argument %s on %s:%s" :format
                                          (tostring a)
                                          (or a.filename :unknown)
                                          (or a.line "?"))))))
  
      (assert (= :table (type arglist)) "expected arg list")
      (each [_ a (ipairs arglist)] (check! a))
      (if empty-body? (table.insert args (sym :nil)))
      `(fn ,(unpack args))))
  
  (fn macro* [name ...]
    "Define a single macro."
    (assert (sym? name) "expected symbol for macro name")
    (local args [...])
    `(macros {,(tostring name) (fn ,(unpack args))}))
  
  (fn macrodebug* [form return?]
    "Print the resulting form after performing macroexpansion.
  With a second argument, returns expanded form as a string instead of printing."
    (let [handle (if return? `do `print)]
      ;; TODO: Provide a helpful compiler error in the unlikely edge case of an
      ;; infinite AST instead of the current "silently expand until max depth"
      `(,handle ,(view (macroexpand form _SCOPE) {:detect-cycles? false}))))
  
  (fn import-macros* [binding1 module-name1 ...]
    "Bind a table of macros from each macro module according to a binding form.
  Each binding form can be either a symbol or a k/v destructuring table.
  Example:
    (import-macros mymacros                 :my-macros    ; bind to symbol
                   {:macro1 alias : macro2} :proj.macros) ; import by name"
    (assert (and binding1 module-name1 (= 0 (% (select "#" ...) 2)))
            "expected even number of binding/modulename pairs")
    (for [i 1 (select "#" binding1 module-name1 ...) 2]
      ;; delegate the actual loading of the macros to the require-macros
      ;; special which already knows how to set up the compiler env and stuff.
      ;; this is weird because require-macros is deprecated but it works.
      (let [(binding modname) (select i binding1 module-name1 ...)
            scope (get-scope)
            ;; if the module-name is an expression (and not just a string) we
            ;; patch our expression to have the correct source filename so
            ;; require-macros can pass it down when resolving the module-name.
            expr `(import-macros ,modname)
            filename (if (list? modname) (. modname 1 :filename) :unknown)
            _ (tset expr :filename filename)
            macros* (_SPECIALS.require-macros expr scope {} binding)]
        (if (sym? binding)
            ;; bind whole table of macros to table bound to symbol
            (tset scope.macros (. binding 1) macros*)
            ;; 1-level table destructuring for importing individual macros
            (table? binding)
            (each [macro-name [import-key] (pairs binding)]
              (assert (= :function (type (. macros* macro-name)))
                      (.. "macro " macro-name " not found in module "
                          (tostring modname)))
              (tset scope.macros import-key (. macros* macro-name))))))
    nil)
  
  (fn assert-repl* [condition ...]
    "Enter into a debug REPL  and print the message when condition is false/nil.
  Works as a drop-in replacement for Lua's `assert`.
  REPL `,return` command returns values to assert in place to continue execution."
    {:fnl/arglist [condition ?message ...]}
    (fn add-locals [{: symmeta : parent} locals]
      (each [name (pairs symmeta)]
        (tset locals name (sym name)))
      (if parent (add-locals parent locals) locals))
    `(let [unpack# (or table.unpack _G.unpack)
           pack# (or table.pack #(doto [$...] (tset :n (select :# $...))))
           ;; need to pack/unpack input args to account for (assert (foo)),
           ;; because assert returns *all* arguments upon success
           vals# (pack# ,condition ,...)
           condition# (. vals# 1)
           message# (or (. vals# 2) "assertion failed, entering repl.")]
       (if (not condition#)
           (let [opts# {:assert-repl? true}
                 fennel# (require ,(fennel-module-name))
                 locals# ,(add-locals (get-scope) [])]
             (set opts#.message (fennel#.traceback message#))
             (set opts#.env (collect [k# v# (pairs _G) &into locals#]
                              (if (= nil (. locals# k#)) (values k# v#))))
             (_G.assert (fennel#.repl opts#)))
           (values (unpack# vals# 1 vals#.n)))))
  
  {:-> ->*
   :->> ->>*
   :-?> -?>*
   :-?>> -?>>*
   :?. ?dot
   :doto doto*
   :when when*
   :with-open with-open*
   :collect collect*
   :icollect icollect*
   :fcollect fcollect*
   :accumulate accumulate*
   :faccumulate faccumulate*
   :partial partial*
   :lambda lambda*
   :λ lambda*
   :pick-args pick-args*
   :macro macro*
   :macrodebug macrodebug*
   :import-macros import-macros*
   :assert-repl assert-repl*}
  ]===], {env = env, filename = "src/fennel/macros.fnl", moduleName = module_name, scope = compiler.scopes.compiler, useMetadata = true})
  local _0 = nil
  for k, v in pairs(built_ins) do
    compiler.scopes.global.macros[k] = v
  end
  _0 = nil
  local match_macros = eval([===[;; fennel-ls: macro-file
  
  ;;; Pattern matching
  ;; This is separated out so we can use the "core" macros during the
  ;; implementation of pattern matching.
  
  (fn copy [t] (collect [k v (pairs t)] k v))
  
  (fn double-eval-safe? [x type]
    (or (= :number type) (= :string type) (= :boolean type)
        (and (sym? x) (not (multi-sym? x)))))
  
  (fn with [opts k]
    (doto (copy opts) (tset k true)))
  
  (fn without [opts k]
    (doto (copy opts) (tset k nil)))
  
  (fn case-values [vals pattern unifications case-pattern opts]
    (let [condition `(and)
          bindings []]
      (each [i pat (ipairs pattern)]
        (let [(subcondition subbindings) (case-pattern [(. vals i)] pat
                                                        unifications (without opts :multival?))]
          (table.insert condition subcondition)
          (icollect [_ b (ipairs subbindings) &into bindings] b)))
      (values condition bindings)))
  
  (fn case-table [val pattern unifications case-pattern opts ?top]
    (let [condition (if (= :table ?top) `(and) `(and (= (_G.type ,val) :table)))
          bindings []]
      (each [k pat (pairs pattern)]
        (if (sym? pat :&)
            (let [rest-pat (. pattern (+ k 1))
                  rest-val `(select ,k ((or table.unpack _G.unpack) ,val))
                  subcondition (case-table `(pick-values 1 ,rest-val)
                                            rest-pat unifications case-pattern
                                            (without opts :multival?))]
              (if (not (sym? rest-pat))
                  (table.insert condition subcondition))
              (assert (= nil (. pattern (+ k 2)))
                      "expected & rest argument before last parameter")
              (table.insert bindings rest-pat)
              (table.insert bindings [rest-val]))
            (sym? k :&as)
            (do
              (table.insert bindings pat)
              (table.insert bindings val))
            (and (= :number (type k)) (sym? pat :&as))
            (do
              (assert (= nil (. pattern (+ k 2)))
                      "expected &as argument before last parameter")
              (table.insert bindings (. pattern (+ k 1)))
              (table.insert bindings val))
            ;; don't process the pattern right after &/&as; already got it
            (or (not= :number (type k)) (and (not (sym? (. pattern (- k 1)) :&as))
                                             (not (sym? (. pattern (- k 1)) :&))))
            (let [subval `(. ,val ,k)
                  (subcondition subbindings) (case-pattern [subval] pat
                                                            unifications
                                                            (without opts :multival?))]
              (table.insert condition subcondition)
              (icollect [_ b (ipairs subbindings) &into bindings] b))))
      (values condition bindings)))
  
  (fn case-guard [vals condition guards unifications case-pattern opts]
    (if (. guards 1)
      (let [(pcondition bindings) (case-pattern vals condition unifications opts)
            condition `(and ,(unpack guards))]
         (values `(and ,pcondition
                       (let ,bindings
                         ,condition)) bindings))
      (case-pattern vals condition unifications opts)))
  
  (fn symbols-in-pattern [pattern]
    "gives the set of symbols inside a pattern"
    (if (list? pattern)
        (if (or (sym? (. pattern 1) :where)
                (sym? (. pattern 1) :=))
            (symbols-in-pattern (. pattern 2))
            (sym? (. pattern 2) :?)
            (symbols-in-pattern (. pattern 1))
            (let [result {}]
              (each [_ child-pattern (ipairs pattern)]
                (collect [name symbol (pairs (symbols-in-pattern child-pattern)) &into result]
                  name symbol))
              result))
        (sym? pattern)
        (if (and (not (sym? pattern :or))
                 (not (sym? pattern :nil)))
            {(tostring pattern) pattern}
            {})
        (= (type pattern) :table)
        (let [result {}]
          (each [key-pattern value-pattern (pairs pattern)]
            (collect [name symbol (pairs (symbols-in-pattern key-pattern)) &into result]
              name symbol)
            (collect [name symbol (pairs (symbols-in-pattern value-pattern)) &into result]
              name symbol))
          result)
        {}))
  
  (fn symbols-in-every-pattern [pattern-list infer-unification?]
    "gives a list of symbols that are present in every pattern in the list"
    (let [?symbols (accumulate [?symbols nil
                                _ pattern (ipairs pattern-list)]
                     (let [in-pattern (symbols-in-pattern pattern)]
                       (if ?symbols
                         (do
                           (each [name (pairs ?symbols)]
                             (when (not (. in-pattern name))
                               (tset ?symbols name nil)))
                           ?symbols)
                         in-pattern)))]
      (icollect [_ symbol (pairs (or ?symbols {}))]
        (if (not (and infer-unification?
                      (in-scope? symbol)))
          symbol))))
  
  (fn case-or [vals pattern guards unifications case-pattern opts]
    (let [pattern [(unpack pattern 2)]
          bindings (symbols-in-every-pattern pattern opts.infer-unification?)]
      (if (= nil (. bindings 1))
          ;; no bindings special case generates simple code
          (let [condition (icollect [_ subpattern (ipairs pattern) &into `(or)]
                            (case-pattern vals subpattern unifications opts))]
            (values (if (. guards 1)
                        `(and ,condition ,(unpack guards))
                        condition)
                    []))
        ;; case with bindings is handled specially, and returns three values instead of two
        (let [matched? (gensym :matched?)
              bindings-mangled (icollect [_ binding (ipairs bindings)]
                                 (gensym (tostring binding)))
              pre-bindings `(if)]
          (each [_ subpattern (ipairs pattern)]
            (let [(subcondition subbindings) (case-guard vals subpattern guards {} case-pattern opts)]
              (table.insert pre-bindings subcondition)
              (table.insert pre-bindings `(let ,subbindings
                                            (values true ,(unpack bindings))))))
          (values matched?
                  [`(,(unpack bindings)) `(values ,(unpack bindings-mangled))]
                  [`(,matched? ,(unpack bindings-mangled)) pre-bindings])))))
  
  (fn case-pattern [vals pattern unifications opts ?top]
    "Take the AST of values and a single pattern and returns a condition
  to determine if it matches as well as a list of bindings to
  introduce for the duration of the body if it does match."
  
    ;; This function returns the following values (multival):
    ;; a "condition", which is an expression that determines whether the
    ;;   pattern should match,
    ;; a "bindings", which bind all of the symbols used in a pattern
    ;; an optional "pre-bindings", which is a list of bindings that happen
    ;;   before the condition and bindings are evaluated. These should only
    ;;   come from a (case-or). In this case there should be no recursion:
    ;;   the call stack should be case-condition > case-pattern > case-or
    ;;
    ;; Here are the expected flags in the opts table:
    ;;   :infer-unification? boolean - if the pattern should guess when to unify  (ie, match -> true, case -> false)
    ;;   :multival? boolean - if the pattern can contain multivals  (in order to disallow patterns like [(1 2)])
    ;;   :in-where? boolean - if the pattern is surrounded by (where)  (where opts into more pattern features)
    ;;   :legacy-guard-allowed? boolean - if the pattern should allow `(a ? b) patterns
  
    ;; we have to assume we're matching against multiple values here until we
    ;; know we're either in a multi-valued clause (in which case we know the #
    ;; of vals) or we're not, in which case we only care about the first one.
    (let [[val] vals]
      (if (and (sym? pattern)
               (or (sym? pattern :nil)
                   (and opts.infer-unification?
                        (in-scope? pattern)
                        (not (sym? pattern :_)))
                   (and opts.infer-unification?
                        (multi-sym? pattern)
                        (in-scope? (. (multi-sym? pattern) 1)))))
          (values `(= ,val ,pattern) [])
          ;; unify a local we've seen already
          (and (sym? pattern) (. unifications (tostring pattern)))
          (values `(= ,(. unifications (tostring pattern)) ,val) [])
          ;; bind a fresh local
          (sym? pattern)
          (let [wildcard? (: (tostring pattern) :find "^_")]
            (if (not wildcard?) (tset unifications (tostring pattern) val))
            (values (if (or wildcard? (string.find (tostring pattern) "^?")) true
                        `(not= ,(sym :nil) ,val)) [pattern val]))
          ;; opt-in unify with (=)
          (and (list? pattern)
               (sym? (. pattern 1) :=)
               (sym? (. pattern 2)))
          (let [bind (. pattern 2)]
            (assert-compile (= 2 (length pattern)) "(=) should take only one argument" pattern)
            (assert-compile (not opts.infer-unification?) "(=) cannot be used inside of match" pattern)
            (assert-compile opts.in-where? "(=) must be used in (where) patterns" pattern)
            (assert-compile (and (sym? bind) (not (sym? bind :nil)) "= has to bind to a symbol" bind))
            (values `(= ,val ,bind) []))
          ;; where-or clause
          (and (list? pattern) (sym? (. pattern 1) :where) (list? (. pattern 2)) (sym? (. pattern 2 1) :or))
          (do
            (assert-compile ?top "can't nest (where) pattern" pattern)
            (case-or vals (. pattern 2) [(unpack pattern 3)] unifications case-pattern (with opts :in-where?)))
          ;; where clause
          (and (list? pattern) (sym? (. pattern 1) :where))
          (do
            (assert-compile ?top "can't nest (where) pattern" pattern)
            (case-guard vals (. pattern 2) [(unpack pattern 3)] unifications case-pattern (with opts :in-where?)))
          ;; or clause (not allowed on its own)
          (and (list? pattern) (sym? (. pattern 1) :or))
          (do
            (assert-compile ?top "can't nest (or) pattern" pattern)
            ;; This assertion can be removed to make patterns more permissive
            (assert-compile false "(or) must be used in (where) patterns" pattern)
            (case-or vals pattern [] unifications case-pattern opts))
          ;; guard clause
          (and (list? pattern) (sym? (. pattern 2) :?))
          (do
            (assert-compile opts.legacy-guard-allowed? "legacy guard clause not supported in case" pattern)
            (case-guard vals (. pattern 1) [(unpack pattern 3)] unifications case-pattern opts))
          ;; multi-valued patterns (represented as lists)
          (list? pattern)
          (do
            (assert-compile opts.multival? "can't nest multi-value destructuring" pattern)
            (case-values vals pattern unifications case-pattern opts))
          ;; table patterns
          (= (type pattern) :table)
          (case-table val pattern unifications case-pattern opts ?top)
          ;; literal value
          (values `(= ,val ,pattern) []))))
  
  (fn add-pre-bindings [out pre-bindings]
    "Decide when to switch from the current `if` AST to a new one"
    (if pre-bindings
        ;; `out` no longer needs to grow.
        ;; Instead, a new tail `if` AST is introduced, which is where the rest of
        ;; the clauses will get appended. This way, all future clauses have the
        ;; pre-bindings in scope.
        (let [tail `(if)]
          (table.insert out true)
          (table.insert out `(let ,pre-bindings ,tail))
          tail)
        ;; otherwise, keep growing the current `if` AST.
        out))
  
  (fn case-condition [vals clauses match? top-table?]
    "Construct the actual `if` AST for the given match values and clauses."
    ;; root is the original `if` AST.
    ;; out is the `if` AST that is currently being grown.
    (let [root `(if)]
      (faccumulate [out root
                    i 1 (length clauses) 2]
        (let [pattern (. clauses i)
              body (. clauses (+ i 1))
              (condition bindings pre-bindings) (case-pattern vals pattern {}
                                                              {:multival? true
                                                               :infer-unification? match?
                                                               :legacy-guard-allowed? match?}
                                                              (if top-table? :table true))
              out (add-pre-bindings out pre-bindings)]
          ;; grow the `if` AST by one extra condition
          (table.insert out condition)
          (table.insert out `(let ,bindings ,body))
          out))
      root))
  
  (fn count-case-multival [pattern]
    "Identify the amount of multival values that a pattern requires."
    (if (and (list? pattern) (sym? (. pattern 2) :?))
        (count-case-multival (. pattern 1))
        (and (list? pattern) (sym? (. pattern 1) :where))
        (count-case-multival (. pattern 2))
        (and (list? pattern) (sym? (. pattern 1) :or))
        (accumulate [longest 0
                     _ child-pattern (ipairs pattern)]
          (math.max longest (count-case-multival child-pattern)))
        (list? pattern)
        (length pattern)
        1))
  
  (fn case-count-syms [clauses]
    "Find the length of the largest multi-valued clause"
    (let [patterns (fcollect [i 1 (length clauses) 2]
                     (. clauses i))]
      (accumulate [longest 0
                   _ pattern (ipairs patterns)]
        (math.max longest (count-case-multival pattern)))))
  
  (fn maybe-optimize-table [val clauses]
    (if (faccumulate [all (sequence? val) i 1 (length clauses) 2 &until (not all)]
          (and (sequence? (. clauses i))
               (accumulate [all2 (next (. clauses i))
                            _ d (ipairs (. clauses i)) &until (not all2)]
                 (and all2 (or (not (sym? d)) (not (: (tostring d) :find "^&")))))))
        (values `(values ,(unpack val))
                (fcollect [i 1 (length clauses)]
                  (if (= 1 (% i 2))
                      (list (unpack (. clauses i)))
                      (. clauses i))))
        (values val clauses)))
  
  (fn case-impl [match? init-val ...]
    "The shared implementation of case and match."
    (assert (not= init-val nil) "missing subject")
    (assert (= 0 (math.fmod (select :# ...) 2))
            "expected even number of pattern/body pairs")
    (assert (not= 0 (select :# ...))
            "expected at least one pattern/body pair")
    (let [(val clauses) (maybe-optimize-table init-val [...])
          vals-count (case-count-syms clauses)
          skips-multiple-eval-protection? (and (= vals-count 1) (double-eval-safe? val))]
      (if skips-multiple-eval-protection?
        (case-condition (list val) clauses match? (table? init-val))
        ;; protect against multiple evaluation of the value, bind against as
        ;; many values as we ever match against in the clauses.
        (let [vals (fcollect [_ 1 vals-count &into (list)] (gensym))]
          (list `let [vals val] (case-condition vals clauses match? (table? init-val)))))))
  
  (fn case* [val ...]
    "Perform pattern matching on val. See reference for details.
  
  Syntax:
  
  (case data-expression
    pattern body
    (where pattern guards*) body
    (where (or pattern patterns*) guards*) body)"
    (case-impl false val ...))
  
  (fn match* [val ...]
    "Perform pattern matching on val, automatically unifying on variables in
  local scope. See reference for details.
  
  Syntax:
  
  (match data-expression
    pattern body
    (where pattern guards*) body
    (where (or pattern patterns*) guards*) body)"
    (case-impl true val ...))
  
  (fn case-try-step [how expr else pattern body ...]
    (if (= nil pattern body)
        expr
        ;; unlike regular match, we can't know how many values the value
        ;; might evaluate to, so we have to capture them all in ... via IIFE
        ;; to avoid double-evaluation.
        `((fn [...]
            (,how ...
              ,pattern ,(case-try-step how body else ...)
              ,(unpack else)))
          ,expr)))
  
  (fn case-try-impl [how expr pattern body ...]
    (let [clauses [pattern body ...]
          last (. clauses (length clauses))
          catch (if (sym? (and (= :table (type last)) (. last 1)) :catch)
                   (let [[_ & e] (table.remove clauses)] e) ; remove `catch sym
                   [`_# `...])]
      (assert (= 0 (math.fmod (length clauses) 2))
              "expected every pattern to have a body")
      (assert (= 0 (math.fmod (length catch) 2))
              "expected every catch pattern to have a body")
      (case-try-step how expr catch (unpack clauses))))
  
  (fn case-try* [expr pattern body ...]
    "Perform chained pattern matching for a sequence of steps which might fail.
  
  The values from the initial expression are matched against the first pattern.
  If they match, the first body is evaluated and its values are matched against
  the second pattern, etc.
  
  If there is a (catch pat1 body1 pat2 body2 ...) form at the end, any mismatch
  from the steps will be tried against these patterns in sequence as a fallback
  just like a normal match. If there is no catch, the mismatched values will be
  returned as the value of the entire expression."
    (case-try-impl `case expr pattern body ...))
  
  (fn match-try* [expr pattern body ...]
    "Perform chained pattern matching for a sequence of steps which might fail.
  
  The values from the initial expression are matched against the first pattern.
  If they match, the first body is evaluated and its values are matched against
  the second pattern, etc.
  
  If there is a (catch pat1 body1 pat2 body2 ...) form at the end, any mismatch
  from the steps will be tried against these patterns in sequence as a fallback
  just like a normal match. If there is no catch, the mismatched values will be
  returned as the value of the entire expression."
    (case-try-impl `match expr pattern body ...))
  
  {:case case*
   :case-try case-try*
   :match match*
   :match-try match-try*}
  ]===], {allowedGlobals = false, env = env, filename = "src/fennel/match.fnl", moduleName = module_name, scope = compiler.scopes.compiler, useMetadata = true})
  for k, v in pairs(match_macros) do
    compiler.scopes.global.macros[k] = v
  end
  package.preload[module_name] = nil
end
return mod end websocket_stdio_lib = require("lib.websocket-stdio-lib")


 local make_static_response = websocket_stdio_lib["make-static-response"]

 local builtin = {}





 local function _75_(opts)
 return {["/"] = make_static_response(lustache:render(builtin.echo.files.index, opts), 200)} end builtin["echo"] = {name = "echo", description = "Echo any message sent to the browser.", files = {index = "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Echo Server</title>\n  </head>\n  <body>\n    <h1>Echo Server</h1>\n    <p>All commands sent via websocket to this page will be echoed.</p>\n    <div id=\"demo\"></div>\n    <script>\n      // Websocket Stuff\n      // Create WebSocket connection.\n      const socket = new WebSocket(\"ws://{{host}}:{{port}}/ws\");\n\n      // Connection opened\n      socket.addEventListener(\"open\", (event) => {\n          socket.send(\"Hello Server!\\n\");\n      });\n      \n      // Listen for messages\n      socket.addEventListener(\"message\", (event) => {\n          socket.send(event.data + \"\\n\");\n          console.log(\"Message from server \", event.data);\n      });\n\n      // File Watching Stuff\n      // Event stream to watch for file changes\n      function _getFile (file){\n          var xhttp = new XMLHttpRequest();\n          xhttp.onreadystatechange = function() {\n              if (this.readyState == 4 && this.status == 200) {\n                  document.getElementById(\"demo\").innerHTML = xhttp.responseText;\n              }\n          };\n          xhttp.open(\"GET\", file, true);\n          xhttp.send();\n      }\n      \n      const events = new EventSource(\"/file-change-events\");\n      // Respond to any events recieved by setting div \"demo\"\n      // innerHTML to the text value of the file that changed.\n      events.onmessage = function (e) {\n          console.log(e);\n          socket.send(e.data + \"\\n\");\n          if (e.data.substring(0,1) != \"#\"){\n              _getFile(e.data);\n          }\n      }     \n    </script>\n  </body>\n</html>\n"}, path = _75_}












 local function _76_(opts)
 return {["/"] = make_static_response(builtin.fengari.files.index, 200), ["/fennel.lua"] = make_static_response(builtin.fengari.files.fennel, 200, "text/lua"), ["/repl.lua"] = make_static_response(fennel["compile-string"](lustache:render(builtin.fengari.files.repl, opts)), 200, "text/lua"), ["/fengari-web.js"] = make_static_response(builtin.fengari.files.fengari, 200, "application/javascript")} end builtin["fengari"] = {name = "fengari", description = "Evaluate messages from stdin in a browser based fengari repl.", files = {index = "<html>\r\n  <head>\r\n    <title>Fengari Web REPL Example</title>\r\n    <script src=\"/fengari-web.js\"> </script>\r\n    <script src=\"/repl.lua\" type=\"application/lua\" async></script>\r\n  </head>\r\n  <body>\r\n    <h1>Fengari Web REPL Example</h1>\r\n    <p>All commands sent via websocket to this page are evaluated in fengari and returned.</p>\r\n  </body>\r\n</html>\r\n", fennel = "-- SPDX-License-Identifier: MIT\n-- SPDX-FileCopyrightText: Calvin Rose and contributors\npackage.preload[\"fennel.repl\"] = package.preload[\"fennel.repl\"] or function(...)\n  local utils = require(\"fennel.utils\")\n  local parser = require(\"fennel.parser\")\n  local compiler = require(\"fennel.compiler\")\n  local specials = require(\"fennel.specials\")\n  local view = require(\"fennel.view\")\n  local depth = 0\n  local function prompt_for(top_3f)\n    if top_3f then\n      return (string.rep(\">\", (depth + 1)) .. \" \")\n    else\n      return (string.rep(\".\", (depth + 1)) .. \" \")\n    end\n  end\n  local function default_read_chunk(parser_state)\n    io.write(prompt_for((0 == parser_state[\"stack-size\"])))\n    io.flush()\n    local input = io.read()\n    return (input and (input .. \"\\n\"))\n  end\n  local function default_on_values(xs)\n    io.write(table.concat(xs, \"\\9\"))\n    return io.write(\"\\n\")\n  end\n  local function default_on_error(errtype, err)\n    local function _675_()\n      local _674_0 = errtype\n      if (_674_0 == \"Runtime\") then\n        return (compiler.traceback(tostring(err), 4) .. \"\\n\")\n      else\n        local _ = _674_0\n        return (\"%s error: %s\\n\"):format(errtype, tostring(err))\n      end\n    end\n    return io.write(_675_())\n  end\n  local function splice_save_locals(env, lua_source, scope)\n    local saves = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for name in pairs(env.___replLocals___) do\n        local val_19_ = (\"local %s = ___replLocals___[%q]\"):format((scope.manglings[name] or name), name)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      saves = tbl_17_\n    end\n    local binds = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for raw, name in pairs(scope.manglings) do\n        local val_19_ = nil\n        if not scope.gensyms[name] then\n          val_19_ = (\"___replLocals___[%q] = %s\"):format(raw, name)\n        else\n        val_19_ = nil\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      binds = tbl_17_\n    end\n    local gap = nil\n    if lua_source:find(\"\\n\") then\n      gap = \"\\n\"\n    else\n      gap = \" \"\n    end\n    local function _681_()\n      if next(saves) then\n        return (table.concat(saves, \" \") .. gap)\n      else\n        return \"\"\n      end\n    end\n    local function _684_()\n      local _682_0, _683_0 = lua_source:match(\"^(.*)[\\n ](return .*)$\")\n      if ((nil ~= _682_0) and (nil ~= _683_0)) then\n        local body = _682_0\n        local _return = _683_0\n        return (body .. gap .. table.concat(binds, \" \") .. gap .. _return)\n      else\n        local _ = _682_0\n        return lua_source\n      end\n    end\n    return (_681_() .. _684_())\n  end\n  local commands = {}\n  local function completer(env, scope, text, _3ffulltext, _from, _to)\n    local max_items = 2000\n    local seen = {}\n    local matches = {}\n    local input_fragment = text:gsub(\".*[%s)(]+\", \"\")\n    local stop_looking_3f = false\n    local function add_partials(input, tbl, prefix)\n      local scope_first_3f = ((tbl == env) or (tbl == env.___replLocals___))\n      local tbl_17_ = matches\n      local i_18_ = #tbl_17_\n      local function _686_()\n        if scope_first_3f then\n          return scope.manglings\n        else\n          return tbl\n        end\n      end\n      for k, is_mangled in utils.allpairs(_686_()) do\n        if (max_items <= #matches) then break end\n        local val_19_ = nil\n        do\n          local lookup_k = nil\n          if scope_first_3f then\n            lookup_k = is_mangled\n          else\n            lookup_k = k\n          end\n          if ((type(k) == \"string\") and (input == k:sub(0, #input)) and not seen[k] and ((\":\" ~= prefix:sub(-1)) or (\"function\" == type(tbl[lookup_k])))) then\n            seen[k] = true\n            val_19_ = (prefix .. k)\n          else\n          val_19_ = nil\n          end\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      return tbl_17_\n    end\n    local function descend(input, tbl, prefix, add_matches, method_3f)\n      local splitter = nil\n      if method_3f then\n        splitter = \"^([^:]+):(.*)\"\n      else\n        splitter = \"^([^.]+)%.(.*)\"\n      end\n      local head, tail = input:match(splitter)\n      local raw_head = (scope.manglings[head] or head)\n      if (type(tbl[raw_head]) == \"table\") then\n        stop_looking_3f = true\n        if method_3f then\n          return add_partials(tail, tbl[raw_head], (prefix .. head .. \":\"))\n        else\n          return add_matches(tail, tbl[raw_head], (prefix .. head))\n        end\n      end\n    end\n    local function add_matches(input, tbl, prefix)\n      local prefix0 = nil\n      if prefix then\n        prefix0 = (prefix .. \".\")\n      else\n        prefix0 = \"\"\n      end\n      if (not input:find(\"%.\") and input:find(\":\")) then\n        return descend(input, tbl, prefix0, add_matches, true)\n      elseif not input:find(\"%.\") then\n        return add_partials(input, tbl, prefix0)\n      else\n        return descend(input, tbl, prefix0, add_matches, false)\n      end\n    end\n    do\n      local _695_0 = tostring((_3ffulltext or text)):match(\"^%s*,([^%s()[%]]*)$\")\n      if (nil ~= _695_0) then\n        local cmd_fragment = _695_0\n        add_partials(cmd_fragment, commands, \",\")\n      else\n        local _ = _695_0\n        for _0, source in ipairs({scope.specials, scope.macros, (env.___replLocals___ or {}), env, env._G}) do\n          if stop_looking_3f then break end\n          add_matches(input_fragment, source)\n        end\n      end\n    end\n    return matches\n  end\n  local function command_3f(input)\n    return input:match(\"^%s*,\")\n  end\n  local function command_docs()\n    local _697_\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for name, f in utils.stablepairs(commands) do\n        local val_19_ = (\"  ,%s - %s\"):format(name, ((compiler.metadata):get(f, \"fnl/docstring\") or \"undocumented\"))\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      _697_ = tbl_17_\n    end\n    return table.concat(_697_, \"\\n\")\n  end\n  commands.help = function(_, _0, on_values)\n    return on_values({(\"Welcome to Fennel.\\nThis is the REPL where you can enter code to be evaluated.\\nYou can also run these repl commands:\\n\\n\" .. command_docs() .. \"\\n  ,return FORM - Evaluate FORM and return its value to the REPL's caller.\\n  ,exit - Leave the repl.\\n\\nUse ,doc something to see descriptions for individual macros and special forms.\\nValues from previous inputs are kept in *1, *2, and *3.\\n\\nFor more information about the language, see https://fennel-lang.org/reference\")})\n  end\n  do end (compiler.metadata):set(commands.help, \"fnl/docstring\", \"Show this message.\")\n  local function reload(module_name, env, on_values, on_error)\n    local _699_0, _700_0 = pcall(specials[\"load-code\"](\"return require(...)\", env), module_name)\n    if ((_699_0 == true) and (nil ~= _700_0)) then\n      local old = _700_0\n      local _ = nil\n      package.loaded[module_name] = nil\n      _ = nil\n      local new = nil\n      do\n        local _701_0, _702_0 = pcall(require, module_name)\n        if ((_701_0 == true) and (nil ~= _702_0)) then\n          local new0 = _702_0\n          new = new0\n        elseif (true and (nil ~= _702_0)) then\n          local _0 = _701_0\n          local msg = _702_0\n          on_error(\"Repl\", msg)\n          new = old\n        else\n        new = nil\n        end\n      end\n      specials[\"macro-loaded\"][module_name] = nil\n      if ((type(old) == \"table\") and (type(new) == \"table\")) then\n        for k, v in pairs(new) do\n          old[k] = v\n        end\n        for k in pairs(old) do\n          if (nil == new[k]) then\n            old[k] = nil\n          end\n        end\n        package.loaded[module_name] = old\n      end\n      return on_values({\"ok\"})\n    elseif ((_699_0 == false) and (nil ~= _700_0)) then\n      local msg = _700_0\n      if msg:match(\"loop or previous error loading module\") then\n        package.loaded[module_name] = nil\n        return reload(module_name, env, on_values, on_error)\n      elseif specials[\"macro-loaded\"][module_name] then\n        specials[\"macro-loaded\"][module_name] = nil\n        return nil\n      else\n        local function _707_()\n          local _706_0 = msg:gsub(\"\\n.*\", \"\")\n          return _706_0\n        end\n        return on_error(\"Runtime\", _707_())\n      end\n    end\n  end\n  local function run_command(read, on_error, f)\n    local _710_0, _711_0, _712_0 = pcall(read)\n    if ((_710_0 == true) and (_711_0 == true) and (nil ~= _712_0)) then\n      local val = _712_0\n      local _713_0, _714_0 = pcall(f, val)\n      if ((_713_0 == false) and (nil ~= _714_0)) then\n        local msg = _714_0\n        return on_error(\"Runtime\", msg)\n      end\n    elseif (_710_0 == false) then\n      return on_error(\"Parse\", \"Couldn't parse input.\")\n    end\n  end\n  commands.reload = function(env, read, on_values, on_error)\n    local function _717_(_241)\n      return reload(tostring(_241), env, on_values, on_error)\n    end\n    return run_command(read, on_error, _717_)\n  end\n  do end (compiler.metadata):set(commands.reload, \"fnl/docstring\", \"Reload the specified module.\")\n  commands.reset = function(env, _, on_values)\n    env.___replLocals___ = {}\n    return on_values({\"ok\"})\n  end\n  do end (compiler.metadata):set(commands.reset, \"fnl/docstring\", \"Erase all repl-local scope.\")\n  commands.complete = function(env, read, on_values, on_error, scope, chars)\n    local function _718_()\n      return on_values(completer(env, scope, table.concat(chars):gsub(\"^%s*,complete%s+\", \"\"):sub(1, -2)))\n    end\n    return run_command(read, on_error, _718_)\n  end\n  do end (compiler.metadata):set(commands.complete, \"fnl/docstring\", \"Print all possible completions for a given input symbol.\")\n  local function apropos_2a(pattern, tbl, prefix, seen, names)\n    for name, subtbl in pairs(tbl) do\n      if ((\"string\" == type(name)) and (package ~= subtbl)) then\n        local _719_0 = type(subtbl)\n        if (_719_0 == \"function\") then\n          if ((prefix .. name)):match(pattern) then\n            table.insert(names, (prefix .. name))\n          end\n        elseif (_719_0 == \"table\") then\n          if not seen[subtbl] then\n            local _721_\n            do\n              seen[subtbl] = true\n              _721_ = seen\n            end\n            apropos_2a(pattern, subtbl, (prefix .. name:gsub(\"%.\", \"/\") .. \".\"), _721_, names)\n          end\n        end\n      end\n    end\n    return names\n  end\n  local function apropos(pattern)\n    return apropos_2a(pattern:gsub(\"^_G%.\", \"\"), package.loaded, \"\", {}, {})\n  end\n  commands.apropos = function(_env, read, on_values, on_error, _scope)\n    local function _725_(_241)\n      return on_values(apropos(tostring(_241)))\n    end\n    return run_command(read, on_error, _725_)\n  end\n  do end (compiler.metadata):set(commands.apropos, \"fnl/docstring\", \"Print all functions matching a pattern in all loaded modules.\")\n  local function apropos_follow_path(path)\n    local paths = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for p in path:gmatch(\"[^%.]+\") do\n        local val_19_ = p\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      paths = tbl_17_\n    end\n    local tgt = package.loaded\n    for _, path0 in ipairs(paths) do\n      if (nil == tgt) then break end\n      local _728_\n      do\n        local _727_0 = path0:gsub(\"%/\", \".\")\n        _728_ = _727_0\n      end\n      tgt = tgt[_728_]\n    end\n    return tgt\n  end\n  local function apropos_doc(pattern)\n    local tbl_17_ = {}\n    local i_18_ = #tbl_17_\n    for _, path in ipairs(apropos(\".*\")) do\n      local val_19_ = nil\n      do\n        local tgt = apropos_follow_path(path)\n        if (\"function\" == type(tgt)) then\n          local _729_0 = (compiler.metadata):get(tgt, \"fnl/docstring\")\n          if (nil ~= _729_0) then\n            local docstr = _729_0\n            val_19_ = (docstr:match(pattern) and path)\n          else\n          val_19_ = nil\n          end\n        else\n        val_19_ = nil\n        end\n      end\n      if (nil ~= val_19_) then\n        i_18_ = (i_18_ + 1)\n        tbl_17_[i_18_] = val_19_\n      end\n    end\n    return tbl_17_\n  end\n  commands[\"apropos-doc\"] = function(_env, read, on_values, on_error, _scope)\n    local function _733_(_241)\n      return on_values(apropos_doc(tostring(_241)))\n    end\n    return run_command(read, on_error, _733_)\n  end\n  do end (compiler.metadata):set(commands[\"apropos-doc\"], \"fnl/docstring\", \"Print all functions that match the pattern in their docs\")\n  local function apropos_show_docs(on_values, pattern)\n    for _, path in ipairs(apropos(pattern)) do\n      local tgt = apropos_follow_path(path)\n      if ((\"function\" == type(tgt)) and (compiler.metadata):get(tgt, \"fnl/docstring\")) then\n        on_values({specials.doc(tgt, path)})\n        on_values({})\n      end\n    end\n    return nil\n  end\n  commands[\"apropos-show-docs\"] = function(_env, read, on_values, on_error)\n    local function _735_(_241)\n      return apropos_show_docs(on_values, tostring(_241))\n    end\n    return run_command(read, on_error, _735_)\n  end\n  do end (compiler.metadata):set(commands[\"apropos-show-docs\"], \"fnl/docstring\", \"Print all documentations matching a pattern in function name\")\n  local function resolve(identifier, _736_0, scope)\n    local _737_ = _736_0\n    local env = _737_\n    local ___replLocals___ = _737_[\"___replLocals___\"]\n    local e = nil\n    local function _738_(_241, _242)\n      return (___replLocals___[scope.unmanglings[_242]] or env[_242])\n    end\n    e = setmetatable({}, {__index = _738_})\n    local function _739_(...)\n      local _740_0, _741_0 = ...\n      if ((_740_0 == true) and (nil ~= _741_0)) then\n        local code = _741_0\n        local function _742_(...)\n          local _743_0, _744_0 = ...\n          if ((_743_0 == true) and (nil ~= _744_0)) then\n            local val = _744_0\n            return val\n          else\n            local _ = _743_0\n            return nil\n          end\n        end\n        return _742_(pcall(specials[\"load-code\"](code, e)))\n      else\n        local _ = _740_0\n        return nil\n      end\n    end\n    return _739_(pcall(compiler[\"compile-string\"], tostring(identifier), {scope = scope}))\n  end\n  commands.find = function(env, read, on_values, on_error, scope)\n    local function _747_(_241)\n      local _748_0 = nil\n      do\n        local _749_0 = utils[\"sym?\"](_241)\n        if (nil ~= _749_0) then\n          local _750_0 = resolve(_749_0, env, scope)\n          if (nil ~= _750_0) then\n            _748_0 = debug.getinfo(_750_0)\n          else\n            _748_0 = _750_0\n          end\n        else\n          _748_0 = _749_0\n        end\n      end\n      if ((_G.type(_748_0) == \"table\") and (nil ~= _748_0.linedefined) and (nil ~= _748_0.short_src) and (nil ~= _748_0.source) and (_748_0.what == \"Lua\")) then\n        local line = _748_0.linedefined\n        local src = _748_0.short_src\n        local source = _748_0.source\n        local fnlsrc = nil\n        do\n          local _753_0 = compiler.sourcemap\n          if (nil ~= _753_0) then\n            _753_0 = _753_0[source]\n          end\n          if (nil ~= _753_0) then\n            _753_0 = _753_0[line]\n          end\n          if (nil ~= _753_0) then\n            _753_0 = _753_0[2]\n          end\n          fnlsrc = _753_0\n        end\n        return on_values({string.format(\"%s:%s\", src, (fnlsrc or line))})\n      elseif (_748_0 == nil) then\n        return on_error(\"Repl\", \"Unknown value\")\n      else\n        local _ = _748_0\n        return on_error(\"Repl\", \"No source info\")\n      end\n    end\n    return run_command(read, on_error, _747_)\n  end\n  do end (compiler.metadata):set(commands.find, \"fnl/docstring\", \"Print the filename and line number for a given function\")\n  commands.doc = function(env, read, on_values, on_error, scope)\n    local function _758_(_241)\n      local name = tostring(_241)\n      local path = (utils[\"multi-sym?\"](name) or {name})\n      local ok_3f, target = nil, nil\n      local function _759_()\n        return (scope.specials[name] or utils[\"get-in\"](scope.macros, path) or resolve(name, env, scope))\n      end\n      ok_3f, target = pcall(_759_)\n      if ok_3f then\n        return on_values({specials.doc(target, name)})\n      else\n        return on_error(\"Repl\", (\"Could not find \" .. name .. \" for docs.\"))\n      end\n    end\n    return run_command(read, on_error, _758_)\n  end\n  do end (compiler.metadata):set(commands.doc, \"fnl/docstring\", \"Print the docstring and arglist for a function, macro, or special form.\")\n  commands.compile = function(_, read, on_values, on_error, _0, _1, opts)\n    local function _761_(_241)\n      local _762_0, _763_0 = pcall(compiler.compile, _241, opts)\n      if ((_762_0 == true) and (nil ~= _763_0)) then\n        local result = _763_0\n        return on_values({result})\n      elseif (true and (nil ~= _763_0)) then\n        local _2 = _762_0\n        local msg = _763_0\n        return on_error(\"Repl\", (\"Error compiling expression: \" .. msg))\n      end\n    end\n    return run_command(read, on_error, _761_)\n  end\n  do end (compiler.metadata):set(commands.compile, \"fnl/docstring\", \"compiles the expression into lua and prints the result.\")\n  local function load_plugin_commands(plugins)\n    for i = #(plugins or {}), 1, -1 do\n      for name, f in pairs(plugins[i]) do\n        local _765_0 = name:match(\"^repl%-command%-(.*)\")\n        if (nil ~= _765_0) then\n          local cmd_name = _765_0\n          commands[cmd_name] = f\n        end\n      end\n    end\n    return nil\n  end\n  local function run_command_loop(input, read, loop, env, on_values, on_error, scope, chars, opts)\n    local command_name = input:match(\",([^%s/]+)\")\n    do\n      local _767_0 = commands[command_name]\n      if (nil ~= _767_0) then\n        local command = _767_0\n        command(env, read, on_values, on_error, scope, chars, opts)\n      else\n        local _ = _767_0\n        if ((command_name ~= \"exit\") and (command_name ~= \"return\")) then\n          on_values({\"Unknown command\", command_name})\n        end\n      end\n    end\n    if (\"exit\" ~= command_name) then\n      return loop((command_name == \"return\"))\n    end\n  end\n  local function try_readline_21(opts, ok, readline)\n    if ok then\n      if readline.set_readline_name then\n        readline.set_readline_name(\"fennel\")\n      end\n      readline.set_options({histfile = \"\", keeplines = 1000})\n      opts.readChunk = function(parser_state)\n        local prompt = nil\n        if (0 < parser_state[\"stack-size\"]) then\n          prompt = \".. \"\n        else\n          prompt = \">> \"\n        end\n        local str = readline.readline(prompt)\n        if str then\n          return (str .. \"\\n\")\n        end\n      end\n      local completer0 = nil\n      opts.registerCompleter = function(repl_completer)\n        completer0 = repl_completer\n        return nil\n      end\n      local function repl_completer(text, from, to)\n        if completer0 then\n          readline.set_completion_append_character(\"\")\n          return completer0(text:sub(from, to), text, from, to)\n        else\n          return {}\n        end\n      end\n      readline.set_complete_function(repl_completer)\n      return readline\n    end\n  end\n  local function should_use_readline_3f(opts)\n    return ((\"dumb\" ~= os.getenv(\"TERM\")) and not opts.readChunk and not opts.registerCompleter)\n  end\n  local function repl(_3foptions)\n    local old_root_options = utils.root.options\n    local _776_ = utils.copy(_3foptions)\n    local opts = _776_\n    local _3ffennelrc = _776_[\"fennelrc\"]\n    local _ = nil\n    opts.fennelrc = nil\n    _ = nil\n    local readline = (should_use_readline_3f(opts) and try_readline_21(opts, pcall(require, \"readline\")))\n    local _0 = nil\n    if _3ffennelrc then\n      _0 = _3ffennelrc()\n    else\n    _0 = nil\n    end\n    local env = specials[\"wrap-env\"]((opts.env or rawget(_G, \"_ENV\") or _G))\n    local callbacks = {[\"view-opts\"] = (opts[\"view-opts\"] or {depth = 4}), env = env, onError = (opts.onError or default_on_error), onValues = (opts.onValues or default_on_values), pp = (opts.pp or view), readChunk = (opts.readChunk or default_read_chunk)}\n    local save_locals_3f = (opts.saveLocals ~= false)\n    local byte_stream, clear_stream = nil, nil\n    local function _778_(_241)\n      return callbacks.readChunk(_241)\n    end\n    byte_stream, clear_stream = parser.granulate(_778_)\n    local chars = {}\n    local read, reset = nil, nil\n    local function _779_(parser_state)\n      local b = byte_stream(parser_state)\n      if b then\n        table.insert(chars, string.char(b))\n      end\n      return b\n    end\n    read, reset = parser.parser(_779_)\n    depth = (depth + 1)\n    if opts.message then\n      callbacks.onValues({opts.message})\n    end\n    env.___repl___ = callbacks\n    opts.env, opts.scope = env, compiler[\"make-scope\"]()\n    opts.useMetadata = (opts.useMetadata ~= false)\n    if (opts.allowedGlobals == nil) then\n      opts.allowedGlobals = specials[\"current-global-names\"](env)\n    end\n    if opts.init then\n      opts.init(opts, depth)\n    end\n    if opts.registerCompleter then\n      local function _785_()\n        local _784_0 = opts.scope\n        local function _786_(...)\n          return completer(env, _784_0, ...)\n        end\n        return _786_\n      end\n      opts.registerCompleter(_785_())\n    end\n    load_plugin_commands(opts.plugins)\n    if save_locals_3f then\n      local function newindex(t, k, v)\n        if opts.scope.manglings[k] then\n          return rawset(t, k, v)\n        end\n      end\n      env.___replLocals___ = setmetatable({}, {__newindex = newindex})\n    end\n    local function print_values(...)\n      local vals = {...}\n      local out = {}\n      local pp = callbacks.pp\n      env._, env.__ = vals[1], vals\n      for i = 1, select(\"#\", ...) do\n        table.insert(out, pp(vals[i], callbacks[\"view-opts\"]))\n      end\n      return callbacks.onValues(out)\n    end\n    local function save_value(...)\n      env.___replLocals___[\"*3\"] = env.___replLocals___[\"*2\"]\n      env.___replLocals___[\"*2\"] = env.___replLocals___[\"*1\"]\n      env.___replLocals___[\"*1\"] = ...\n      return ...\n    end\n    opts.scope.manglings[\"*1\"], opts.scope.unmanglings._1 = \"_1\", \"*1\"\n    opts.scope.manglings[\"*2\"], opts.scope.unmanglings._2 = \"_2\", \"*2\"\n    opts.scope.manglings[\"*3\"], opts.scope.unmanglings._3 = \"_3\", \"*3\"\n    local function loop(exit_next_3f)\n      for k in pairs(chars) do\n        chars[k] = nil\n      end\n      reset()\n      local ok, parser_not_eof_3f, form = pcall(read)\n      local src_string = table.concat(chars)\n      local readline_not_eof_3f = (not readline or (src_string ~= \"(null)\"))\n      local not_eof_3f = (readline_not_eof_3f and parser_not_eof_3f)\n      if not ok then\n        callbacks.onError(\"Parse\", not_eof_3f)\n        clear_stream()\n        return loop()\n      elseif command_3f(src_string) then\n        return run_command_loop(src_string, read, loop, env, callbacks.onValues, callbacks.onError, opts.scope, chars, opts)\n      else\n        if not_eof_3f then\n          local function _790_(...)\n            local _791_0, _792_0 = ...\n            if ((_791_0 == true) and (nil ~= _792_0)) then\n              local src = _792_0\n              local function _793_(...)\n                local _794_0, _795_0 = ...\n                if ((_794_0 == true) and (nil ~= _795_0)) then\n                  local chunk = _795_0\n                  local function _796_()\n                    return print_values(save_value(chunk()))\n                  end\n                  local function _797_(...)\n                    return callbacks.onError(\"Runtime\", ...)\n                  end\n                  return xpcall(_796_, _797_)\n                elseif ((_794_0 == false) and (nil ~= _795_0)) then\n                  local msg = _795_0\n                  clear_stream()\n                  return callbacks.onError(\"Compile\", msg)\n                end\n              end\n              local function _800_(...)\n                local src0 = nil\n                if save_locals_3f then\n                  src0 = splice_save_locals(env, src, opts.scope)\n                else\n                  src0 = src\n                end\n                return pcall(specials[\"load-code\"], src0, env)\n              end\n              return _793_(_800_(...))\n            elseif ((_791_0 == false) and (nil ~= _792_0)) then\n              local msg = _792_0\n              clear_stream()\n              return callbacks.onError(\"Compile\", msg)\n            end\n          end\n          local function _802_()\n            opts[\"source\"] = src_string\n            return opts\n          end\n          _790_(pcall(compiler.compile, form, _802_()))\n          utils.root.options = old_root_options\n          if exit_next_3f then\n            return env.___replLocals___[\"*1\"]\n          else\n            return loop()\n          end\n        end\n      end\n    end\n    local value = loop()\n    depth = (depth - 1)\n    if readline then\n      readline.save_history()\n    end\n    if opts.exit then\n      opts.exit(opts, depth)\n    end\n    return value\n  end\n  local function _808_(overrides, _3fopts)\n    return repl(utils.copy(_3fopts, utils.copy(overrides)))\n  end\n  return setmetatable({}, {__call = _808_, __index = {repl = repl}})\nend\npackage.preload[\"fennel.specials\"] = package.preload[\"fennel.specials\"] or function(...)\n  local utils = require(\"fennel.utils\")\n  local view = require(\"fennel.view\")\n  local parser = require(\"fennel.parser\")\n  local compiler = require(\"fennel.compiler\")\n  local unpack = (table.unpack or _G.unpack)\n  local SPECIALS = compiler.scopes.global.specials\n  local function str1(x)\n    return tostring(x[1])\n  end\n  local function wrap_env(env)\n    local function _449_(_, key)\n      if utils[\"string?\"](key) then\n        return env[compiler[\"global-unmangling\"](key)]\n      else\n        return env[key]\n      end\n    end\n    local function _451_(_, key, value)\n      if utils[\"string?\"](key) then\n        env[compiler[\"global-unmangling\"](key)] = value\n        return nil\n      else\n        env[key] = value\n        return nil\n      end\n    end\n    local function _453_()\n      local _454_\n      do\n        local tbl_14_ = {}\n        for k, v in utils.stablepairs(env) do\n          local k_15_, v_16_ = nil, nil\n          local _455_\n          if utils[\"string?\"](k) then\n            _455_ = compiler[\"global-unmangling\"](k)\n          else\n            _455_ = k\n          end\n          k_15_, v_16_ = _455_, v\n          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n            tbl_14_[k_15_] = v_16_\n          end\n        end\n        _454_ = tbl_14_\n      end\n      return next, _454_, nil\n    end\n    return setmetatable({}, {__index = _449_, __newindex = _451_, __pairs = _453_})\n  end\n  local function fennel_module_name()\n    return (utils.root.options.moduleName or \"fennel\")\n  end\n  local function current_global_names(_3fenv)\n    local mt = nil\n    do\n      local _458_0 = getmetatable(_3fenv)\n      if ((_G.type(_458_0) == \"table\") and (nil ~= _458_0.__pairs)) then\n        local mtpairs = _458_0.__pairs\n        local tbl_14_ = {}\n        for k, v in mtpairs(_3fenv) do\n          local k_15_, v_16_ = k, v\n          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n            tbl_14_[k_15_] = v_16_\n          end\n        end\n        mt = tbl_14_\n      elseif (_458_0 == nil) then\n        mt = (_3fenv or _G)\n      else\n      mt = nil\n      end\n    end\n    local function _461_()\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for k, v in utils.stablepairs(mt) do\n        local val_19_ = compiler[\"global-unmangling\"](k)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      return tbl_17_\n    end\n    return (mt and _461_())\n  end\n  local function load_code(code, _3fenv, _3ffilename)\n    local env = (_3fenv or rawget(_G, \"_ENV\") or _G)\n    local _463_0, _464_0 = rawget(_G, \"setfenv\"), rawget(_G, \"loadstring\")\n    if ((nil ~= _463_0) and (nil ~= _464_0)) then\n      local setfenv = _463_0\n      local loadstring = _464_0\n      local f = assert(loadstring(code, _3ffilename))\n      setfenv(f, env)\n      return f\n    else\n      local _ = _463_0\n      return assert(load(code, _3ffilename, \"t\", env))\n    end\n  end\n  local function doc_2a(tgt, name)\n    if not tgt then\n      return (name .. \" not found\")\n    else\n      local docstring = (((compiler.metadata):get(tgt, \"fnl/docstring\") or \"#<undocumented>\")):gsub(\"\\n$\", \"\"):gsub(\"\\n\", \"\\n  \")\n      local mt = getmetatable(tgt)\n      if ((type(tgt) == \"function\") or ((type(mt) == \"table\") and (type(mt.__call) == \"function\"))) then\n        local elts = nil\n        do\n          local _466_0 = ((compiler.metadata):get(tgt, \"fnl/arglist\") or {\"#<unknown-arguments>\"})\n          table.insert(_466_0, 1, name)\n          elts = _466_0\n        end\n        return string.format(\"(%s)\\n  %s\", table.concat(elts, \" \"), docstring)\n      else\n        return string.format(\"%s\\n  %s\", name, docstring)\n      end\n    end\n  end\n  local function doc_special(name, arglist, docstring, body_form_3f)\n    compiler.metadata[SPECIALS[name]] = {[\"fnl/arglist\"] = arglist, [\"fnl/body-form?\"] = body_form_3f, [\"fnl/docstring\"] = docstring}\n    return nil\n  end\n  local function compile_do(ast, scope, parent, _3fstart)\n    local start = (_3fstart or 2)\n    local len = #ast\n    local sub_scope = compiler[\"make-scope\"](scope)\n    for i = start, len do\n      compiler.compile1(ast[i], sub_scope, parent, {nval = 0})\n    end\n    return nil\n  end\n  SPECIALS[\"do\"] = function(ast, scope, parent, opts, _3fstart, _3fchunk, _3fsub_scope, _3fpre_syms)\n    local start = (_3fstart or 2)\n    local sub_scope = (_3fsub_scope or compiler[\"make-scope\"](scope))\n    local chunk = (_3fchunk or {})\n    local len = #ast\n    local retexprs = {returned = true}\n    utils.hook(\"pre-do\", ast, sub_scope)\n    local function compile_body(outer_target, outer_tail, outer_retexprs)\n      for i = start, len do\n        local subopts = {nval = (((i ~= len) and 0) or opts.nval), tail = (((i == len) and outer_tail) or nil), target = (((i == len) and outer_target) or nil)}\n        local _ = utils[\"propagate-options\"](opts, subopts)\n        local subexprs = compiler.compile1(ast[i], sub_scope, chunk, subopts)\n        if (i ~= len) then\n          compiler[\"keep-side-effects\"](subexprs, parent, nil, ast[i])\n        end\n      end\n      compiler.emit(parent, chunk, ast)\n      compiler.emit(parent, \"end\", ast)\n      utils.hook(\"do\", ast, sub_scope)\n      return (outer_retexprs or retexprs)\n    end\n    if (opts.target or (opts.nval == 0) or opts.tail) then\n      compiler.emit(parent, \"do\", ast)\n      return compile_body(opts.target, opts.tail)\n    elseif opts.nval then\n      local syms = {}\n      for i = 1, opts.nval do\n        local s = ((_3fpre_syms and _3fpre_syms[i]) or compiler.gensym(scope))\n        syms[i] = s\n        retexprs[i] = utils.expr(s, \"sym\")\n      end\n      local outer_target = table.concat(syms, \", \")\n      compiler.emit(parent, string.format(\"local %s\", outer_target), ast)\n      compiler.emit(parent, \"do\", ast)\n      return compile_body(outer_target, opts.tail)\n    else\n      local fname = compiler.gensym(scope)\n      local fargs = nil\n      if scope.vararg then\n        fargs = \"...\"\n      else\n        fargs = \"\"\n      end\n      compiler.emit(parent, string.format(\"local function %s(%s)\", fname, fargs), ast)\n      return compile_body(nil, true, utils.expr((fname .. \"(\" .. fargs .. \")\"), \"statement\"))\n    end\n  end\n  doc_special(\"do\", {\"...\"}, \"Evaluate multiple forms; return last value.\", true)\n  local function iter_args(ast)\n    local ast0, len, i = ast, #ast, 1\n    local function _472_()\n      i = (1 + i)\n      while ((i == len) and utils[\"call-of?\"](ast0[i], \"values\")) do\n        ast0 = ast0[i]\n        len = #ast0\n        i = 2\n      end\n      return ast0[i], (nil == ast0[(i + 1)])\n    end\n    return _472_\n  end\n  SPECIALS.values = function(ast, scope, parent)\n    local exprs = {}\n    for subast, last_3f in iter_args(ast) do\n      local subexprs = compiler.compile1(subast, scope, parent, {nval = (not last_3f and 1)})\n      table.insert(exprs, subexprs[1])\n      if last_3f then\n        for j = 2, #subexprs do\n          table.insert(exprs, subexprs[j])\n        end\n      end\n    end\n    return exprs\n  end\n  doc_special(\"values\", {\"...\"}, \"Return multiple values from a function. Must be in tail position.\")\n  local function __3estack(stack, tbl)\n    for k, v in pairs(tbl) do\n      table.insert(stack, k)\n      table.insert(stack, v)\n    end\n    return stack\n  end\n  local function literal_3f(val)\n    local res = true\n    if utils[\"list?\"](val) then\n      res = false\n    elseif utils[\"table?\"](val) then\n      local stack = __3estack({}, val)\n      for _, elt in ipairs(stack) do\n        if not res then break end\n        if utils[\"list?\"](elt) then\n          res = false\n        elseif utils[\"table?\"](elt) then\n          __3estack(stack, elt)\n        end\n      end\n    end\n    return res\n  end\n  local function compile_value(v)\n    local opts = {nval = 1, tail = false}\n    local scope = compiler[\"make-scope\"]()\n    local chunk = {}\n    local _476_ = compiler.compile1(v, scope, chunk, opts)\n    local _477_ = _476_[1]\n    local v0 = _477_[1]\n    return v0\n  end\n  local function insert_meta(meta, k, v)\n    local view_opts = {[\"escape-newlines?\"] = true, [\"line-length\"] = math.huge, [\"one-line?\"] = true}\n    compiler.assert((type(k) == \"string\"), (\"expected string keys in metadata table, got: %s\"):format(view(k, view_opts)))\n    compiler.assert(literal_3f(v), (\"expected literal value in metadata table, got: %s %s\"):format(view(k, view_opts), view(v, view_opts)))\n    table.insert(meta, view(k))\n    local function _478_()\n      if (\"string\" == type(v)) then\n        return view(v, view_opts)\n      else\n        return compile_value(v)\n      end\n    end\n    table.insert(meta, _478_())\n    return meta\n  end\n  local function insert_arglist(meta, arg_list)\n    local opts = {[\"escape-newlines?\"] = true, [\"line-length\"] = math.huge, [\"one-line?\"] = true}\n    local view_args = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, arg in ipairs(arg_list) do\n        local val_19_ = view(view(arg, opts))\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      view_args = tbl_17_\n    end\n    table.insert(meta, \"\\\"fnl/arglist\\\"\")\n    table.insert(meta, (\"{\" .. table.concat(view_args, \", \") .. \"}\"))\n    return meta\n  end\n  local function set_fn_metadata(f_metadata, parent, fn_name)\n    if utils.root.options.useMetadata then\n      local meta_fields = {}\n      for k, v in utils.stablepairs(f_metadata) do\n        if (k == \"fnl/arglist\") then\n          insert_arglist(meta_fields, v)\n        else\n          insert_meta(meta_fields, k, v)\n        end\n      end\n      local meta_str = (\"require(\\\"%s\\\").metadata\"):format(fennel_module_name())\n      return compiler.emit(parent, (\"pcall(function() %s:setall(%s, %s) end)\"):format(meta_str, fn_name, table.concat(meta_fields, \", \")))\n    end\n  end\n  local function get_fn_name(ast, scope, fn_name, multi)\n    if (fn_name and (fn_name[1] ~= \"nil\")) then\n      local _482_\n      if not multi then\n        _482_ = compiler[\"declare-local\"](fn_name, scope, ast)\n      else\n        _482_ = compiler[\"symbol-to-expression\"](fn_name, scope)[1]\n      end\n      return _482_, not multi, 3\n    else\n      return nil, true, 2\n    end\n  end\n  local function compile_named_fn(ast, f_scope, f_chunk, parent, index, fn_name, local_3f, arg_name_list, f_metadata)\n    utils.hook(\"pre-fn\", ast, f_scope)\n    for i = (index + 1), #ast do\n      compiler.compile1(ast[i], f_scope, f_chunk, {nval = (((i ~= #ast) and 0) or nil), tail = (i == #ast)})\n    end\n    local _485_\n    if local_3f then\n      _485_ = \"local function %s(%s)\"\n    else\n      _485_ = \"%s = function(%s)\"\n    end\n    compiler.emit(parent, string.format(_485_, fn_name, table.concat(arg_name_list, \", \")), ast)\n    compiler.emit(parent, f_chunk, ast)\n    compiler.emit(parent, \"end\", ast)\n    set_fn_metadata(f_metadata, parent, fn_name)\n    utils.hook(\"fn\", ast, f_scope)\n    return utils.expr(fn_name, \"sym\")\n  end\n  local function compile_anonymous_fn(ast, f_scope, f_chunk, parent, index, arg_name_list, f_metadata, scope)\n    local fn_name = compiler.gensym(scope)\n    return compile_named_fn(ast, f_scope, f_chunk, parent, index, fn_name, true, arg_name_list, f_metadata)\n  end\n  local function maybe_metadata(ast, pred, handler, mt, index)\n    local index_2a = (index + 1)\n    local index_2a_before_ast_end_3f = (index_2a < #ast)\n    local expr = ast[index_2a]\n    if (index_2a_before_ast_end_3f and pred(expr)) then\n      return handler(mt, expr), index_2a\n    else\n      return mt, index\n    end\n  end\n  local function get_function_metadata(ast, arg_list, index)\n    local function _488_(_241, _242)\n      local tbl_14_ = _241\n      for k, v in pairs(_242) do\n        local k_15_, v_16_ = k, v\n        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n          tbl_14_[k_15_] = v_16_\n        end\n      end\n      return tbl_14_\n    end\n    local function _490_(_241, _242)\n      _241[\"fnl/docstring\"] = _242\n      return _241\n    end\n    return maybe_metadata(ast, utils[\"kv-table?\"], _488_, maybe_metadata(ast, utils[\"string?\"], _490_, {[\"fnl/arglist\"] = arg_list}, index))\n  end\n  SPECIALS.fn = function(ast, scope, parent, opts)\n    local f_scope = nil\n    do\n      local _491_0 = compiler[\"make-scope\"](scope)\n      _491_0[\"vararg\"] = false\n      f_scope = _491_0\n    end\n    local f_chunk = {}\n    local fn_sym = utils[\"sym?\"](ast[2])\n    local multi = (fn_sym and utils[\"multi-sym?\"](fn_sym[1]))\n    local fn_name, local_3f, index = get_fn_name(ast, scope, fn_sym, multi, opts)\n    local arg_list = compiler.assert(utils[\"table?\"](ast[index]), \"expected parameters table\", ast)\n    compiler.assert((not multi or not multi[\"multi-sym-method-call\"]), (\"unexpected multi symbol \" .. tostring(fn_name)), fn_sym)\n    if (multi and not scope.symmeta[multi[1]] and not compiler[\"global-allowed?\"](multi[1])) then\n      compiler.assert(nil, (\"expected local table \" .. multi[1]), ast[2])\n    end\n    local function destructure_arg(arg)\n      local raw = utils.sym(compiler.gensym(scope))\n      local declared = compiler[\"declare-local\"](raw, f_scope, ast)\n      compiler.destructure(arg, raw, ast, f_scope, f_chunk, {declaration = true, nomulti = true, symtype = \"arg\"})\n      return declared\n    end\n    local function destructure_amp(i)\n      compiler.assert((i == (#arg_list - 1)), \"expected rest argument before last parameter\", arg_list[(i + 1)], arg_list)\n      f_scope.vararg = true\n      compiler.destructure(arg_list[#arg_list], {utils.varg()}, ast, f_scope, f_chunk, {declaration = true, nomulti = true, symtype = \"arg\"})\n      return \"...\"\n    end\n    local function get_arg_name(arg, i)\n      if f_scope.vararg then\n        return nil\n      elseif utils[\"varg?\"](arg) then\n        compiler.assert((arg == arg_list[#arg_list]), \"expected vararg as last parameter\", ast)\n        f_scope.vararg = true\n        return \"...\"\n      elseif utils[\"sym?\"](arg, \"&\") then\n        return destructure_amp(i)\n      elseif (utils[\"sym?\"](arg) and (tostring(arg) ~= \"nil\") and not utils[\"multi-sym?\"](tostring(arg))) then\n        return compiler[\"declare-local\"](arg, f_scope, ast)\n      elseif utils[\"table?\"](arg) then\n        return destructure_arg(arg)\n      else\n        return compiler.assert(false, (\"expected symbol for function parameter: %s\"):format(tostring(arg)), ast[index])\n      end\n    end\n    local arg_name_list = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i, a in ipairs(arg_list) do\n        local val_19_ = get_arg_name(a, i)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      arg_name_list = tbl_17_\n    end\n    local f_metadata, index0 = get_function_metadata(ast, arg_list, index)\n    if fn_name then\n      return compile_named_fn(ast, f_scope, f_chunk, parent, index0, fn_name, local_3f, arg_name_list, f_metadata)\n    else\n      return compile_anonymous_fn(ast, f_scope, f_chunk, parent, index0, arg_name_list, f_metadata, scope)\n    end\n  end\n  doc_special(\"fn\", {\"name?\", \"args\", \"docstring?\", \"...\"}, \"Function syntax. May optionally include a name and docstring or a metadata table.\\nIf a name is provided, the function will be bound in the current scope.\\nWhen called with the wrong number of args, excess args will be discarded\\nand lacking args will be nil, use lambda for arity-checked functions.\", true)\n  SPECIALS.lua = function(ast, _, parent)\n    compiler.assert(((#ast == 2) or (#ast == 3)), \"expected 1 or 2 arguments\", ast)\n    local _497_\n    do\n      local _496_0 = utils[\"sym?\"](ast[2])\n      if (nil ~= _496_0) then\n        _497_ = tostring(_496_0)\n      else\n        _497_ = _496_0\n      end\n    end\n    if (\"nil\" ~= _497_) then\n      table.insert(parent, {ast = ast, leaf = tostring(ast[2])})\n    end\n    local _501_\n    do\n      local _500_0 = utils[\"sym?\"](ast[3])\n      if (nil ~= _500_0) then\n        _501_ = tostring(_500_0)\n      else\n        _501_ = _500_0\n      end\n    end\n    if (\"nil\" ~= _501_) then\n      return tostring(ast[3])\n    end\n  end\n  local function dot(ast, scope, parent)\n    compiler.assert((1 < #ast), \"expected table argument\", ast)\n    local len = #ast\n    local lhs_node = compiler.macroexpand(ast[2], scope)\n    local _504_ = compiler.compile1(lhs_node, scope, parent, {nval = 1})\n    local lhs = _504_[1]\n    if (len == 2) then\n      return tostring(lhs)\n    else\n      local indices = {}\n      for i = 3, len do\n        local index = ast[i]\n        if (utils[\"string?\"](index) and utils[\"valid-lua-identifier?\"](index)) then\n          table.insert(indices, (\".\" .. index))\n        else\n          local _505_ = compiler.compile1(index, scope, parent, {nval = 1})\n          local index0 = _505_[1]\n          table.insert(indices, (\"[\" .. tostring(index0) .. \"]\"))\n        end\n      end\n      if (not (utils[\"sym?\"](lhs_node) or utils[\"list?\"](lhs_node)) or (\"nil\" == tostring(lhs_node))) then\n        return (\"(\" .. tostring(lhs) .. \")\" .. table.concat(indices))\n      else\n        return (tostring(lhs) .. table.concat(indices))\n      end\n    end\n  end\n  SPECIALS[\".\"] = dot\n  doc_special(\".\", {\"tbl\", \"key1\", \"...\"}, \"Look up key1 in tbl table. If more args are provided, do a nested lookup.\")\n  SPECIALS.global = function(ast, scope, parent)\n    compiler.assert((#ast == 3), \"expected name and value\", ast)\n    compiler.destructure(ast[2], ast[3], ast, scope, parent, {forceglobal = true, nomulti = true, symtype = \"global\"})\n    return nil\n  end\n  doc_special(\"global\", {\"name\", \"val\"}, \"Set name as a global with val. Deprecated.\")\n  SPECIALS.set = function(ast, scope, parent)\n    compiler.assert((#ast == 3), \"expected name and value\", ast)\n    compiler.destructure(ast[2], ast[3], ast, scope, parent, {noundef = true, symtype = \"set\"})\n    return nil\n  end\n  doc_special(\"set\", {\"name\", \"val\"}, \"Set a local variable to a new value. Only works on locals using var.\")\n  local function set_forcibly_21_2a(ast, scope, parent)\n    compiler.assert((#ast == 3), \"expected name and value\", ast)\n    compiler.destructure(ast[2], ast[3], ast, scope, parent, {forceset = true, symtype = \"set\"})\n    return nil\n  end\n  SPECIALS[\"set-forcibly!\"] = set_forcibly_21_2a\n  local function local_2a(ast, scope, parent, opts)\n    compiler.assert(((0 == opts.nval) or opts.tail), \"can't introduce local here\", ast)\n    compiler.assert((#ast == 3), \"expected name and value\", ast)\n    compiler.destructure(ast[2], ast[3], ast, scope, parent, {declaration = true, nomulti = true, symtype = \"local\"})\n    return nil\n  end\n  SPECIALS[\"local\"] = local_2a\n  doc_special(\"local\", {\"name\", \"val\"}, \"Introduce new top-level immutable local.\")\n  SPECIALS.var = function(ast, scope, parent, opts)\n    compiler.assert(((0 == opts.nval) or opts.tail), \"can't introduce var here\", ast)\n    compiler.assert((#ast == 3), \"expected name and value\", ast)\n    compiler.destructure(ast[2], ast[3], ast, scope, parent, {declaration = true, isvar = true, nomulti = true, symtype = \"var\"})\n    return nil\n  end\n  doc_special(\"var\", {\"name\", \"val\"}, \"Introduce new mutable local.\")\n  local function kv_3f(t)\n    local _509_\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for k in pairs(t) do\n        local val_19_ = nil\n        if (\"number\" ~= type(k)) then\n          val_19_ = k\n        else\n        val_19_ = nil\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      _509_ = tbl_17_\n    end\n    return _509_[1]\n  end\n  SPECIALS.let = function(_512_0, scope, parent, opts)\n    local _513_ = _512_0\n    local _ = _513_[1]\n    local bindings = _513_[2]\n    local ast = _513_\n    compiler.assert((utils[\"table?\"](bindings) and not kv_3f(bindings)), \"expected binding sequence\", (bindings or ast[1]))\n    compiler.assert(((#bindings % 2) == 0), \"expected even number of name/value bindings\", bindings)\n    compiler.assert((3 <= #ast), \"expected body expression\", ast[1])\n    local pre_syms = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _0 = 1, (opts.nval or 0) do\n        local val_19_ = compiler.gensym(scope)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      pre_syms = tbl_17_\n    end\n    local sub_scope = compiler[\"make-scope\"](scope)\n    local sub_chunk = {}\n    for i = 1, #bindings, 2 do\n      compiler.destructure(bindings[i], bindings[(i + 1)], ast, sub_scope, sub_chunk, {declaration = true, nomulti = true, symtype = \"let\"})\n    end\n    return SPECIALS[\"do\"](ast, scope, parent, opts, 3, sub_chunk, sub_scope, pre_syms)\n  end\n  doc_special(\"let\", {\"[name1 val1 ... nameN valN]\", \"...\"}, \"Introduces a new scope in which a given set of local bindings are used.\", true)\n  local function get_prev_line(parent)\n    if (\"table\" == type(parent)) then\n      return get_prev_line((parent.leaf or parent[#parent]))\n    else\n      return (parent or \"\")\n    end\n  end\n  local function needs_separator_3f(root, prev_line)\n    return (root:match(\"^%(\") and prev_line and not prev_line:find(\" end$\"))\n  end\n  SPECIALS.tset = function(ast, scope, parent)\n    compiler.assert((3 < #ast), \"expected table, key, and value arguments\", ast)\n    compiler.assert(((type(ast[2]) ~= \"boolean\") and (type(ast[2]) ~= \"number\")), \"cannot set field of literal value\", ast)\n    local root = str1(compiler.compile1(ast[2], scope, parent, {nval = 1}))\n    local root0 = nil\n    if root:match(\"^[.{\\\"]\") then\n      root0 = string.format(\"(%s)\", root)\n    else\n      root0 = root\n    end\n    local keys = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i = 3, (#ast - 1) do\n        local val_19_ = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      keys = tbl_17_\n    end\n    local value = str1(compiler.compile1(ast[#ast], scope, parent, {nval = 1}))\n    local fmtstr = nil\n    if needs_separator_3f(root0, get_prev_line(parent)) then\n      fmtstr = \"do end %s[%s] = %s\"\n    else\n      fmtstr = \"%s[%s] = %s\"\n    end\n    return compiler.emit(parent, fmtstr:format(root0, table.concat(keys, \"][\"), value), ast)\n  end\n  doc_special(\"tset\", {\"tbl\", \"key1\", \"...\", \"keyN\", \"val\"}, \"Set the value of a table field. Deprecated in favor of set.\")\n  local function calculate_if_target(scope, opts)\n    if not (opts.tail or opts.target or opts.nval) then\n      return \"iife\", true, nil\n    elseif (opts.nval and (opts.nval ~= 0) and not opts.target) then\n      local accum = {}\n      local target_exprs = {}\n      for i = 1, opts.nval do\n        local s = compiler.gensym(scope)\n        accum[i] = s\n        target_exprs[i] = utils.expr(s, \"sym\")\n      end\n      return \"target\", opts.tail, table.concat(accum, \", \"), target_exprs\n    else\n      return \"none\", opts.tail, opts.target\n    end\n  end\n  local function if_2a(ast, scope, parent, opts)\n    compiler.assert((2 < #ast), \"expected condition and body\", ast)\n    if ((1 == (#ast % 2)) and (ast[(#ast - 1)] == true)) then\n      table.remove(ast, (#ast - 1))\n    end\n    if (1 == (#ast % 2)) then\n      table.insert(ast, utils.sym(\"nil\"))\n    end\n    if (#ast == 2) then\n      return SPECIALS[\"do\"](utils.list(utils.sym(\"do\"), ast[2]), scope, parent, opts)\n    else\n      local do_scope = compiler[\"make-scope\"](scope)\n      local branches = {}\n      local wrapper, inner_tail, inner_target, target_exprs = calculate_if_target(scope, opts)\n      local body_opts = {nval = opts.nval, tail = inner_tail, target = inner_target}\n      local function compile_body(i)\n        local chunk = {}\n        local cscope = compiler[\"make-scope\"](do_scope)\n        compiler[\"keep-side-effects\"](compiler.compile1(ast[i], cscope, chunk, body_opts), chunk, nil, ast[i])\n        return {chunk = chunk, scope = cscope}\n      end\n      for i = 2, (#ast - 1), 2 do\n        local condchunk = {}\n        local _522_ = compiler.compile1(ast[i], do_scope, condchunk, {nval = 1})\n        local cond = _522_[1]\n        local branch = compile_body((i + 1))\n        branch.cond = cond\n        branch.condchunk = condchunk\n        branch.nested = ((i ~= 2) and (next(condchunk, nil) == nil))\n        table.insert(branches, branch)\n      end\n      local else_branch = compile_body(#ast)\n      local s = compiler.gensym(scope)\n      local buffer = {}\n      local last_buffer = buffer\n      for i = 1, #branches do\n        local branch = branches[i]\n        local fstr = nil\n        if not branch.nested then\n          fstr = \"if %s then\"\n        else\n          fstr = \"elseif %s then\"\n        end\n        local cond = tostring(branch.cond)\n        local cond_line = fstr:format(cond)\n        if branch.nested then\n          compiler.emit(last_buffer, branch.condchunk, ast)\n        else\n          for _, v in ipairs(branch.condchunk) do\n            compiler.emit(last_buffer, v, ast)\n          end\n        end\n        compiler.emit(last_buffer, cond_line, ast)\n        compiler.emit(last_buffer, branch.chunk, ast)\n        if (i == #branches) then\n          compiler.emit(last_buffer, \"else\", ast)\n          compiler.emit(last_buffer, else_branch.chunk, ast)\n          compiler.emit(last_buffer, \"end\", ast)\n        elseif not branches[(i + 1)].nested then\n          local next_buffer = {}\n          compiler.emit(last_buffer, \"else\", ast)\n          compiler.emit(last_buffer, next_buffer, ast)\n          compiler.emit(last_buffer, \"end\", ast)\n          last_buffer = next_buffer\n        end\n      end\n      if (wrapper == \"iife\") then\n        local iifeargs = ((scope.vararg and \"...\") or \"\")\n        compiler.emit(parent, (\"local function %s(%s)\"):format(tostring(s), iifeargs), ast)\n        compiler.emit(parent, buffer, ast)\n        compiler.emit(parent, \"end\", ast)\n        return utils.expr((\"%s(%s)\"):format(tostring(s), iifeargs), \"statement\")\n      elseif (wrapper == \"none\") then\n        for i = 1, #buffer do\n          compiler.emit(parent, buffer[i], ast)\n        end\n        return {returned = true}\n      else\n        compiler.emit(parent, (\"local %s\"):format(inner_target), ast)\n        for i = 1, #buffer do\n          compiler.emit(parent, buffer[i], ast)\n        end\n        return target_exprs\n      end\n    end\n  end\n  SPECIALS[\"if\"] = if_2a\n  doc_special(\"if\", {\"cond1\", \"body1\", \"...\", \"condN\", \"bodyN\"}, \"Conditional form.\\nTakes any number of condition/body pairs and evaluates the first body where\\nthe condition evaluates to truthy. Similar to cond in other lisps.\")\n  local function clause_3f(v)\n    return (utils[\"string?\"](v) or (utils[\"sym?\"](v) and not utils[\"multi-sym?\"](v) and tostring(v):match(\"^&(.+)\")))\n  end\n  local function remove_until_condition(bindings, ast)\n    local _until = nil\n    for i = (#bindings - 1), 3, -1 do\n      local _528_0 = clause_3f(bindings[i])\n      if ((_528_0 == false) or (_528_0 == nil)) then\n      elseif (nil ~= _528_0) then\n        local clause = _528_0\n        compiler.assert(((clause == \"until\") and not _until), (\"unexpected iterator clause: \" .. clause), ast)\n        table.remove(bindings, i)\n        _until = table.remove(bindings, i)\n      end\n    end\n    return _until\n  end\n  local function compile_until(_3fcondition, scope, chunk)\n    if _3fcondition then\n      local _530_ = compiler.compile1(_3fcondition, scope, chunk, {nval = 1})\n      local condition_lua = _530_[1]\n      return compiler.emit(chunk, (\"if %s then break end\"):format(tostring(condition_lua)), utils.expr(_3fcondition, \"expression\"))\n    end\n  end\n  local function iterator_bindings(ast)\n    local bindings = utils.copy(ast)\n    local _3funtil = remove_until_condition(bindings, ast)\n    local iter = table.remove(bindings)\n    local bindings0 = nil\n    if (1 == #bindings) then\n      bindings0 = (utils[\"list?\"](bindings[1]) or bindings)\n    else\n      for _, b in ipairs(bindings) do\n        if utils[\"list?\"](b) then\n          utils.warn(\"unexpected parens in iterator\", b)\n        end\n      end\n      bindings0 = bindings\n    end\n    return bindings0, iter, _3funtil\n  end\n  SPECIALS.each = function(ast, scope, parent)\n    compiler.assert((3 <= #ast), \"expected body expression\", ast[1])\n    compiler.assert(utils[\"table?\"](ast[2]), \"expected binding table\", ast)\n    local sub_scope = compiler[\"make-scope\"](scope)\n    local binding, iter, _3funtil_condition = iterator_bindings(ast[2])\n    local destructures = {}\n    local deferred_scope_changes = {manglings = {}, symmeta = {}}\n    utils.hook(\"pre-each\", ast, sub_scope, binding, iter, _3funtil_condition)\n    local function destructure_binding(v)\n      if utils[\"sym?\"](v) then\n        return compiler[\"declare-local\"](v, sub_scope, ast, nil, deferred_scope_changes)\n      else\n        local raw = utils.sym(compiler.gensym(sub_scope))\n        destructures[raw] = v\n        return compiler[\"declare-local\"](raw, sub_scope, ast)\n      end\n    end\n    local bind_vars = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, b in ipairs(binding) do\n        local val_19_ = destructure_binding(b)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      bind_vars = tbl_17_\n    end\n    local vals = compiler.compile1(iter, scope, parent)\n    local val_names = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, v in ipairs(vals) do\n        local val_19_ = tostring(v)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      val_names = tbl_17_\n    end\n    local chunk = {}\n    compiler.assert(bind_vars[1], \"expected binding and iterator\", ast)\n    compiler.emit(parent, (\"for %s in %s do\"):format(table.concat(bind_vars, \", \"), table.concat(val_names, \", \")), ast)\n    for raw, args in utils.stablepairs(destructures) do\n      compiler.destructure(args, raw, ast, sub_scope, chunk, {declaration = true, nomulti = true, symtype = \"each\"})\n    end\n    compiler[\"apply-deferred-scope-changes\"](sub_scope, deferred_scope_changes, ast)\n    compile_until(_3funtil_condition, sub_scope, chunk)\n    compile_do(ast, sub_scope, chunk, 3)\n    compiler.emit(parent, chunk, ast)\n    return compiler.emit(parent, \"end\", ast)\n  end\n  doc_special(\"each\", {\"[key value (iterator)]\", \"...\"}, \"Runs the body once for each set of values provided by the given iterator.\\nMost commonly used with ipairs for sequential tables or pairs for  undefined\\norder, but can be used with any iterator.\", true)\n  local function while_2a(ast, scope, parent)\n    local len1 = #parent\n    local condition = compiler.compile1(ast[2], scope, parent, {nval = 1})[1]\n    local len2 = #parent\n    local sub_chunk = {}\n    if (len1 ~= len2) then\n      for i = (len1 + 1), len2 do\n        table.insert(sub_chunk, parent[i])\n        parent[i] = nil\n      end\n      compiler.emit(parent, \"while true do\", ast)\n      compiler.emit(sub_chunk, (\"if not %s then break end\"):format(condition[1]), ast)\n    else\n      compiler.emit(parent, (\"while \" .. tostring(condition) .. \" do\"), ast)\n    end\n    compile_do(ast, compiler[\"make-scope\"](scope), sub_chunk, 3)\n    compiler.emit(parent, sub_chunk, ast)\n    return compiler.emit(parent, \"end\", ast)\n  end\n  SPECIALS[\"while\"] = while_2a\n  doc_special(\"while\", {\"condition\", \"...\"}, \"The classic while loop. Evaluates body until a condition is non-truthy.\", true)\n  local function for_2a(ast, scope, parent)\n    compiler.assert(utils[\"table?\"](ast[2]), \"expected binding table\", ast)\n    local ranges = setmetatable(utils.copy(ast[2]), getmetatable(ast[2]))\n    local until_condition = remove_until_condition(ranges, ast)\n    local binding_sym = table.remove(ranges, 1)\n    local sub_scope = compiler[\"make-scope\"](scope)\n    local range_args = {}\n    local chunk = {}\n    compiler.assert(utils[\"sym?\"](binding_sym), (\"unable to bind %s %s\"):format(type(binding_sym), tostring(binding_sym)), ast[2])\n    compiler.assert((3 <= #ast), \"expected body expression\", ast[1])\n    compiler.assert((#ranges <= 3), \"unexpected arguments\", ranges)\n    compiler.assert((1 < #ranges), \"expected range to include start and stop\", ranges)\n    utils.hook(\"pre-for\", ast, sub_scope, binding_sym)\n    for i = 1, math.min(#ranges, 3) do\n      range_args[i] = str1(compiler.compile1(ranges[i], scope, parent, {nval = 1}))\n    end\n    compiler.emit(parent, (\"for %s = %s do\"):format(compiler[\"declare-local\"](binding_sym, sub_scope, ast), table.concat(range_args, \", \")), ast)\n    compile_until(until_condition, sub_scope, chunk)\n    compile_do(ast, sub_scope, chunk, 3)\n    compiler.emit(parent, chunk, ast)\n    return compiler.emit(parent, \"end\", ast)\n  end\n  SPECIALS[\"for\"] = for_2a\n  doc_special(\"for\", {\"[index start stop step?]\", \"...\"}, \"Numeric loop construct.\\nEvaluates body once for each value between start and stop (inclusive).\", true)\n  local function method_special_type(ast)\n    if (utils[\"string?\"](ast[3]) and utils[\"valid-lua-identifier?\"](ast[3])) then\n      return \"native\"\n    elseif utils[\"sym?\"](ast[2]) then\n      return \"nonnative\"\n    else\n      return \"binding\"\n    end\n  end\n  local function native_method_call(ast, _scope, _parent, target, args)\n    local _539_ = ast\n    local _ = _539_[1]\n    local _0 = _539_[2]\n    local method_string = _539_[3]\n    local call_string = nil\n    if ((target.type == \"literal\") or (target.type == \"varg\") or ((target.type == \"expression\") and not (target[1]):match(\"[%)%]]$\") and not (target[1]):match(\"%.[%a_][%w_]*$\"))) then\n      call_string = \"(%s):%s(%s)\"\n    else\n      call_string = \"%s:%s(%s)\"\n    end\n    return utils.expr(string.format(call_string, tostring(target), method_string, table.concat(args, \", \")), \"statement\")\n  end\n  local function nonnative_method_call(ast, scope, parent, target, args)\n    local method_string = str1(compiler.compile1(ast[3], scope, parent, {nval = 1}))\n    local args0 = {tostring(target), unpack(args)}\n    return utils.expr(string.format(\"%s[%s](%s)\", tostring(target), method_string, table.concat(args0, \", \")), \"statement\")\n  end\n  local function binding_method_call(ast, scope, parent, target, args)\n    local method_string = str1(compiler.compile1(ast[3], scope, parent, {nval = 1}))\n    local target_local = compiler.gensym(scope, \"tgt\")\n    local args0 = {target_local, unpack(args)}\n    compiler.emit(parent, string.format(\"local %s = %s\", target_local, tostring(target)))\n    return utils.expr(string.format(\"(%s)[%s](%s)\", target_local, method_string, table.concat(args0, \", \")), \"statement\")\n  end\n  local function method_call(ast, scope, parent)\n    compiler.assert((2 < #ast), \"expected at least 2 arguments\", ast)\n    local _541_ = compiler.compile1(ast[2], scope, parent, {nval = 1})\n    local target = _541_[1]\n    local args = {}\n    for i = 4, #ast do\n      local subexprs = nil\n      local _542_\n      if (i ~= #ast) then\n        _542_ = 1\n      else\n      _542_ = nil\n      end\n      subexprs = compiler.compile1(ast[i], scope, parent, {nval = _542_})\n      local tbl_17_ = args\n      local i_18_ = #tbl_17_\n      for _, subexpr in ipairs(subexprs) do\n        local val_19_ = tostring(subexpr)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n    end\n    local _545_0 = method_special_type(ast)\n    if (_545_0 == \"native\") then\n      return native_method_call(ast, scope, parent, target, args)\n    elseif (_545_0 == \"nonnative\") then\n      return nonnative_method_call(ast, scope, parent, target, args)\n    elseif (_545_0 == \"binding\") then\n      return binding_method_call(ast, scope, parent, target, args)\n    end\n  end\n  SPECIALS[\":\"] = method_call\n  doc_special(\":\", {\"tbl\", \"method-name\", \"...\"}, \"Call the named method on tbl with the provided args.\\nMethod name doesn't have to be known at compile-time; if it is, use\\n(tbl:method-name ...) instead.\")\n  SPECIALS.comment = function(ast, _, parent)\n    local c = nil\n    local _547_\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i, elt in ipairs(ast) do\n        local val_19_ = nil\n        if (i ~= 1) then\n          val_19_ = view(elt, {[\"one-line?\"] = true})\n        else\n        val_19_ = nil\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      _547_ = tbl_17_\n    end\n    c = table.concat(_547_, \" \"):gsub(\"%]%]\", \"]\\\\]\")\n    return compiler.emit(parent, (\"--[[ \" .. c .. \" ]]\"), ast)\n  end\n  doc_special(\"comment\", {\"...\"}, \"Comment which will be emitted in Lua output.\", true)\n  local function hashfn_max_used(f_scope, i, max)\n    local max0 = nil\n    if f_scope.symmeta[(\"$\" .. i)].used then\n      max0 = i\n    else\n      max0 = max\n    end\n    if (i < 9) then\n      return hashfn_max_used(f_scope, (i + 1), max0)\n    else\n      return max0\n    end\n  end\n  SPECIALS.hashfn = function(ast, scope, parent)\n    compiler.assert((#ast == 2), \"expected one argument\", ast)\n    local f_scope = nil\n    do\n      local _552_0 = compiler[\"make-scope\"](scope)\n      _552_0[\"vararg\"] = false\n      _552_0[\"hashfn\"] = true\n      f_scope = _552_0\n    end\n    local f_chunk = {}\n    local name = compiler.gensym(scope)\n    local symbol = utils.sym(name)\n    local args = {}\n    compiler[\"declare-local\"](symbol, scope, ast)\n    for i = 1, 9 do\n      args[i] = compiler[\"declare-local\"](utils.sym((\"$\" .. i)), f_scope, ast)\n    end\n    local function walker(idx, node, _3fparent_node)\n      if utils[\"sym?\"](node, \"$...\") then\n        f_scope.vararg = true\n        if _3fparent_node then\n          _3fparent_node[idx] = utils.varg()\n          return nil\n        else\n          return utils.varg()\n        end\n      else\n        return ((utils[\"list?\"](node) and (not _3fparent_node or not utils[\"sym?\"](node[1], \"hashfn\"))) or utils[\"table?\"](node))\n      end\n    end\n    utils[\"walk-tree\"](ast, walker)\n    compiler.compile1(ast[2], f_scope, f_chunk, {tail = true})\n    local max_used = hashfn_max_used(f_scope, 1, 0)\n    if f_scope.vararg then\n      compiler.assert((max_used == 0), \"$ and $... in hashfn are mutually exclusive\", ast)\n    end\n    local arg_str = nil\n    if f_scope.vararg then\n      arg_str = tostring(utils.varg())\n    else\n      arg_str = table.concat(args, \", \", 1, max_used)\n    end\n    compiler.emit(parent, string.format(\"local function %s(%s)\", name, arg_str), ast)\n    compiler.emit(parent, f_chunk, ast)\n    compiler.emit(parent, \"end\", ast)\n    return utils.expr(name, \"sym\")\n  end\n  doc_special(\"hashfn\", {\"...\"}, \"Function literal shorthand; args are either $... OR $1, $2, etc.\")\n  local function comparator_special_type(ast)\n    if (3 == #ast) then\n      return \"native\"\n    elseif utils[\"every?\"]({unpack(ast, 3, (#ast - 1))}, utils[\"idempotent-expr?\"]) then\n      return \"idempotent\"\n    else\n      return \"binding\"\n    end\n  end\n  local function short_circuit_safe_3f(x, scope)\n    if ((\"table\" ~= type(x)) or utils[\"sym?\"](x) or utils[\"varg?\"](x)) then\n      return true\n    elseif utils[\"table?\"](x) then\n      local ok = true\n      for k, v in pairs(x) do\n        if not ok then break end\n        ok = (short_circuit_safe_3f(v, scope) and short_circuit_safe_3f(k, scope))\n      end\n      return ok\n    elseif utils[\"list?\"](x) then\n      if utils[\"sym?\"](x[1]) then\n        local _558_0 = str1(x)\n        if ((_558_0 == \"fn\") or (_558_0 == \"hashfn\") or (_558_0 == \"let\") or (_558_0 == \"local\") or (_558_0 == \"var\") or (_558_0 == \"set\") or (_558_0 == \"tset\") or (_558_0 == \"if\") or (_558_0 == \"each\") or (_558_0 == \"for\") or (_558_0 == \"while\") or (_558_0 == \"do\") or (_558_0 == \"lua\") or (_558_0 == \"global\")) then\n          return false\n        elseif (((_558_0 == \"<\") or (_558_0 == \">\") or (_558_0 == \"<=\") or (_558_0 == \">=\") or (_558_0 == \"=\") or (_558_0 == \"not=\") or (_558_0 == \"~=\")) and (comparator_special_type(x) == \"binding\")) then\n          return false\n        else\n          local function _559_()\n            return (1 ~= x[2])\n          end\n          if ((_558_0 == \"pick-values\") and _559_()) then\n            return false\n          else\n            local function _560_()\n              local call = _558_0\n              return scope.macros[call]\n            end\n            if ((nil ~= _558_0) and _560_()) then\n              local call = _558_0\n              return false\n            else\n              local function _561_()\n                return (method_special_type(x) == \"binding\")\n              end\n              if ((_558_0 == \":\") and _561_()) then\n                return false\n              else\n                local _ = _558_0\n                local ok = true\n                for i = 2, #x do\n                  if not ok then break end\n                  ok = short_circuit_safe_3f(x[i], scope)\n                end\n                return ok\n              end\n            end\n          end\n        end\n      else\n        local ok = true\n        for _, v in ipairs(x) do\n          if not ok then break end\n          ok = short_circuit_safe_3f(v, scope)\n        end\n        return ok\n      end\n    end\n  end\n  local function operator_special_result(ast, zero_arity, unary_prefix, padded_op, operands)\n    local _565_0 = #operands\n    if (_565_0 == 0) then\n      if zero_arity then\n        return utils.expr(zero_arity, \"literal\")\n      else\n        return compiler.assert(false, \"Expected more than 0 arguments\", ast)\n      end\n    elseif (_565_0 == 1) then\n      if unary_prefix then\n        return (\"(\" .. unary_prefix .. padded_op .. operands[1] .. \")\")\n      else\n        return operands[1]\n      end\n    else\n      local _ = _565_0\n      return (\"(\" .. table.concat(operands, padded_op) .. \")\")\n    end\n  end\n  local function emit_short_circuit_if(ast, scope, parent, name, subast, accumulator, expr_string, setter)\n    if (accumulator ~= expr_string) then\n      compiler.emit(parent, string.format(setter, accumulator, expr_string), ast)\n    end\n    local function _570_()\n      if (name == \"and\") then\n        return accumulator\n      else\n        return (\"not \" .. accumulator)\n      end\n    end\n    compiler.emit(parent, (\"if %s then\"):format(_570_()), subast)\n    do\n      local chunk = {}\n      compiler.compile1(subast, scope, chunk, {nval = 1, target = accumulator})\n      compiler.emit(parent, chunk)\n    end\n    return compiler.emit(parent, \"end\")\n  end\n  local function operator_special(name, zero_arity, unary_prefix, ast, scope, parent)\n    compiler.assert(not ((#ast == 2) and utils[\"varg?\"](ast[2])), \"tried to use vararg with operator\", ast)\n    local padded_op = (\" \" .. name .. \" \")\n    local operands, accumulator = {}\n    if utils[\"call-of?\"](ast[#ast], \"values\") then\n      utils.warn(\"multiple values in operators are deprecated\", ast)\n    end\n    for subast in iter_args(ast) do\n      if ((nil ~= next(operands)) and ((name == \"or\") or (name == \"and\")) and not short_circuit_safe_3f(subast, scope)) then\n        local expr_string = table.concat(operands, padded_op)\n        local setter = nil\n        if accumulator then\n          setter = \"%s = %s\"\n        else\n          setter = \"local %s = %s\"\n        end\n        if not accumulator then\n          accumulator = compiler.gensym(scope, name)\n        end\n        emit_short_circuit_if(ast, scope, parent, name, subast, accumulator, expr_string, setter)\n        operands = {accumulator}\n      else\n        table.insert(operands, str1(compiler.compile1(subast, scope, parent, {nval = 1})))\n      end\n    end\n    return operator_special_result(ast, zero_arity, unary_prefix, padded_op, operands)\n  end\n  local function define_arithmetic_special(name, zero_arity, unary_prefix, _3flua_name)\n    local _576_\n    do\n      local _575_0 = (_3flua_name or name)\n      local function _577_(...)\n        return operator_special(_575_0, zero_arity, unary_prefix, ...)\n      end\n      _576_ = _577_\n    end\n    SPECIALS[name] = _576_\n    return doc_special(name, {\"a\", \"b\", \"...\"}, \"Arithmetic operator; works the same as Lua but accepts more arguments.\")\n  end\n  define_arithmetic_special(\"+\", \"0\", \"0\")\n  define_arithmetic_special(\"..\", \"''\")\n  define_arithmetic_special(\"^\")\n  define_arithmetic_special(\"-\", nil, \"\")\n  define_arithmetic_special(\"*\", \"1\", \"1\")\n  define_arithmetic_special(\"%\")\n  define_arithmetic_special(\"/\", nil, \"1\")\n  define_arithmetic_special(\"//\", nil, \"1\")\n  SPECIALS[\"or\"] = function(ast, scope, parent)\n    return operator_special(\"or\", \"false\", nil, ast, scope, parent)\n  end\n  SPECIALS[\"and\"] = function(ast, scope, parent)\n    return operator_special(\"and\", \"true\", nil, ast, scope, parent)\n  end\n  doc_special(\"and\", {\"a\", \"b\", \"...\"}, \"Boolean operator; works the same as Lua but accepts more arguments.\")\n  doc_special(\"or\", {\"a\", \"b\", \"...\"}, \"Boolean operator; works the same as Lua but accepts more arguments.\")\n  local function bitop_special(native_name, lib_name, zero_arity, unary_prefix, ast, scope, parent)\n    if (#ast == 1) then\n      return compiler.assert(zero_arity, \"Expected more than 0 arguments.\", ast)\n    else\n      local len = #ast\n      local operands = {}\n      local padded_native_name = (\" \" .. native_name .. \" \")\n      local prefixed_lib_name = (\"bit.\" .. lib_name)\n      for i = 2, len do\n        local subexprs = nil\n        local _578_\n        if (i ~= len) then\n          _578_ = 1\n        else\n        _578_ = nil\n        end\n        subexprs = compiler.compile1(ast[i], scope, parent, {nval = _578_})\n        local tbl_17_ = operands\n        local i_18_ = #tbl_17_\n        for _, s in ipairs(subexprs) do\n          local val_19_ = tostring(s)\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n      end\n      if (#operands == 1) then\n        if utils.root.options.useBitLib then\n          return (prefixed_lib_name .. \"(\" .. unary_prefix .. \", \" .. operands[1] .. \")\")\n        else\n          return (\"(\" .. unary_prefix .. padded_native_name .. operands[1] .. \")\")\n        end\n      else\n        if utils.root.options.useBitLib then\n          return (prefixed_lib_name .. \"(\" .. table.concat(operands, \", \") .. \")\")\n        else\n          return (\"(\" .. table.concat(operands, padded_native_name) .. \")\")\n        end\n      end\n    end\n  end\n  local function define_bitop_special(name, zero_arity, unary_prefix, native)\n    local function _585_(...)\n      return bitop_special(native, name, zero_arity, unary_prefix, ...)\n    end\n    SPECIALS[name] = _585_\n    return nil\n  end\n  define_bitop_special(\"lshift\", nil, \"1\", \"<<\")\n  define_bitop_special(\"rshift\", nil, \"1\", \">>\")\n  define_bitop_special(\"band\", \"-1\", \"-1\", \"&\")\n  define_bitop_special(\"bor\", \"0\", \"0\", \"|\")\n  define_bitop_special(\"bxor\", \"0\", \"0\", \"~\")\n  doc_special(\"lshift\", {\"x\", \"n\"}, \"Bitwise logical left shift of x by n bits.\\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  doc_special(\"rshift\", {\"x\", \"n\"}, \"Bitwise logical right shift of x by n bits.\\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  doc_special(\"band\", {\"x1\", \"x2\", \"...\"}, \"Bitwise AND of any number of arguments.\\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  doc_special(\"bor\", {\"x1\", \"x2\", \"...\"}, \"Bitwise OR of any number of arguments.\\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  doc_special(\"bxor\", {\"x1\", \"x2\", \"...\"}, \"Bitwise XOR of any number of arguments.\\nOnly works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  SPECIALS.bnot = function(ast, scope, parent)\n    compiler.assert((#ast == 2), \"expected one argument\", ast)\n    local _586_ = compiler.compile1(ast[2], scope, parent, {nval = 1})\n    local value = _586_[1]\n    if utils.root.options.useBitLib then\n      return (\"bit.bnot(\" .. tostring(value) .. \")\")\n    else\n      return (\"~(\" .. tostring(value) .. \")\")\n    end\n  end\n  doc_special(\"bnot\", {\"x\"}, \"Bitwise negation; only works in Lua 5.3+ or LuaJIT with the --use-bit-lib flag.\")\n  doc_special(\"..\", {\"a\", \"b\", \"...\"}, \"String concatenation operator; works the same as Lua but accepts more arguments.\")\n  local function native_comparator(op, _588_0, scope, parent)\n    local _589_ = _588_0\n    local _ = _589_[1]\n    local lhs_ast = _589_[2]\n    local rhs_ast = _589_[3]\n    local _590_ = compiler.compile1(lhs_ast, scope, parent, {nval = 1})\n    local lhs = _590_[1]\n    local _591_ = compiler.compile1(rhs_ast, scope, parent, {nval = 1})\n    local rhs = _591_[1]\n    return string.format(\"(%s %s %s)\", tostring(lhs), op, tostring(rhs))\n  end\n  local function idempotent_comparator(op, chain_op, ast, scope, parent)\n    local vals = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i = 2, #ast do\n        local val_19_ = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      vals = tbl_17_\n    end\n    local comparisons = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i = 1, (#vals - 1) do\n        local val_19_ = string.format(\"(%s %s %s)\", vals[i], op, vals[(i + 1)])\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      comparisons = tbl_17_\n    end\n    local chain = string.format(\" %s \", (chain_op or \"and\"))\n    return (\"(\" .. table.concat(comparisons, chain) .. \")\")\n  end\n  local function binding_comparator(op, chain_op, ast, scope, parent)\n    local binding_left = {}\n    local binding_right = {}\n    local vals = {}\n    local chain = string.format(\" %s \", (chain_op or \"and\"))\n    for i = 2, #ast do\n      local compiled = str1(compiler.compile1(ast[i], scope, parent, {nval = 1}))\n      if (utils[\"idempotent-expr?\"](ast[i]) or (i == 2) or (i == #ast)) then\n        table.insert(vals, compiled)\n      else\n        local my_sym = compiler.gensym(scope)\n        table.insert(binding_left, my_sym)\n        table.insert(binding_right, compiled)\n        table.insert(vals, my_sym)\n      end\n    end\n    compiler.emit(parent, string.format(\"local %s = %s\", table.concat(binding_left, \", \"), table.concat(binding_right, \", \"), ast))\n    local _595_\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i = 1, (#vals - 1) do\n        local val_19_ = string.format(\"(%s %s %s)\", vals[i], op, vals[(i + 1)])\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      _595_ = tbl_17_\n    end\n    return (\"(\" .. table.concat(_595_, chain) .. \")\")\n  end\n  local function define_comparator_special(name, _3flua_op, _3fchain_op)\n    do\n      local op = (_3flua_op or name)\n      local function opfn(ast, scope, parent)\n        compiler.assert((2 < #ast), \"expected at least two arguments\", ast)\n        local _597_0 = comparator_special_type(ast)\n        if (_597_0 == \"native\") then\n          return native_comparator(op, ast, scope, parent)\n        elseif (_597_0 == \"idempotent\") then\n          return idempotent_comparator(op, _3fchain_op, ast, scope, parent)\n        elseif (_597_0 == \"binding\") then\n          return binding_comparator(op, _3fchain_op, ast, scope, parent)\n        else\n          local _ = _597_0\n          return error(\"internal compiler error. please report this to the fennel devs.\")\n        end\n      end\n      SPECIALS[name] = opfn\n    end\n    return doc_special(name, {\"a\", \"b\", \"...\"}, \"Comparison operator; works the same as Lua but accepts more arguments.\")\n  end\n  define_comparator_special(\">\")\n  define_comparator_special(\"<\")\n  define_comparator_special(\">=\")\n  define_comparator_special(\"<=\")\n  define_comparator_special(\"=\", \"==\")\n  define_comparator_special(\"not=\", \"~=\", \"or\")\n  local function define_unary_special(op, _3frealop)\n    local function opfn(ast, scope, parent)\n      compiler.assert((#ast == 2), \"expected one argument\", ast)\n      local tail = compiler.compile1(ast[2], scope, parent, {nval = 1})\n      return ((_3frealop or op) .. str1(tail))\n    end\n    SPECIALS[op] = opfn\n    return nil\n  end\n  define_unary_special(\"not\", \"not \")\n  doc_special(\"not\", {\"x\"}, \"Logical operator; works the same as Lua.\")\n  define_unary_special(\"length\", \"#\")\n  doc_special(\"length\", {\"x\"}, \"Returns the length of a table or string.\")\n  SPECIALS[\"~=\"] = SPECIALS[\"not=\"]\n  SPECIALS[\"#\"] = SPECIALS.length\n  SPECIALS.quote = function(ast, scope, parent)\n    compiler.assert((#ast == 2), \"expected one argument\", ast)\n    local runtime, this_scope = true, scope\n    while this_scope do\n      this_scope = this_scope.parent\n      if (this_scope == compiler.scopes.compiler) then\n        runtime = false\n      end\n    end\n    return compiler[\"do-quote\"](ast[2], scope, parent, runtime)\n  end\n  doc_special(\"quote\", {\"x\"}, \"Quasiquote the following form. Only works in macro/compiler scope.\")\n  local macro_loaded = {}\n  local function safe_getmetatable(tbl)\n    local mt = getmetatable(tbl)\n    assert((mt ~= getmetatable(\"\")), \"Illegal metatable access!\")\n    return mt\n  end\n  local safe_require = nil\n  local function safe_compiler_env()\n    local _601_\n    do\n      local _600_0 = rawget(_G, \"utf8\")\n      if (nil ~= _600_0) then\n        _601_ = utils.copy(_600_0)\n      else\n        _601_ = _600_0\n      end\n    end\n    return {_VERSION = _VERSION, assert = assert, bit = rawget(_G, \"bit\"), error = error, getmetatable = safe_getmetatable, ipairs = ipairs, math = utils.copy(math), next = next, pairs = utils.stablepairs, pcall = pcall, print = print, rawequal = rawequal, rawget = rawget, rawlen = rawget(_G, \"rawlen\"), rawset = rawset, require = safe_require, select = select, setmetatable = setmetatable, string = utils.copy(string), table = utils.copy(table), tonumber = tonumber, tostring = tostring, type = type, utf8 = _601_, xpcall = xpcall}\n  end\n  local function combined_mt_pairs(env)\n    local combined = {}\n    local _603_ = getmetatable(env)\n    local __index = _603_[\"__index\"]\n    if (\"table\" == type(__index)) then\n      for k, v in pairs(__index) do\n        combined[k] = v\n      end\n    end\n    for k, v in next, env, nil do\n      combined[k] = v\n    end\n    return next, combined, nil\n  end\n  local function make_compiler_env(ast, scope, parent, _3fopts)\n    local provided = nil\n    do\n      local _605_0 = (_3fopts or utils.root.options)\n      if ((_G.type(_605_0) == \"table\") and (_605_0[\"compiler-env\"] == \"strict\")) then\n        provided = safe_compiler_env()\n      elseif ((_G.type(_605_0) == \"table\") and (nil ~= _605_0.compilerEnv)) then\n        local compilerEnv = _605_0.compilerEnv\n        provided = compilerEnv\n      elseif ((_G.type(_605_0) == \"table\") and (nil ~= _605_0[\"compiler-env\"])) then\n        local compiler_env = _605_0[\"compiler-env\"]\n        provided = compiler_env\n      else\n        local _ = _605_0\n        provided = safe_compiler_env()\n      end\n    end\n    local env = nil\n    local function _607_()\n      return compiler.scopes.macro\n    end\n    local function _608_(symbol)\n      compiler.assert(compiler.scopes.macro, \"must call from macro\", ast)\n      return compiler.scopes.macro.manglings[tostring(symbol)]\n    end\n    local function _609_(base)\n      return utils.sym(compiler.gensym((compiler.scopes.macro or scope), base))\n    end\n    local function _610_(form)\n      compiler.assert(compiler.scopes.macro, \"must call from macro\", ast)\n      return compiler.macroexpand(form, compiler.scopes.macro)\n    end\n    env = {[\"assert-compile\"] = compiler.assert, [\"ast-source\"] = utils[\"ast-source\"], [\"comment?\"] = utils[\"comment?\"], [\"fennel-module-name\"] = fennel_module_name, [\"get-scope\"] = _607_, [\"in-scope?\"] = _608_, [\"list?\"] = utils[\"list?\"], [\"macro-loaded\"] = macro_loaded, [\"multi-sym?\"] = utils[\"multi-sym?\"], [\"sequence?\"] = utils[\"sequence?\"], [\"sym?\"] = utils[\"sym?\"], [\"table?\"] = utils[\"table?\"], [\"varg?\"] = utils[\"varg?\"], _AST = ast, _CHUNK = parent, _IS_COMPILER = true, _SCOPE = scope, _SPECIALS = compiler.scopes.global.specials, _VARARG = utils.varg(), comment = utils.comment, gensym = _609_, list = utils.list, macroexpand = _610_, sequence = utils.sequence, sym = utils.sym, unpack = unpack, version = utils.version, view = view}\n    env._G = env\n    return setmetatable(env, {__index = provided, __newindex = provided, __pairs = combined_mt_pairs})\n  end\n  local function _611_(...)\n    local tbl_17_ = {}\n    local i_18_ = #tbl_17_\n    for c in string.gmatch((package.config or \"\"), \"([^\\n]+)\") do\n      local val_19_ = c\n      if (nil ~= val_19_) then\n        i_18_ = (i_18_ + 1)\n        tbl_17_[i_18_] = val_19_\n      end\n    end\n    return tbl_17_\n  end\n  local _613_ = _611_(...)\n  local dirsep = _613_[1]\n  local pathsep = _613_[2]\n  local pathmark = _613_[3]\n  local pkg_config = {dirsep = (dirsep or \"/\"), pathmark = (pathmark or \"?\"), pathsep = (pathsep or \";\")}\n  local function escapepat(str)\n    return string.gsub(str, \"[^%w]\", \"%%%1\")\n  end\n  local function search_module(modulename, _3fpathstring)\n    local pathsepesc = escapepat(pkg_config.pathsep)\n    local pattern = (\"([^%s]*)%s\"):format(pathsepesc, pathsepesc)\n    local no_dot_module = modulename:gsub(\"%.\", pkg_config.dirsep)\n    local fullpath = ((_3fpathstring or utils[\"fennel-module\"].path) .. pkg_config.pathsep)\n    local function try_path(path)\n      local filename = path:gsub(escapepat(pkg_config.pathmark), no_dot_module)\n      local filename2 = path:gsub(escapepat(pkg_config.pathmark), modulename)\n      local _614_0 = (io.open(filename) or io.open(filename2))\n      if (nil ~= _614_0) then\n        local file = _614_0\n        file:close()\n        return filename\n      else\n        local _ = _614_0\n        return nil, (\"no file '\" .. filename .. \"'\")\n      end\n    end\n    local function find_in_path(start, _3ftried_paths)\n      local _616_0 = fullpath:match(pattern, start)\n      if (nil ~= _616_0) then\n        local path = _616_0\n        local _617_0, _618_0 = try_path(path)\n        if (nil ~= _617_0) then\n          local filename = _617_0\n          return filename\n        elseif ((_617_0 == nil) and (nil ~= _618_0)) then\n          local error = _618_0\n          local function _620_()\n            local _619_0 = (_3ftried_paths or {})\n            table.insert(_619_0, error)\n            return _619_0\n          end\n          return find_in_path((start + #path + 1), _620_())\n        end\n      else\n        local _ = _616_0\n        local function _622_()\n          local tried_paths = table.concat((_3ftried_paths or {}), \"\\n\\9\")\n          if (_VERSION < \"Lua 5.4\") then\n            return (\"\\n\\9\" .. tried_paths)\n          else\n            return tried_paths\n          end\n        end\n        return nil, _622_()\n      end\n    end\n    return find_in_path(1)\n  end\n  local function make_searcher(_3foptions)\n    local function _625_(module_name)\n      local opts = utils.copy(utils.root.options)\n      for k, v in pairs((_3foptions or {})) do\n        opts[k] = v\n      end\n      opts[\"module-name\"] = module_name\n      local _626_0, _627_0 = search_module(module_name)\n      if (nil ~= _626_0) then\n        local filename = _626_0\n        local function _628_(...)\n          return utils[\"fennel-module\"].dofile(filename, opts, ...)\n        end\n        return _628_, filename\n      elseif ((_626_0 == nil) and (nil ~= _627_0)) then\n        local error = _627_0\n        return error\n      end\n    end\n    return _625_\n  end\n  local function dofile_with_searcher(fennel_macro_searcher, filename, opts, ...)\n    local searchers = (package.loaders or package.searchers or {})\n    local _ = table.insert(searchers, 1, fennel_macro_searcher)\n    local m = utils[\"fennel-module\"].dofile(filename, opts, ...)\n    table.remove(searchers, 1)\n    return m\n  end\n  local function fennel_macro_searcher(module_name)\n    local opts = nil\n    do\n      local _630_0 = utils.copy(utils.root.options)\n      _630_0[\"module-name\"] = module_name\n      _630_0[\"env\"] = \"_COMPILER\"\n      _630_0[\"requireAsInclude\"] = false\n      _630_0[\"allowedGlobals\"] = nil\n      opts = _630_0\n    end\n    local _631_0 = search_module(module_name, utils[\"fennel-module\"][\"macro-path\"])\n    if (nil ~= _631_0) then\n      local filename = _631_0\n      local _632_\n      if (opts[\"compiler-env\"] == _G) then\n        local function _633_(...)\n          return dofile_with_searcher(fennel_macro_searcher, filename, opts, ...)\n        end\n        _632_ = _633_\n      else\n        local function _634_(...)\n          return utils[\"fennel-module\"].dofile(filename, opts, ...)\n        end\n        _632_ = _634_\n      end\n      return _632_, filename\n    end\n  end\n  local function lua_macro_searcher(module_name)\n    local _637_0 = search_module(module_name, package.path)\n    if (nil ~= _637_0) then\n      local filename = _637_0\n      local code = nil\n      do\n        local f = io.open(filename)\n        local function close_handlers_10_(ok_11_, ...)\n          f:close()\n          if ok_11_ then\n            return ...\n          else\n            return error(..., 0)\n          end\n        end\n        local function _639_()\n          return assert(f:read(\"*a\"))\n        end\n        code = close_handlers_10_(_G.xpcall(_639_, (package.loaded.fennel or debug).traceback))\n      end\n      local chunk = load_code(code, make_compiler_env(), filename)\n      return chunk, filename\n    end\n  end\n  local macro_searchers = {fennel_macro_searcher, lua_macro_searcher}\n  local function search_macro_module(modname, n)\n    local _641_0 = macro_searchers[n]\n    if (nil ~= _641_0) then\n      local f = _641_0\n      local _642_0, _643_0 = f(modname)\n      if ((nil ~= _642_0) and true) then\n        local loader = _642_0\n        local _3ffilename = _643_0\n        return loader, _3ffilename\n      else\n        local _ = _642_0\n        return search_macro_module(modname, (n + 1))\n      end\n    end\n  end\n  local function sandbox_fennel_module(modname)\n    if ((modname == \"fennel.macros\") or (package and package.loaded and (\"table\" == type(package.loaded[modname])) and (package.loaded[modname].metadata == compiler.metadata))) then\n      local function _646_(_, ...)\n        return (compiler.metadata):setall(...)\n      end\n      return {metadata = {setall = _646_}, view = view}\n    end\n  end\n  local function _648_(modname)\n    local function _649_()\n      local loader, filename = search_macro_module(modname, 1)\n      compiler.assert(loader, (modname .. \" module not found.\"))\n      macro_loaded[modname] = loader(modname, filename)\n      return macro_loaded[modname]\n    end\n    return (macro_loaded[modname] or sandbox_fennel_module(modname) or _649_())\n  end\n  safe_require = _648_\n  local function add_macros(macros_2a, ast, scope)\n    compiler.assert(utils[\"table?\"](macros_2a), \"expected macros to be table\", ast)\n    for k, v in pairs(macros_2a) do\n      compiler.assert((type(v) == \"function\"), \"expected each macro to be function\", ast)\n      compiler[\"check-binding-valid\"](utils.sym(k), scope, ast, {[\"macro?\"] = true})\n      scope.macros[k] = v\n    end\n    return nil\n  end\n  local function resolve_module_name(_650_0, _scope, _parent, opts)\n    local _651_ = _650_0\n    local second = _651_[2]\n    local filename = _651_[\"filename\"]\n    local filename0 = (filename or (utils[\"table?\"](second) and second.filename))\n    local module_name = utils.root.options[\"module-name\"]\n    local modexpr = compiler.compile(second, opts)\n    local modname_chunk = load_code(modexpr)\n    return modname_chunk(module_name, filename0)\n  end\n  SPECIALS[\"require-macros\"] = function(ast, scope, parent, _3freal_ast)\n    compiler.assert((#ast == 2), \"Expected one module name argument\", (_3freal_ast or ast))\n    local modname = resolve_module_name(ast, scope, parent, {})\n    compiler.assert(utils[\"string?\"](modname), \"module name must compile to string\", (_3freal_ast or ast))\n    if not macro_loaded[modname] then\n      local loader, filename = search_macro_module(modname, 1)\n      compiler.assert(loader, (modname .. \" module not found.\"), ast)\n      macro_loaded[modname] = compiler.assert(utils[\"table?\"](loader(modname, filename)), \"expected macros to be table\", (_3freal_ast or ast))\n    end\n    if (\"import-macros\" == str1(ast)) then\n      return macro_loaded[modname]\n    else\n      return add_macros(macro_loaded[modname], ast, scope)\n    end\n  end\n  doc_special(\"require-macros\", {\"macro-module-name\"}, \"Load given module and use its contents as macro definitions in current scope.\\nDeprecated.\")\n  local function emit_included_fennel(src, path, opts, sub_chunk)\n    local subscope = compiler[\"make-scope\"](utils.root.scope.parent)\n    local forms = {}\n    if utils.root.options.requireAsInclude then\n      subscope.specials.require = compiler[\"require-include\"]\n    end\n    for _, val in parser.parser(parser[\"string-stream\"](src), path) do\n      table.insert(forms, val)\n    end\n    for i = 1, #forms do\n      local subopts = nil\n      if (i == #forms) then\n        subopts = {tail = true}\n      else\n        subopts = {nval = 0}\n      end\n      utils[\"propagate-options\"](opts, subopts)\n      compiler.compile1(forms[i], subscope, sub_chunk, subopts)\n    end\n    return nil\n  end\n  local function include_path(ast, opts, path, mod, fennel_3f)\n    utils.root.scope.includes[mod] = \"fnl/loading\"\n    local src = nil\n    do\n      local f = assert(io.open(path))\n      local function close_handlers_10_(ok_11_, ...)\n        f:close()\n        if ok_11_ then\n          return ...\n        else\n          return error(..., 0)\n        end\n      end\n      local function _657_()\n        return assert(f:read(\"*all\")):gsub(\"[\\13\\n]*$\", \"\")\n      end\n      src = close_handlers_10_(_G.xpcall(_657_, (package.loaded.fennel or debug).traceback))\n    end\n    local ret = utils.expr((\"require(\\\"\" .. mod .. \"\\\")\"), \"statement\")\n    local target = (\"package.preload[%q]\"):format(mod)\n    local preload_str = (target .. \" = \" .. target .. \" or function(...)\")\n    local temp_chunk, sub_chunk = {}, {}\n    compiler.emit(temp_chunk, preload_str, ast)\n    compiler.emit(temp_chunk, sub_chunk)\n    compiler.emit(temp_chunk, \"end\", ast)\n    for _, v in ipairs(temp_chunk) do\n      table.insert(utils.root.chunk, v)\n    end\n    if fennel_3f then\n      emit_included_fennel(src, path, opts, sub_chunk)\n    else\n      compiler.emit(sub_chunk, src, ast)\n    end\n    utils.root.scope.includes[mod] = ret\n    return ret\n  end\n  local function include_circular_fallback(mod, modexpr, fallback, ast)\n    if (utils.root.scope.includes[mod] == \"fnl/loading\") then\n      compiler.assert(fallback, \"circular include detected\", ast)\n      return fallback(modexpr)\n    end\n  end\n  SPECIALS.include = function(ast, scope, parent, opts)\n    compiler.assert((#ast == 2), \"expected one argument\", ast)\n    local modexpr = nil\n    do\n      local _660_0, _661_0 = pcall(resolve_module_name, ast, scope, parent, opts)\n      if ((_660_0 == true) and (nil ~= _661_0)) then\n        local modname = _661_0\n        modexpr = utils.expr(string.format(\"%q\", modname), \"literal\")\n      else\n        local _ = _660_0\n        modexpr = compiler.compile1(ast[2], scope, parent, {nval = 1})[1]\n      end\n    end\n    if ((modexpr.type ~= \"literal\") or ((modexpr[1]):byte() ~= 34)) then\n      if opts.fallback then\n        return opts.fallback(modexpr)\n      else\n        return compiler.assert(false, \"module name must be string literal\", ast)\n      end\n    else\n      local mod = load_code((\"return \" .. modexpr[1]))()\n      local oldmod = utils.root.options[\"module-name\"]\n      local _ = nil\n      utils.root.options[\"module-name\"] = mod\n      _ = nil\n      local res = nil\n      local function _665_()\n        local _664_0 = search_module(mod)\n        if (nil ~= _664_0) then\n          local fennel_path = _664_0\n          return include_path(ast, opts, fennel_path, mod, true)\n        else\n          local _0 = _664_0\n          local lua_path = search_module(mod, package.path)\n          if lua_path then\n            return include_path(ast, opts, lua_path, mod, false)\n          elseif opts.fallback then\n            return opts.fallback(modexpr)\n          else\n            return compiler.assert(false, (\"module not found \" .. mod), ast)\n          end\n        end\n      end\n      res = ((utils[\"member?\"](mod, (utils.root.options.skipInclude or {})) and opts.fallback(modexpr, true)) or include_circular_fallback(mod, modexpr, opts.fallback, ast) or utils.root.scope.includes[mod] or _665_())\n      utils.root.options[\"module-name\"] = oldmod\n      return res\n    end\n  end\n  doc_special(\"include\", {\"module-name-literal\"}, \"Like require but load the target module during compilation and embed it in the\\nLua output. The module must be a string literal and resolvable at compile time.\")\n  local function eval_compiler_2a(ast, scope, parent)\n    local env = make_compiler_env(ast, scope, parent)\n    local opts = utils.copy(utils.root.options)\n    opts.scope = compiler[\"make-scope\"](compiler.scopes.compiler)\n    opts.allowedGlobals = current_global_names(env)\n    return assert(load_code(compiler.compile(ast, opts), wrap_env(env)))(opts[\"module-name\"], ast.filename)\n  end\n  SPECIALS.macros = function(ast, scope, parent)\n    compiler.assert((#ast == 2), \"Expected one table argument\", ast)\n    local macro_tbl = eval_compiler_2a(ast[2], scope, parent)\n    compiler.assert(utils[\"table?\"](macro_tbl), \"Expected one table argument\", ast)\n    return add_macros(macro_tbl, ast, scope)\n  end\n  doc_special(\"macros\", {\"{:macro-name-1 (fn [...] ...) ... :macro-name-N macro-body-N}\"}, \"Define all functions in the given table as macros local to the current scope.\")\n  SPECIALS[\"tail!\"] = function(ast, scope, parent, opts)\n    compiler.assert((#ast == 2), \"Expected one argument\", ast)\n    local call = utils[\"list?\"](compiler.macroexpand(ast[2], scope))\n    local callee = tostring((call and utils[\"sym?\"](call[1])))\n    compiler.assert((call and not scope.specials[callee]), \"Expected a function call as argument\", ast)\n    compiler.assert(opts.tail, \"Must be in tail position\", ast)\n    return compiler.compile1(call, scope, parent, opts)\n  end\n  doc_special(\"tail!\", {\"body\"}, \"Assert that the body being called is in tail position.\")\n  SPECIALS[\"pick-values\"] = function(ast, scope, parent)\n    local n = ast[2]\n    local vals = utils.list(utils.sym(\"values\"), unpack(ast, 3))\n    compiler.assert(((\"number\" == type(n)) and (0 <= n) and (n == math.floor(n))), (\"Expected n to be an integer >= 0, got \" .. tostring(n)))\n    if (1 == n) then\n      local _669_ = compiler.compile1(vals, scope, parent, {nval = 1})\n      local _670_ = _669_[1]\n      local expr = _670_[1]\n      return {(\"(\" .. expr .. \")\")}\n    elseif (0 == n) then\n      for i = 3, #ast do\n        compiler[\"keep-side-effects\"](compiler.compile1(ast[i], scope, parent, {nval = 0}), parent, nil, ast[i])\n      end\n      return {}\n    else\n      local syms = nil\n      do\n        local tbl_17_ = utils.list()\n        local i_18_ = #tbl_17_\n        for _ = 1, n do\n          local val_19_ = utils.sym(compiler.gensym(scope, \"pv\"))\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        syms = tbl_17_\n      end\n      compiler.destructure(syms, vals, ast, scope, parent, {declaration = true, nomulti = true, noundef = true, symtype = \"pv\"})\n      return syms\n    end\n  end\n  doc_special(\"pick-values\", {\"n\", \"...\"}, \"Evaluate to exactly n values.\\n\\nFor example,\\n  (pick-values 2 ...)\\nexpands to\\n  (let [(_0_ _1_) ...]\\n    (values _0_ _1_))\")\n  SPECIALS[\"eval-compiler\"] = function(ast, scope, parent)\n    local old_first = ast[1]\n    ast[1] = utils.sym(\"do\")\n    local val = eval_compiler_2a(ast, scope, parent)\n    ast[1] = old_first\n    return val\n  end\n  doc_special(\"eval-compiler\", {\"...\"}, \"Evaluate the body at compile-time. Use the macro system instead if possible.\", true)\n  SPECIALS.unquote = function(ast)\n    return compiler.assert(false, \"tried to use unquote outside quote\", ast)\n  end\n  doc_special(\"unquote\", {\"...\"}, \"Evaluate the argument even if it's in a quoted form.\")\n  return {[\"current-global-names\"] = current_global_names, [\"get-function-metadata\"] = get_function_metadata, [\"load-code\"] = load_code, [\"macro-loaded\"] = macro_loaded, [\"macro-searchers\"] = macro_searchers, [\"make-compiler-env\"] = make_compiler_env, [\"make-searcher\"] = make_searcher, [\"search-module\"] = search_module, [\"wrap-env\"] = wrap_env, doc = doc_2a}\nend\npackage.preload[\"fennel.compiler\"] = package.preload[\"fennel.compiler\"] or function(...)\n  local utils = require(\"fennel.utils\")\n  local parser = require(\"fennel.parser\")\n  local friend = require(\"fennel.friend\")\n  local unpack = (table.unpack or _G.unpack)\n  local scopes = {compiler = nil, global = nil, macro = nil}\n  local function make_scope(_3fparent)\n    local parent = (_3fparent or scopes.global)\n    local _265_\n    if parent then\n      _265_ = ((parent.depth or 0) + 1)\n    else\n      _265_ = 0\n    end\n    return {[\"gensym-base\"] = setmetatable({}, {__index = (parent and parent[\"gensym-base\"])}), autogensyms = setmetatable({}, {__index = (parent and parent.autogensyms)}), depth = _265_, gensyms = setmetatable({}, {__index = (parent and parent.gensyms)}), hashfn = (parent and parent.hashfn), includes = setmetatable({}, {__index = (parent and parent.includes)}), macros = setmetatable({}, {__index = (parent and parent.macros)}), manglings = setmetatable({}, {__index = (parent and parent.manglings)}), parent = parent, refedglobals = {}, specials = setmetatable({}, {__index = (parent and parent.specials)}), symmeta = setmetatable({}, {__index = (parent and parent.symmeta)}), unmanglings = setmetatable({}, {__index = (parent and parent.unmanglings)}), vararg = (parent and parent.vararg)}\n  end\n  local function assert_msg(ast, msg)\n    local ast_tbl = nil\n    if (\"table\" == type(ast)) then\n      ast_tbl = ast\n    else\n      ast_tbl = {}\n    end\n    local m = getmetatable(ast)\n    local filename = ((m and m.filename) or ast_tbl.filename or \"unknown\")\n    local line = ((m and m.line) or ast_tbl.line or \"?\")\n    local col = ((m and m.col) or ast_tbl.col or \"?\")\n    local target = tostring((utils[\"sym?\"](ast_tbl[1]) or ast_tbl[1] or \"()\"))\n    return string.format(\"%s:%s:%s: Compile error in '%s': %s\", filename, line, col, target, msg)\n  end\n  local function assert_compile(condition, msg, ast, _3ffallback_ast)\n    if not condition then\n      local _268_ = (utils.root.options or {})\n      local error_pinpoint = _268_[\"error-pinpoint\"]\n      local source = _268_[\"source\"]\n      local unfriendly = _268_[\"unfriendly\"]\n      local ast0 = nil\n      if next(utils[\"ast-source\"](ast)) then\n        ast0 = ast\n      else\n        ast0 = (_3ffallback_ast or {})\n      end\n      if (nil == utils.hook(\"assert-compile\", condition, msg, ast0, utils.root.reset)) then\n        utils.root.reset()\n        if unfriendly then\n          error(assert_msg(ast0, msg), 0)\n        else\n          friend[\"assert-compile\"](condition, msg, ast0, source, {[\"error-pinpoint\"] = error_pinpoint})\n        end\n      end\n    end\n    return condition\n  end\n  scopes.global = make_scope()\n  scopes.global.vararg = true\n  scopes.compiler = make_scope(scopes.global)\n  scopes.macro = scopes.global\n  local function serialize_string(str)\n    local function _273_(_241)\n      return (\"\\\\\" .. _241:byte())\n    end\n    return string.gsub(string.gsub(string.gsub(string.format(\"%q\", str), \"\\\\\\n\", \"\\\\n\"), \"\\\\9\", \"\\\\t\"), \"[\\128-\\255]\", _273_)\n  end\n  local function global_mangling(str)\n    if utils[\"valid-lua-identifier?\"](str) then\n      return str\n    else\n      local function _274_(_241)\n        return string.format(\"_%02x\", _241:byte())\n      end\n      return (\"__fnl_global__\" .. str:gsub(\"[^%w]\", _274_))\n    end\n  end\n  local function global_unmangling(identifier)\n    local _276_0 = string.match(identifier, \"^__fnl_global__(.*)$\")\n    if (nil ~= _276_0) then\n      local rest = _276_0\n      local _277_0 = nil\n      local function _278_(_241)\n        return string.char(tonumber(_241:sub(2), 16))\n      end\n      _277_0 = string.gsub(rest, \"_[%da-f][%da-f]\", _278_)\n      return _277_0\n    else\n      local _ = _276_0\n      return identifier\n    end\n  end\n  local allowed_globals = nil\n  local function global_allowed_3f(name)\n    return (not allowed_globals or utils[\"member?\"](name, allowed_globals))\n  end\n  local function unique_mangling(original, mangling, scope, append)\n    if scope.unmanglings[mangling] then\n      return unique_mangling(original, (original .. append), scope, (append + 1))\n    else\n      return mangling\n    end\n  end\n  local function apply_deferred_scope_changes(scope, deferred_scope_changes, ast)\n    for raw, mangled in pairs(deferred_scope_changes.manglings) do\n      assert_compile(not scope.refedglobals[mangled], (\"use of global \" .. raw .. \" is aliased by a local\"), ast)\n      scope.manglings[raw] = mangled\n    end\n    for raw, symmeta in pairs(deferred_scope_changes.symmeta) do\n      scope.symmeta[raw] = symmeta\n    end\n    return nil\n  end\n  local function combine_parts(parts, scope)\n    local ret = (scope.manglings[parts[1]] or global_mangling(parts[1]))\n    for i = 2, #parts do\n      if utils[\"valid-lua-identifier?\"](parts[i]) then\n        if (parts[\"multi-sym-method-call\"] and (i == #parts)) then\n          ret = (ret .. \":\" .. parts[i])\n        else\n          ret = (ret .. \".\" .. parts[i])\n        end\n      else\n        ret = (ret .. \"[\" .. serialize_string(parts[i]) .. \"]\")\n      end\n    end\n    return ret\n  end\n  local function root_scope(scope)\n    return ((utils.root and utils.root.scope) or (scope.parent and root_scope(scope.parent)) or scope)\n  end\n  local function next_append(root_scope_2a)\n    root_scope_2a[\"gensym-append\"] = ((root_scope_2a[\"gensym-append\"] or 0) + 1)\n    return (\"_\" .. root_scope_2a[\"gensym-append\"] .. \"_\")\n  end\n  local function gensym(scope, _3fbase, _3fsuffix)\n    local root_scope_2a = root_scope(scope)\n    local mangling = ((_3fbase or \"\") .. next_append(root_scope_2a) .. (_3fsuffix or \"\"))\n    while scope.unmanglings[mangling] do\n      mangling = ((_3fbase or \"\") .. next_append(root_scope_2a) .. (_3fsuffix or \"\"))\n    end\n    if (_3fbase and (0 < #_3fbase)) then\n      scope[\"gensym-base\"][mangling] = _3fbase\n    end\n    scope.gensyms[mangling] = true\n    return mangling\n  end\n  local function combine_auto_gensym(parts, first)\n    parts[1] = first\n    local last = table.remove(parts)\n    local last2 = table.remove(parts)\n    local last_joiner = ((parts[\"multi-sym-method-call\"] and \":\") or \".\")\n    table.insert(parts, (last2 .. last_joiner .. last))\n    return table.concat(parts, \".\")\n  end\n  local function autogensym(base, scope)\n    local _284_0 = utils[\"multi-sym?\"](base)\n    if (nil ~= _284_0) then\n      local parts = _284_0\n      return combine_auto_gensym(parts, autogensym(parts[1], scope))\n    else\n      local _ = _284_0\n      local function _285_()\n        local mangling = gensym(scope, base:sub(1, -2), \"auto\")\n        scope.autogensyms[base] = mangling\n        return mangling\n      end\n      return (scope.autogensyms[base] or _285_())\n    end\n  end\n  local function check_binding_valid(symbol, scope, ast, _3fopts)\n    local name = tostring(symbol)\n    local macro_3f = nil\n    do\n      local _287_0 = _3fopts\n      if (nil ~= _287_0) then\n        _287_0 = _287_0[\"macro?\"]\n      end\n      macro_3f = _287_0\n    end\n    assert_compile((\"&\" ~= name:match(\"[&.:]\")), \"invalid character: &\", symbol)\n    assert_compile(not name:find(\"^%.\"), \"invalid character: .\", symbol)\n    assert_compile(not (scope.specials[name] or (not macro_3f and scope.macros[name])), (\"local %s was overshadowed by a special form or macro\"):format(name), ast)\n    return assert_compile(not utils[\"quoted?\"](symbol), string.format(\"macro tried to bind %s without gensym\", name), symbol)\n  end\n  local function declare_local(symbol, scope, ast, _3fvar_3f, _3fdeferred_scope_changes)\n    check_binding_valid(symbol, scope, ast)\n    assert_compile(not utils[\"multi-sym?\"](symbol), (\"unexpected multi symbol \" .. tostring(symbol)), ast)\n    local str = tostring(symbol)\n    local raw = nil\n    if (utils[\"lua-keyword?\"](str) or str:match(\"^%d\")) then\n      raw = (\"_\" .. str)\n    else\n      raw = str\n    end\n    local mangling = nil\n    local function _290_(_241)\n      return string.format(\"_%02x\", _241:byte())\n    end\n    mangling = string.gsub(string.gsub(raw, \"-\", \"_\"), \"[^%w_]\", _290_)\n    local unique = unique_mangling(mangling, mangling, scope, 0)\n    scope.unmanglings[unique] = (scope[\"gensym-base\"][str] or str)\n    do\n      local target = (_3fdeferred_scope_changes or scope)\n      target.manglings[str] = unique\n      target.symmeta[str] = {symbol = symbol, var = _3fvar_3f}\n    end\n    return unique\n  end\n  local function hashfn_arg_name(name, multi_sym_parts, scope)\n    if not scope.hashfn then\n      return nil\n    elseif (name == \"$\") then\n      return \"$1\"\n    elseif multi_sym_parts then\n      if (multi_sym_parts and (multi_sym_parts[1] == \"$\")) then\n        multi_sym_parts[1] = \"$1\"\n      end\n      return table.concat(multi_sym_parts, \".\")\n    end\n  end\n  local function symbol_to_expression(symbol, scope, _3freference_3f)\n    utils.hook(\"symbol-to-expression\", symbol, scope, _3freference_3f)\n    local name = symbol[1]\n    local multi_sym_parts = utils[\"multi-sym?\"](name)\n    local name0 = (hashfn_arg_name(name, multi_sym_parts, scope) or name)\n    local parts = (multi_sym_parts or {name0})\n    local etype = (((1 < #parts) and \"expression\") or \"sym\")\n    local local_3f = scope.manglings[parts[1]]\n    if (local_3f and scope.symmeta[parts[1]]) then\n      scope.symmeta[parts[1]][\"used\"] = true\n      symbol.referent = scope.symmeta[parts[1]].symbol\n    end\n    assert_compile(not scope.macros[parts[1]], \"tried to reference a macro without calling it\", symbol)\n    assert_compile((not scope.specials[parts[1]] or (\"require\" == parts[1])), \"tried to reference a special form without calling it\", symbol)\n    assert_compile((not _3freference_3f or local_3f or (\"_ENV\" == parts[1]) or global_allowed_3f(parts[1])), (\"unknown identifier: \" .. tostring(parts[1])), symbol)\n    if (allowed_globals and not local_3f and scope.parent) then\n      scope.parent.refedglobals[parts[1]] = true\n    end\n    return utils.expr(combine_parts(parts, scope), etype)\n  end\n  local function emit(chunk, out, _3fast)\n    if (type(out) == \"table\") then\n      return table.insert(chunk, out)\n    else\n      return table.insert(chunk, {ast = _3fast, leaf = out})\n    end\n  end\n  local function peephole(chunk)\n    if chunk.leaf then\n      return chunk\n    elseif ((3 <= #chunk) and (chunk[(#chunk - 2)].leaf == \"do\") and not chunk[(#chunk - 1)].leaf and (chunk[#chunk].leaf == \"end\")) then\n      local kid = peephole(chunk[(#chunk - 1)])\n      local new_chunk = {ast = chunk.ast}\n      for i = 1, (#chunk - 3) do\n        table.insert(new_chunk, peephole(chunk[i]))\n      end\n      for i = 1, #kid do\n        table.insert(new_chunk, kid[i])\n      end\n      return new_chunk\n    else\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, x in ipairs(chunk) do\n        local val_19_ = peephole(x)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      return tbl_17_\n    end\n  end\n  local function flatten_chunk_correlated(main_chunk, options)\n    local function flatten(chunk, out, last_line, file)\n      local last_line0 = last_line\n      if chunk.leaf then\n        out[last_line0] = ((out[last_line0] or \"\") .. \" \" .. chunk.leaf)\n      else\n        for _, subchunk in ipairs(chunk) do\n          if (subchunk.leaf or next(subchunk)) then\n            local source = utils[\"ast-source\"](subchunk.ast)\n            if (file == source.filename) then\n              last_line0 = math.max(last_line0, (source.line or 0))\n            end\n            last_line0 = flatten(subchunk, out, last_line0, file)\n          end\n        end\n      end\n      return last_line0\n    end\n    local out = {}\n    local last = flatten(main_chunk, out, 1, options.filename)\n    for i = 1, last do\n      if (out[i] == nil) then\n        out[i] = \"\"\n      end\n    end\n    return table.concat(out, \"\\n\")\n  end\n  local function flatten_chunk(file_sourcemap, chunk, tab, depth)\n    if chunk.leaf then\n      local _302_ = utils[\"ast-source\"](chunk.ast)\n      local endline = _302_[\"endline\"]\n      local filename = _302_[\"filename\"]\n      local line = _302_[\"line\"]\n      if (\"end\" == chunk.leaf) then\n        table.insert(file_sourcemap, {filename, (endline or line)})\n      else\n        table.insert(file_sourcemap, {filename, line})\n      end\n      return chunk.leaf\n    else\n      local tab0 = nil\n      do\n        local _304_0 = tab\n        if (_304_0 == true) then\n          tab0 = \"  \"\n        elseif (_304_0 == false) then\n          tab0 = \"\"\n        elseif (nil ~= _304_0) then\n          local tab1 = _304_0\n          tab0 = tab1\n        elseif (_304_0 == nil) then\n          tab0 = \"\"\n        else\n        tab0 = nil\n        end\n      end\n      local _306_\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, c in ipairs(chunk) do\n          local val_19_ = nil\n          if (c.leaf or next(c)) then\n            local sub = flatten_chunk(file_sourcemap, c, tab0, (depth + 1))\n            if (0 < depth) then\n              val_19_ = (tab0 .. sub:gsub(\"\\n\", (\"\\n\" .. tab0)))\n            else\n              val_19_ = sub\n            end\n          else\n          val_19_ = nil\n          end\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        _306_ = tbl_17_\n      end\n      return table.concat(_306_, \"\\n\")\n    end\n  end\n  local sourcemap = {}\n  local function make_short_src(source)\n    local source0 = source:gsub(\"\\n\", \" \")\n    if (#source0 <= 49) then\n      return (\"[fennel \\\"\" .. source0 .. \"\\\"]\")\n    else\n      return (\"[fennel \\\"\" .. source0:sub(1, 46) .. \"...\\\"]\")\n    end\n  end\n  local function flatten(chunk, options)\n    local chunk0 = peephole(chunk)\n    if options.correlate then\n      return flatten_chunk_correlated(chunk0, options), {}\n    else\n      local file_sourcemap = {}\n      local src = flatten_chunk(file_sourcemap, chunk0, options.indent, 0)\n      file_sourcemap.short_src = (options.filename or make_short_src((options.source or src)))\n      if options.filename then\n        file_sourcemap.key = (\"@\" .. options.filename)\n      else\n        file_sourcemap.key = src\n      end\n      sourcemap[file_sourcemap.key] = file_sourcemap\n      return src, file_sourcemap\n    end\n  end\n  local function make_metadata()\n    local function _314_(self, tgt, _3fkey)\n      if self[tgt] then\n        if (nil ~= _3fkey) then\n          return self[tgt][_3fkey]\n        else\n          return self[tgt]\n        end\n      end\n    end\n    local function _317_(self, tgt, key, value)\n      self[tgt] = (self[tgt] or {})\n      self[tgt][key] = value\n      return tgt\n    end\n    local function _318_(self, tgt, ...)\n      local kv_len = select(\"#\", ...)\n      local kvs = {...}\n      if ((kv_len % 2) ~= 0) then\n        error(\"metadata:setall() expected even number of k/v pairs\")\n      end\n      self[tgt] = (self[tgt] or {})\n      for i = 1, kv_len, 2 do\n        self[tgt][kvs[i]] = kvs[(i + 1)]\n      end\n      return tgt\n    end\n    return setmetatable({}, {__index = {get = _314_, set = _317_, setall = _318_}, __mode = \"k\"})\n  end\n  local function exprs1(exprs)\n    local _320_\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, e in ipairs(exprs) do\n        local val_19_ = tostring(e)\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      _320_ = tbl_17_\n    end\n    return table.concat(_320_, \", \")\n  end\n  local function keep_side_effects(exprs, chunk, _3fstart, ast)\n    for j = (_3fstart or 1), #exprs do\n      local subexp = exprs[j]\n      if ((subexp.type == \"expression\") and (subexp[1] ~= \"nil\")) then\n        emit(chunk, (\"do local _ = %s end\"):format(tostring(subexp)), ast)\n      elseif (subexp.type == \"statement\") then\n        local code = tostring(subexp)\n        local disambiguated = nil\n        if (code:byte() == 40) then\n          disambiguated = (\"do end \" .. code)\n        else\n          disambiguated = code\n        end\n        emit(chunk, disambiguated, ast)\n      end\n    end\n    return nil\n  end\n  local function handle_compile_opts(exprs, parent, opts, ast)\n    if opts.nval then\n      local n = opts.nval\n      local len = #exprs\n      if (n ~= len) then\n        if (n < len) then\n          keep_side_effects(exprs, parent, (n + 1), ast)\n          for i = (n + 1), len do\n            exprs[i] = nil\n          end\n        else\n          for i = (#exprs + 1), n do\n            exprs[i] = utils.expr(\"nil\", \"literal\")\n          end\n        end\n      end\n    end\n    if opts.tail then\n      emit(parent, string.format(\"return %s\", exprs1(exprs)), ast)\n    end\n    if opts.target then\n      local result = exprs1(exprs)\n      local function _328_()\n        if (result == \"\") then\n          return \"nil\"\n        else\n          return result\n        end\n      end\n      emit(parent, string.format(\"%s = %s\", opts.target, _328_()), ast)\n    end\n    if (opts.tail or opts.target) then\n      return {returned = true}\n    else\n      exprs[\"returned\"] = true\n      return exprs\n    end\n  end\n  local function find_macro(ast, scope)\n    local macro_2a = nil\n    do\n      local _331_0 = utils[\"sym?\"](ast[1])\n      if (_331_0 ~= nil) then\n        local _332_0 = tostring(_331_0)\n        if (_332_0 ~= nil) then\n          macro_2a = scope.macros[_332_0]\n        else\n          macro_2a = _332_0\n        end\n      else\n        macro_2a = _331_0\n      end\n    end\n    local multi_sym_parts = utils[\"multi-sym?\"](ast[1])\n    if (not macro_2a and multi_sym_parts) then\n      local nested_macro = utils[\"get-in\"](scope.macros, multi_sym_parts)\n      assert_compile((not scope.macros[multi_sym_parts[1]] or (type(nested_macro) == \"function\")), \"macro not found in imported macro module\", ast)\n      return nested_macro\n    else\n      return macro_2a\n    end\n  end\n  local function propagate_trace_info(_336_0, _index, node)\n    local _337_ = _336_0\n    local byteend = _337_[\"byteend\"]\n    local bytestart = _337_[\"bytestart\"]\n    local filename = _337_[\"filename\"]\n    local line = _337_[\"line\"]\n    do\n      local src = utils[\"ast-source\"](node)\n      if ((\"table\" == type(node)) and (filename ~= src.filename)) then\n        src.filename, src.line, src[\"from-macro?\"] = filename, line, true\n        src.bytestart, src.byteend = bytestart, byteend\n      end\n    end\n    return (\"table\" == type(node))\n  end\n  local function quote_literal_nils(index, node, parent)\n    if (parent and utils[\"list?\"](parent)) then\n      for i = 1, utils.maxn(parent) do\n        local _339_0 = parent[i]\n        if (_339_0 == nil) then\n          parent[i] = utils.sym(\"nil\")\n        end\n      end\n    end\n    return index, node, parent\n  end\n  local function built_in_3f(m)\n    local found_3f = false\n    for _, f in pairs(scopes.global.macros) do\n      if found_3f then break end\n      found_3f = (f == m)\n    end\n    return found_3f\n  end\n  local function macroexpand_2a(ast, scope, _3fonce)\n    local _342_0 = nil\n    if utils[\"list?\"](ast) then\n      _342_0 = find_macro(ast, scope)\n    else\n    _342_0 = nil\n    end\n    if (_342_0 == false) then\n      return ast\n    elseif (nil ~= _342_0) then\n      local macro_2a = _342_0\n      local old_scope = scopes.macro\n      local _ = nil\n      scopes.macro = scope\n      _ = nil\n      local ok, transformed = nil, nil\n      local function _344_()\n        return macro_2a(unpack(ast, 2))\n      end\n      local function _345_()\n        if built_in_3f(macro_2a) then\n          return tostring\n        else\n          return debug.traceback\n        end\n      end\n      ok, transformed = xpcall(_344_, _345_())\n      local function _346_(...)\n        return propagate_trace_info(ast, quote_literal_nils(...))\n      end\n      utils[\"walk-tree\"](transformed, _346_)\n      scopes.macro = old_scope\n      assert_compile(ok, transformed, ast)\n      utils.hook(\"macroexpand\", ast, transformed, scope)\n      if (_3fonce or not transformed) then\n        return transformed\n      else\n        return macroexpand_2a(transformed, scope)\n      end\n    else\n      local _ = _342_0\n      return ast\n    end\n  end\n  local function compile_special(ast, scope, parent, opts, special)\n    local exprs = (special(ast, scope, parent, opts) or utils.expr(\"nil\", \"literal\"))\n    local exprs0 = nil\n    if (\"table\" ~= type(exprs)) then\n      exprs0 = utils.expr(exprs, \"expression\")\n    else\n      exprs0 = exprs\n    end\n    local exprs2 = nil\n    if utils[\"expr?\"](exprs0) then\n      exprs2 = {exprs0}\n    else\n      exprs2 = exprs0\n    end\n    if not exprs2.returned then\n      return handle_compile_opts(exprs2, parent, opts, ast)\n    elseif (opts.tail or opts.target) then\n      return {returned = true}\n    else\n      return exprs2\n    end\n  end\n  local function callable_3f(_352_0, ctype, callee)\n    local _353_ = _352_0\n    local call_ast = _353_[1]\n    if (\"literal\" == ctype) then\n      return (\"\\\"\" == string.sub(callee, 1, 1))\n    else\n      return (utils[\"sym?\"](call_ast) or utils[\"list?\"](call_ast))\n    end\n  end\n  local function compile_function_call(ast, scope, parent, opts, compile1, len)\n    local _355_ = compile1(ast[1], scope, parent, {nval = 1})[1]\n    local callee = _355_[1]\n    local ctype = _355_[\"type\"]\n    local fargs = {}\n    assert_compile(callable_3f(ast, ctype, callee), (\"cannot call literal value \" .. tostring(ast[1])), ast)\n    for i = 2, len do\n      local subexprs = nil\n      local _356_\n      if (i ~= len) then\n        _356_ = 1\n      else\n      _356_ = nil\n      end\n      subexprs = compile1(ast[i], scope, parent, {nval = _356_})\n      table.insert(fargs, subexprs[1])\n      if (i == len) then\n        for j = 2, #subexprs do\n          table.insert(fargs, subexprs[j])\n        end\n      else\n        keep_side_effects(subexprs, parent, 2, ast[i])\n      end\n    end\n    local pat = nil\n    if (\"literal\" == ctype) then\n      pat = \"(%s)(%s)\"\n    else\n      pat = \"%s(%s)\"\n    end\n    local call = string.format(pat, tostring(callee), exprs1(fargs))\n    return handle_compile_opts({utils.expr(call, \"statement\")}, parent, opts, ast)\n  end\n  local function compile_call(ast, scope, parent, opts, compile1)\n    utils.hook(\"call\", ast, scope)\n    local len = #ast\n    local first = ast[1]\n    local multi_sym_parts = utils[\"multi-sym?\"](first)\n    local special = (utils[\"sym?\"](first) and scope.specials[tostring(first)])\n    assert_compile((0 < len), \"expected a function, macro, or special to call\", ast)\n    if special then\n      return compile_special(ast, scope, parent, opts, special)\n    elseif (multi_sym_parts and multi_sym_parts[\"multi-sym-method-call\"]) then\n      local table_with_method = table.concat({unpack(multi_sym_parts, 1, (#multi_sym_parts - 1))}, \".\")\n      local method_to_call = multi_sym_parts[#multi_sym_parts]\n      local new_ast = utils.list(utils.sym(\":\", ast), utils.sym(table_with_method, ast), method_to_call, select(2, unpack(ast)))\n      return compile1(new_ast, scope, parent, opts)\n    else\n      return compile_function_call(ast, scope, parent, opts, compile1, len)\n    end\n  end\n  local function compile_varg(ast, scope, parent, opts)\n    local _361_\n    if scope.hashfn then\n      _361_ = \"use $... in hashfn\"\n    else\n      _361_ = \"unexpected vararg\"\n    end\n    assert_compile(scope.vararg, _361_, ast)\n    return handle_compile_opts({utils.expr(\"...\", \"varg\")}, parent, opts, ast)\n  end\n  local function compile_sym(ast, scope, parent, opts)\n    local multi_sym_parts = utils[\"multi-sym?\"](ast)\n    assert_compile(not (multi_sym_parts and multi_sym_parts[\"multi-sym-method-call\"]), \"multisym method calls may only be in call position\", ast)\n    local e = nil\n    if (ast[1] == \"nil\") then\n      e = utils.expr(\"nil\", \"literal\")\n    else\n      e = symbol_to_expression(ast, scope, true)\n    end\n    return handle_compile_opts({e}, parent, opts, ast)\n  end\n  local function serialize_number(n)\n    local _364_0 = string.gsub(tostring(n), \",\", \".\")\n    return _364_0\n  end\n  local function compile_scalar(ast, _scope, parent, opts)\n    local serialize = nil\n    do\n      local _365_0 = type(ast)\n      if (_365_0 == \"nil\") then\n        serialize = tostring\n      elseif (_365_0 == \"boolean\") then\n        serialize = tostring\n      elseif (_365_0 == \"string\") then\n        serialize = serialize_string\n      elseif (_365_0 == \"number\") then\n        serialize = serialize_number\n      else\n      serialize = nil\n      end\n    end\n    return handle_compile_opts({utils.expr(serialize(ast), \"literal\")}, parent, opts)\n  end\n  local function compile_table(ast, scope, parent, opts, compile1)\n    local function escape_key(k)\n      if ((type(k) == \"string\") and utils[\"valid-lua-identifier?\"](k)) then\n        return k\n      else\n        local _367_ = compile1(k, scope, parent, {nval = 1})\n        local compiled = _367_[1]\n        return (\"[\" .. tostring(compiled) .. \"]\")\n      end\n    end\n    local keys = {}\n    local buffer = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i, elem in ipairs(ast) do\n        local val_19_ = nil\n        do\n          local nval = ((nil ~= ast[(i + 1)]) and 1)\n          keys[i] = true\n          val_19_ = exprs1(compile1(elem, scope, parent, {nval = nval}))\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      buffer = tbl_17_\n    end\n    do\n      local tbl_17_ = buffer\n      local i_18_ = #tbl_17_\n      for k in utils.stablepairs(ast) do\n        local val_19_ = nil\n        if not keys[k] then\n          local _370_ = compile1(ast[k], scope, parent, {nval = 1})\n          local v = _370_[1]\n          val_19_ = string.format(\"%s = %s\", escape_key(k), tostring(v))\n        else\n        val_19_ = nil\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n    end\n    return handle_compile_opts({utils.expr((\"{\" .. table.concat(buffer, \", \") .. \"}\"), \"expression\")}, parent, opts, ast)\n  end\n  local function compile1(ast, scope, parent, _3fopts)\n    local opts = (_3fopts or {})\n    local ast0 = macroexpand_2a(ast, scope)\n    if utils[\"list?\"](ast0) then\n      return compile_call(ast0, scope, parent, opts, compile1)\n    elseif utils[\"varg?\"](ast0) then\n      return compile_varg(ast0, scope, parent, opts)\n    elseif utils[\"sym?\"](ast0) then\n      return compile_sym(ast0, scope, parent, opts)\n    elseif (type(ast0) == \"table\") then\n      return compile_table(ast0, scope, parent, opts, compile1)\n    elseif ((type(ast0) == \"nil\") or (type(ast0) == \"boolean\") or (type(ast0) == \"number\") or (type(ast0) == \"string\")) then\n      return compile_scalar(ast0, scope, parent, opts)\n    else\n      return assert_compile(false, (\"could not compile value of type \" .. type(ast0)), ast0)\n    end\n  end\n  local function destructure(to, from, ast, scope, parent, opts)\n    local opts0 = (opts or {})\n    local _374_ = opts0\n    local declaration = _374_[\"declaration\"]\n    local forceglobal = _374_[\"forceglobal\"]\n    local forceset = _374_[\"forceset\"]\n    local isvar = _374_[\"isvar\"]\n    local symtype = _374_[\"symtype\"]\n    local symtype0 = (\"_\" .. (symtype or \"dst\"))\n    local setter = nil\n    if declaration then\n      setter = \"local %s = %s\"\n    else\n      setter = \"%s = %s\"\n    end\n    local deferred_scope_changes = {manglings = {}, symmeta = {}}\n    local function getname(symbol, ast0)\n      local raw = symbol[1]\n      assert_compile(not (opts0.nomulti and utils[\"multi-sym?\"](raw)), (\"unexpected multi symbol \" .. raw), ast0)\n      if declaration then\n        return declare_local(symbol, scope, symbol, isvar, deferred_scope_changes)\n      else\n        local parts = (utils[\"multi-sym?\"](raw) or {raw})\n        local _376_ = parts\n        local first = _376_[1]\n        local meta = scope.symmeta[first]\n        assert_compile(not raw:find(\":\"), \"cannot set method sym\", symbol)\n        if ((#parts == 1) and not forceset) then\n          assert_compile(not (forceglobal and meta), string.format(\"global %s conflicts with local\", tostring(symbol)), symbol)\n          assert_compile(not (meta and not meta.var), (\"expected var \" .. raw), symbol)\n        end\n        assert_compile((meta or not opts0.noundef or (scope.hashfn and (\"$\" == first)) or global_allowed_3f(first)), (\"expected local \" .. first), symbol)\n        if forceglobal then\n          assert_compile(not scope.symmeta[scope.unmanglings[raw]], (\"global \" .. raw .. \" conflicts with local\"), symbol)\n          scope.manglings[raw] = global_mangling(raw)\n          scope.unmanglings[global_mangling(raw)] = raw\n          if allowed_globals then\n            table.insert(allowed_globals, raw)\n          end\n        end\n        return symbol_to_expression(symbol, scope)[1]\n      end\n    end\n    local function compile_top_target(lvalues)\n      local inits = nil\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, l in ipairs(lvalues) do\n          local val_19_ = nil\n          if scope.manglings[l] then\n            val_19_ = l\n          else\n            val_19_ = \"nil\"\n          end\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        inits = tbl_17_\n      end\n      local init = table.concat(inits, \", \")\n      local lvalue = table.concat(lvalues, \", \")\n      local plast = parent[#parent]\n      local plen = #parent\n      local ret = compile1(from, scope, parent, {target = lvalue})\n      if declaration then\n        for pi = plen, #parent do\n          if (parent[pi] == plast) then\n            plen = pi\n          end\n        end\n        if ((#parent == (plen + 1)) and parent[#parent].leaf) then\n          parent[#parent][\"leaf\"] = (\"local \" .. parent[#parent].leaf)\n        elseif (init == \"nil\") then\n          table.insert(parent, (plen + 1), {ast = ast, leaf = (\"local \" .. lvalue)})\n        else\n          table.insert(parent, (plen + 1), {ast = ast, leaf = (\"local \" .. lvalue .. \" = \" .. init)})\n        end\n      end\n      return ret\n    end\n    local function destructure_sym(left, rightexprs, up1, top_3f)\n      local lname = getname(left, up1)\n      check_binding_valid(left, scope, left)\n      if top_3f then\n        return compile_top_target({lname})\n      else\n        return emit(parent, setter:format(lname, exprs1(rightexprs)), left)\n      end\n    end\n    local function dynamic_set_target(_387_0)\n      local _388_ = _387_0\n      local _ = _388_[1]\n      local target = _388_[2]\n      local keys = {(table.unpack or unpack)(_388_, 3)}\n      assert_compile(utils[\"sym?\"](target), \"dynamic set needs symbol target\", ast)\n      assert_compile(scope.manglings[tostring(target)], (\"unknown identifier: \" .. tostring(target)), target)\n      local keys0 = nil\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _0, k in ipairs(keys) do\n          local val_19_ = tostring(compile1(k, scope, parent, {nval = 1})[1])\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        keys0 = tbl_17_\n      end\n      return string.format(\"%s[%s]\", tostring(symbol_to_expression(target, scope, true)), table.concat(keys0, \"][\"))\n    end\n    local function destructure_values(left, rightexprs, up1, destructure1, top_3f)\n      local left_names, tables = {}, {}\n      for i, name in ipairs(left) do\n        if utils[\"sym?\"](name) then\n          table.insert(left_names, getname(name, up1))\n        elseif utils[\"call-of?\"](name, \".\") then\n          table.insert(left_names, dynamic_set_target(name))\n        else\n          local symname = gensym(scope, symtype0)\n          table.insert(left_names, symname)\n          tables[i] = {name, utils.expr(symname, \"sym\")}\n        end\n      end\n      assert_compile(left[1], \"must provide at least one value\", left)\n      if top_3f then\n        compile_top_target(left_names)\n      elseif utils[\"expr?\"](rightexprs) then\n        emit(parent, setter:format(table.concat(left_names, \",\"), exprs1(rightexprs)), left)\n      else\n        local names = table.concat(left_names, \",\")\n        local target = nil\n        if declaration then\n          target = (\"local \" .. names)\n        else\n          target = names\n        end\n        emit(parent, compile1(rightexprs, scope, parent, {target = target}), left)\n      end\n      for _, pair in utils.stablepairs(tables) do\n        destructure1(pair[1], {pair[2]}, left)\n      end\n      return nil\n    end\n    local unpack_fn = \"function (t, k, e)\\n                        local mt = getmetatable(t)\\n                        if 'table' == type(mt) and mt.__fennelrest then\\n                          return mt.__fennelrest(t, k)\\n                        elseif e then\\n                          local rest = {}\\n                          for k, v in pairs(t) do\\n                            if not e[k] then rest[k] = v end\\n                          end\\n                          return rest\\n                        else\\n                          return {(table.unpack or unpack)(t, k)}\\n                        end\\n                      end\"\n    local function destructure_kv_rest(s, v, left, excluded_keys, destructure1)\n      local exclude_str = nil\n      local _393_\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, k in ipairs(excluded_keys) do\n          local val_19_ = string.format(\"[%s] = true\", serialize_string(k))\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        _393_ = tbl_17_\n      end\n      exclude_str = table.concat(_393_, \", \")\n      local subexpr = utils.expr(string.format(string.gsub((\"(\" .. unpack_fn .. \")(%s, %s, {%s})\"), \"\\n%s*\", \" \"), s, tostring(v), exclude_str), \"expression\")\n      return destructure1(v, {subexpr}, left)\n    end\n    local function destructure_rest(s, k, left, destructure1)\n      local unpack_str = (\"(\" .. unpack_fn .. \")(%s, %s)\")\n      local formatted = string.format(string.gsub(unpack_str, \"\\n%s*\", \" \"), s, k)\n      local subexpr = utils.expr(formatted, \"expression\")\n      local function _395_()\n        local next_symbol = left[(k + 2)]\n        return ((nil == next_symbol) or utils[\"sym?\"](next_symbol, \"&as\"))\n      end\n      assert_compile((utils[\"sequence?\"](left) and _395_()), \"expected rest argument before last parameter\", left)\n      return destructure1(left[(k + 1)], {subexpr}, left)\n    end\n    local function optimize_table_destructure_3f(left, right)\n      local function _396_()\n        local all = next(left)\n        for _, d in ipairs(left) do\n          if not all then break end\n          all = ((utils[\"sym?\"](d) and not tostring(d):find(\"^&\")) or (utils[\"list?\"](d) and utils[\"sym?\"](d[1], \".\")))\n        end\n        return all\n      end\n      return (utils[\"sequence?\"](left) and utils[\"sequence?\"](right) and _396_())\n    end\n    local function destructure_table(left, rightexprs, top_3f, destructure1, up1)\n      if optimize_table_destructure_3f(left, rightexprs) then\n        return destructure_values(utils.list(unpack(left)), utils.list(utils.sym(\"values\"), unpack(rightexprs)), up1, destructure1)\n      else\n        local right = nil\n        do\n          local _397_0 = nil\n          if top_3f then\n            _397_0 = exprs1(compile1(from, scope, parent))\n          else\n            _397_0 = exprs1(rightexprs)\n          end\n          if (_397_0 == \"\") then\n            right = \"nil\"\n          elseif (nil ~= _397_0) then\n            local right0 = _397_0\n            right = right0\n          else\n          right = nil\n          end\n        end\n        local s = nil\n        if utils[\"sym?\"](rightexprs) then\n          s = right\n        else\n          s = gensym(scope, symtype0)\n        end\n        local excluded_keys = {}\n        if not utils[\"sym?\"](rightexprs) then\n          emit(parent, string.format(\"local %s = %s\", s, right), left)\n        end\n        for k, v in utils.stablepairs(left) do\n          if not ((\"number\" == type(k)) and tostring(left[(k - 1)]):find(\"^&\")) then\n            if (utils[\"sym?\"](k) and (tostring(k) == \"&\")) then\n              destructure_kv_rest(s, v, left, excluded_keys, destructure1)\n            elseif (utils[\"sym?\"](v) and (tostring(v) == \"&\")) then\n              destructure_rest(s, k, left, destructure1)\n            elseif (utils[\"sym?\"](k) and (tostring(k) == \"&as\")) then\n              destructure_sym(v, {utils.expr(tostring(s))}, left)\n            elseif (utils[\"sequence?\"](left) and (tostring(v) == \"&as\")) then\n              local _, next_sym, trailing = select(k, unpack(left))\n              assert_compile((nil == trailing), \"expected &as argument before last parameter\", left)\n              destructure_sym(next_sym, {utils.expr(tostring(s))}, left)\n            else\n              local key = nil\n              if (type(k) == \"string\") then\n                key = serialize_string(k)\n              else\n                key = k\n              end\n              local subexpr = utils.expr((\"%s[%s]\"):format(s, key), \"expression\")\n              if (type(k) == \"string\") then\n                table.insert(excluded_keys, k)\n              end\n              destructure1(v, subexpr, left)\n            end\n          end\n        end\n        return nil\n      end\n    end\n    local function destructure1(left, rightexprs, up1, top_3f)\n      if (utils[\"sym?\"](left) and (left[1] ~= \"nil\")) then\n        destructure_sym(left, rightexprs, up1, top_3f)\n      elseif utils[\"table?\"](left) then\n        destructure_table(left, rightexprs, top_3f, destructure1, up1)\n      elseif utils[\"call-of?\"](left, \".\") then\n        destructure_values({left}, rightexprs, up1, destructure1)\n      elseif utils[\"list?\"](left) then\n        assert_compile(top_3f, \"can't nest multi-value destructuring\", left)\n        destructure_values(left, rightexprs, up1, destructure1, true)\n      else\n        assert_compile(false, string.format(\"unable to bind %s %s\", type(left), tostring(left)), (((type(up1[2]) == \"table\") and up1[2]) or up1))\n      end\n      return (top_3f and {returned = true})\n    end\n    local ret = destructure1(to, from, ast, true)\n    utils.hook(\"destructure\", from, to, scope, opts0)\n    apply_deferred_scope_changes(scope, deferred_scope_changes, ast)\n    return ret\n  end\n  local function require_include(ast, scope, parent, opts)\n    opts.fallback = function(e, no_warn)\n      if not no_warn then\n        utils.warn((\"include module not found, falling back to require: %s\"):format(tostring(e)), ast)\n      end\n      return utils.expr(string.format(\"require(%s)\", tostring(e)), \"statement\")\n    end\n    return scopes.global.specials.include(ast, scope, parent, opts)\n  end\n  local function opts_for_compile(options)\n    local opts = utils.copy(options)\n    opts.indent = (opts.indent or \"  \")\n    allowed_globals = opts.allowedGlobals\n    return opts\n  end\n  local function compile_asts(asts, options)\n    local old_globals = allowed_globals\n    local opts = opts_for_compile(options)\n    local scope = (opts.scope or make_scope(scopes.global))\n    local chunk = {}\n    if opts.requireAsInclude then\n      scope.specials.require = require_include\n    end\n    if opts.assertAsRepl then\n      scope.macros.assert = scope.macros[\"assert-repl\"]\n    end\n    local _411_ = utils.root\n    _411_[\"set-reset\"](_411_)\n    utils.root.chunk, utils.root.scope, utils.root.options = chunk, scope, opts\n    for i = 1, #asts do\n      local exprs = compile1(asts[i], scope, chunk, {nval = (((i < #asts) and 0) or nil), tail = (i == #asts)})\n      keep_side_effects(exprs, chunk, nil, asts[i])\n      if (i == #asts) then\n        utils.hook(\"chunk\", asts[i], scope)\n      end\n    end\n    allowed_globals = old_globals\n    utils.root.reset()\n    return flatten(chunk, opts)\n  end\n  local function compile_stream(stream, _3fopts)\n    local opts = (_3fopts or {})\n    local asts = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for _, ast in parser.parser(stream, opts.filename, opts) do\n        local val_19_ = ast\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      asts = tbl_17_\n    end\n    return compile_asts(asts, opts)\n  end\n  local function compile_string(str, _3fopts)\n    return compile_stream(parser[\"string-stream\"](str, _3fopts), _3fopts)\n  end\n  local function compile(from, _3fopts)\n    local _414_0 = type(from)\n    if (_414_0 == \"userdata\") then\n      local function _415_()\n        local _416_0 = from:read(1)\n        if (nil ~= _416_0) then\n          return _416_0:byte()\n        else\n          return _416_0\n        end\n      end\n      return compile_stream(_415_, _3fopts)\n    elseif (_414_0 == \"function\") then\n      return compile_stream(from, _3fopts)\n    else\n      local _ = _414_0\n      return compile_asts({from}, _3fopts)\n    end\n  end\n  local function traceback_frame(info)\n    if ((info.what == \"C\") and info.name) then\n      return string.format(\"\\9[C]: in function '%s'\", info.name)\n    elseif (info.what == \"C\") then\n      return \"\\9[C]: in ?\"\n    else\n      local remap = sourcemap[info.source]\n      if (remap and remap[info.currentline]) then\n        if ((remap[info.currentline][1] or \"unknown\") ~= \"unknown\") then\n          info.short_src = sourcemap[(\"@\" .. remap[info.currentline][1])].short_src\n        else\n          info.short_src = remap.short_src\n        end\n        info.currentline = (remap[info.currentline][2] or -1)\n      end\n      if (info.what == \"Lua\") then\n        local function _421_()\n          if info.name then\n            return (\"'\" .. info.name .. \"'\")\n          else\n            return \"?\"\n          end\n        end\n        return string.format(\"\\9%s:%d: in function %s\", info.short_src, info.currentline, _421_())\n      elseif (info.short_src == \"(tail call)\") then\n        return \"  (tail call)\"\n      else\n        return string.format(\"\\9%s:%d: in main chunk\", info.short_src, info.currentline)\n      end\n    end\n  end\n  local lua_getinfo = debug.getinfo\n  local function traceback(_3fmsg, _3fstart)\n    local msg = tostring((_3fmsg or \"\"))\n    if ((msg:find(\"^%g+:%d+:%d+ Compile error:.*\") or msg:find(\"^%g+:%d+:%d+ Parse error:.*\")) and not utils[\"debug-on?\"](\"trace\")) then\n      return msg\n    else\n      local lines = {}\n      if (msg:find(\"^%g+:%d+:%d+ Compile error:\") or msg:find(\"^%g+:%d+:%d+ Parse error:\")) then\n        table.insert(lines, msg)\n      else\n        local newmsg = msg:gsub(\"^[^:]*:%d+:%s+\", \"runtime error: \")\n        table.insert(lines, newmsg)\n      end\n      table.insert(lines, \"stack traceback:\")\n      local done_3f, level = false, (_3fstart or 2)\n      while not done_3f do\n        do\n          local _425_0 = lua_getinfo(level, \"Sln\")\n          if (_425_0 == nil) then\n            done_3f = true\n          elseif (nil ~= _425_0) then\n            local info = _425_0\n            table.insert(lines, traceback_frame(info))\n          end\n        end\n        level = (level + 1)\n      end\n      return table.concat(lines, \"\\n\")\n    end\n  end\n  local function getinfo(thread_or_level, ...)\n    local thread_or_level0 = nil\n    if (\"number\" == type(thread_or_level)) then\n      thread_or_level0 = (1 + thread_or_level)\n    else\n      thread_or_level0 = thread_or_level\n    end\n    local info = lua_getinfo(thread_or_level0, ...)\n    local mapped = (info and sourcemap[info.source])\n    if mapped then\n      for _, key in ipairs({\"currentline\", \"linedefined\", \"lastlinedefined\"}) do\n        local mapped_value = nil\n        do\n          local _429_0 = mapped\n          if (nil ~= _429_0) then\n            _429_0 = _429_0[info[key]]\n          end\n          if (nil ~= _429_0) then\n            _429_0 = _429_0[2]\n          end\n          mapped_value = _429_0\n        end\n        if (info[key] and mapped_value) then\n          info[key] = mapped_value\n        end\n      end\n      if info.activelines then\n        local tbl_14_ = {}\n        for line in pairs(info.activelines) do\n          local k_15_, v_16_ = mapped[line][2], true\n          if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n            tbl_14_[k_15_] = v_16_\n          end\n        end\n        info.activelines = tbl_14_\n      end\n      if (info.what == \"Lua\") then\n        info.what = \"Fennel\"\n      end\n    end\n    return info\n  end\n  local function mixed_concat(t, joiner)\n    local seen = {}\n    local ret, s = \"\", \"\"\n    for k, v in ipairs(t) do\n      table.insert(seen, k)\n      ret = (ret .. s .. v)\n      s = joiner\n    end\n    for k, v in utils.stablepairs(t) do\n      if not seen[k] then\n        ret = (ret .. s .. \"[\" .. k .. \"]\" .. \"=\" .. v)\n        s = joiner\n      end\n    end\n    return ret\n  end\n  local function do_quote(form, scope, parent, runtime_3f)\n    local function quote_all(form0, discard_non_numbers)\n      local tbl_14_ = {}\n      for k, v in utils.stablepairs(form0) do\n        local k_15_, v_16_ = nil, nil\n        if (type(k) == \"number\") then\n          k_15_, v_16_ = k, do_quote(v, scope, parent, runtime_3f)\n        elseif not discard_non_numbers then\n          k_15_, v_16_ = do_quote(k, scope, parent, runtime_3f), do_quote(v, scope, parent, runtime_3f)\n        else\n        k_15_, v_16_ = nil\n        end\n        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n          tbl_14_[k_15_] = v_16_\n        end\n      end\n      return tbl_14_\n    end\n    if utils[\"varg?\"](form) then\n      assert_compile(not runtime_3f, \"quoted ... may only be used at compile time\", form)\n      return \"_VARARG\"\n    elseif utils[\"sym?\"](form) then\n      local filename = nil\n      if form.filename then\n        filename = string.format(\"%q\", form.filename)\n      else\n        filename = \"nil\"\n      end\n      local symstr = tostring(form)\n      assert_compile(not runtime_3f, \"symbols may only be used at compile time\", form)\n      if (symstr:find(\"#$\") or symstr:find(\"#[:.]\")) then\n        return string.format(\"sym('%s', {filename=%s, line=%s})\", autogensym(symstr, scope), filename, (form.line or \"nil\"))\n      else\n        return string.format(\"sym('%s', {quoted=true, filename=%s, line=%s})\", symstr, filename, (form.line or \"nil\"))\n      end\n    elseif utils[\"call-of?\"](form, \"unquote\") then\n      local res = unpack(compile1(form[2], scope, parent))\n      return res[1]\n    elseif utils[\"list?\"](form) then\n      local mapped = quote_all(form, true)\n      local filename = nil\n      if form.filename then\n        filename = string.format(\"%q\", form.filename)\n      else\n        filename = \"nil\"\n      end\n      assert_compile(not runtime_3f, \"lists may only be used at compile time\", form)\n      return string.format((\"setmetatable({filename=%s, line=%s, bytestart=%s, %s}\" .. \", getmetatable(list()))\"), filename, (form.line or \"nil\"), (form.bytestart or \"nil\"), mixed_concat(mapped, \", \"))\n    elseif utils[\"sequence?\"](form) then\n      local mapped = quote_all(form)\n      local source = getmetatable(form)\n      local filename = nil\n      if source.filename then\n        filename = string.format(\"%q\", source.filename)\n      else\n        filename = \"nil\"\n      end\n      local _444_\n      if source then\n        _444_ = source.line\n      else\n        _444_ = \"nil\"\n      end\n      return string.format(\"setmetatable({%s}, {filename=%s, line=%s, sequence=%s})\", mixed_concat(mapped, \", \"), filename, _444_, \"(getmetatable(sequence()))['sequence']\")\n    elseif (type(form) == \"table\") then\n      local mapped = quote_all(form)\n      local source = getmetatable(form)\n      local filename = nil\n      if source.filename then\n        filename = string.format(\"%q\", source.filename)\n      else\n        filename = \"nil\"\n      end\n      local function _447_()\n        if source then\n          return source.line\n        else\n          return \"nil\"\n        end\n      end\n      return string.format(\"setmetatable({%s}, {filename=%s, line=%s})\", mixed_concat(mapped, \", \"), filename, _447_())\n    elseif (type(form) == \"string\") then\n      return serialize_string(form)\n    else\n      return tostring(form)\n    end\n  end\n  return {[\"apply-deferred-scope-changes\"] = apply_deferred_scope_changes, [\"check-binding-valid\"] = check_binding_valid, [\"compile-stream\"] = compile_stream, [\"compile-string\"] = compile_string, [\"declare-local\"] = declare_local, [\"do-quote\"] = do_quote, [\"global-allowed?\"] = global_allowed_3f, [\"global-mangling\"] = global_mangling, [\"global-unmangling\"] = global_unmangling, [\"keep-side-effects\"] = keep_side_effects, [\"make-scope\"] = make_scope, [\"require-include\"] = require_include, [\"symbol-to-expression\"] = symbol_to_expression, assert = assert_compile, autogensym = autogensym, compile = compile, compile1 = compile1, destructure = destructure, emit = emit, gensym = gensym, getinfo = getinfo, macroexpand = macroexpand_2a, metadata = make_metadata(), scopes = scopes, sourcemap = sourcemap, traceback = traceback}\nend\npackage.preload[\"fennel.friend\"] = package.preload[\"fennel.friend\"] or function(...)\n  local utils = require(\"fennel.utils\")\n  local utf8_ok_3f, utf8 = pcall(require, \"utf8\")\n  local suggestions = {[\"$ and $... in hashfn are mutually exclusive\"] = {\"modifying the hashfn so it only contains $... or $, $1, $2, $3, etc\"}, [\"can't introduce (.*) here\"] = {\"declaring the local at the top-level\"}, [\"can't start multisym segment with a digit\"] = {\"removing the digit\", \"adding a non-digit before the digit\"}, [\"cannot call literal value\"] = {\"checking for typos\", \"checking for a missing function name\", \"making sure to use prefix operators, not infix\"}, [\"could not compile value of type \"] = {\"debugging the macro you're calling to return a list or table\"}, [\"could not read number (.*)\"] = {\"removing the non-digit character\", \"beginning the identifier with a non-digit if it is not meant to be a number\"}, [\"expected a function.* to call\"] = {\"removing the empty parentheses\", \"using square brackets if you want an empty table\"}, [\"expected at least one pattern/body pair\"] = {\"adding a pattern and a body to execute when the pattern matches\"}, [\"expected binding and iterator\"] = {\"making sure you haven't omitted a local name or iterator\"}, [\"expected binding sequence\"] = {\"placing a table here in square brackets containing identifiers to bind\"}, [\"expected body expression\"] = {\"putting some code in the body of this form after the bindings\"}, [\"expected each macro to be function\"] = {\"ensuring that the value for each key in your macros table contains a function\", \"avoid defining nested macro tables\"}, [\"expected even number of name/value bindings\"] = {\"finding where the identifier or value is missing\"}, [\"expected even number of pattern/body pairs\"] = {\"checking that every pattern has a body to go with it\", \"adding _ before the final body\"}, [\"expected even number of values in table literal\"] = {\"removing a key\", \"adding a value\"}, [\"expected local\"] = {\"looking for a typo\", \"looking for a local which is used out of its scope\"}, [\"expected macros to be table\"] = {\"ensuring your macro definitions return a table\"}, [\"expected parameters\"] = {\"adding function parameters as a list of identifiers in brackets\"}, [\"expected range to include start and stop\"] = {\"adding missing arguments\"}, [\"expected rest argument before last parameter\"] = {\"moving & to right before the final identifier when destructuring\"}, [\"expected symbol for function parameter: (.*)\"] = {\"changing %s to an identifier instead of a literal value\"}, [\"expected var (.*)\"] = {\"declaring %s using var instead of let/local\", \"introducing a new local instead of changing the value of %s\"}, [\"expected vararg as last parameter\"] = {\"moving the \\\"...\\\" to the end of the parameter list\"}, [\"expected whitespace before opening delimiter\"] = {\"adding whitespace\"}, [\"global (.*) conflicts with local\"] = {\"renaming local %s\"}, [\"invalid character: (.)\"] = {\"deleting or replacing %s\", \"avoiding reserved characters like \\\", \\\\, ', ~, ;, @, `, and comma\"}, [\"local (.*) was overshadowed by a special form or macro\"] = {\"renaming local %s\"}, [\"macro not found in macro module\"] = {\"checking the keys of the imported macro module's returned table\"}, [\"macro tried to bind (.*) without gensym\"] = {\"changing to %s# when introducing identifiers inside macros\"}, [\"malformed multisym\"] = {\"ensuring each period or colon is not followed by another period or colon\"}, [\"may only be used at compile time\"] = {\"moving this to inside a macro if you need to manipulate symbols/lists\", \"using square brackets instead of parens to construct a table\"}, [\"method must be last component\"] = {\"using a period instead of a colon for field access\", \"removing segments after the colon\", \"making the method call, then looking up the field on the result\"}, [\"mismatched closing delimiter (.), expected (.)\"] = {\"replacing %s with %s\", \"deleting %s\", \"adding matching opening delimiter earlier\"}, [\"missing subject\"] = {\"adding an item to operate on\"}, [\"multisym method calls may only be in call position\"] = {\"using a period instead of a colon to reference a table's fields\", \"putting parens around this\"}, [\"tried to reference a macro without calling it\"] = {\"renaming the macro so as not to conflict with locals\"}, [\"tried to reference a special form without calling it\"] = {\"making sure to use prefix operators, not infix\", \"wrapping the special in a function if you need it to be first class\"}, [\"tried to use unquote outside quote\"] = {\"moving the form to inside a quoted form\", \"removing the comma\"}, [\"tried to use vararg with operator\"] = {\"accumulating over the operands\"}, [\"unable to bind (.*)\"] = {\"replacing the %s with an identifier\"}, [\"unexpected arguments\"] = {\"removing an argument\", \"checking for typos\"}, [\"unexpected closing delimiter (.)\"] = {\"deleting %s\", \"adding matching opening delimiter earlier\"}, [\"unexpected iterator clause\"] = {\"removing an argument\", \"checking for typos\"}, [\"unexpected multi symbol (.*)\"] = {\"removing periods or colons from %s\"}, [\"unexpected vararg\"] = {\"putting \\\"...\\\" at the end of the fn parameters if the vararg was intended\"}, [\"unknown identifier: (.*)\"] = {\"looking to see if there's a typo\", \"using the _G table instead, eg. _G.%s if you really want a global\", \"moving this code to somewhere that %s is in scope\", \"binding %s as a local in the scope of this code\"}, [\"unused local (.*)\"] = {\"renaming the local to _%s if it is meant to be unused\", \"fixing a typo so %s is used\", \"disabling the linter which checks for unused locals\"}, [\"use of global (.*) is aliased by a local\"] = {\"renaming local %s\", \"refer to the global using _G.%s instead of directly\"}}\n  local unpack = (table.unpack or _G.unpack)\n  local function suggest(msg)\n    local s = nil\n    for pat, sug in pairs(suggestions) do\n      if s then break end\n      local matches = {msg:match(pat)}\n      if next(matches) then\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, s0 in ipairs(sug) do\n          local val_19_ = s0:format(unpack(matches))\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        s = tbl_17_\n      else\n      s = nil\n      end\n    end\n    return s\n  end\n  local function read_line(filename, line, _3fsource)\n    if _3fsource then\n      local matcher = string.gmatch((_3fsource .. \"\\n\"), \"(.-)(\\13?\\n)\")\n      for _ = 2, line do\n        matcher()\n      end\n      return matcher()\n    else\n      local f = assert(_G.io.open(filename))\n      local function close_handlers_10_(ok_11_, ...)\n        f:close()\n        if ok_11_ then\n          return ...\n        else\n          return error(..., 0)\n        end\n      end\n      local function _181_()\n        for _ = 2, line do\n          f:read()\n        end\n        return f:read()\n      end\n      return close_handlers_10_(_G.xpcall(_181_, (package.loaded.fennel or debug).traceback))\n    end\n  end\n  local function sub(str, start, _end)\n    if ((_end < start) or (#str < start)) then\n      return \"\"\n    elseif utf8_ok_3f then\n      return string.sub(str, utf8.offset(str, start), ((utf8.offset(str, (_end + 1)) or (utf8.len(str) + 1)) - 1))\n    else\n      return string.sub(str, start, math.min(_end, str:len()))\n    end\n  end\n  local function highlight_line(codeline, col, _3fendcol, opts)\n    if ((opts and (false == opts[\"error-pinpoint\"])) or (os and os.getenv and os.getenv(\"NO_COLOR\"))) then\n      return codeline\n    else\n      local _184_ = (opts or {})\n      local error_pinpoint = _184_[\"error-pinpoint\"]\n      local endcol = (_3fendcol or col)\n      local eol = nil\n      if utf8_ok_3f then\n        eol = utf8.len(codeline)\n      else\n        eol = string.len(codeline)\n      end\n      local _186_ = (error_pinpoint or {\"\\27[7m\", \"\\27[0m\"})\n      local open = _186_[1]\n      local close = _186_[2]\n      return (sub(codeline, 1, col) .. open .. sub(codeline, (col + 1), (endcol + 1)) .. close .. sub(codeline, (endcol + 2), eol))\n    end\n  end\n  local function friendly_msg(msg, _188_0, source, opts)\n    local _189_ = _188_0\n    local col = _189_[\"col\"]\n    local endcol = _189_[\"endcol\"]\n    local endline = _189_[\"endline\"]\n    local filename = _189_[\"filename\"]\n    local line = _189_[\"line\"]\n    local ok, codeline = pcall(read_line, filename, line, source)\n    local endcol0 = nil\n    if (ok and codeline and (line ~= endline)) then\n      endcol0 = #codeline\n    else\n      endcol0 = endcol\n    end\n    local out = {msg, \"\"}\n    if (ok and codeline) then\n      if col then\n        table.insert(out, highlight_line(codeline, col, endcol0, opts))\n      else\n        table.insert(out, codeline)\n      end\n    end\n    for _, suggestion in ipairs((suggest(msg) or {})) do\n      table.insert(out, (\"* Try %s.\"):format(suggestion))\n    end\n    return table.concat(out, \"\\n\")\n  end\n  local function assert_compile(condition, msg, ast, source, opts)\n    if not condition then\n      local _193_ = utils[\"ast-source\"](ast)\n      local col = _193_[\"col\"]\n      local filename = _193_[\"filename\"]\n      local line = _193_[\"line\"]\n      error(friendly_msg((\"%s:%s:%s: Compile error: %s\"):format((filename or \"unknown\"), (line or \"?\"), (col or \"?\"), msg), utils[\"ast-source\"](ast), source, opts), 0)\n    end\n    return condition\n  end\n  local function parse_error(msg, filename, line, col, source, opts)\n    return error(friendly_msg((\"%s:%s:%s: Parse error: %s\"):format(filename, line, col, msg), {col = col, filename = filename, line = line}, source, opts), 0)\n  end\n  return {[\"assert-compile\"] = assert_compile, [\"parse-error\"] = parse_error}\nend\npackage.preload[\"fennel.parser\"] = package.preload[\"fennel.parser\"] or function(...)\n  local utils = require(\"fennel.utils\")\n  local friend = require(\"fennel.friend\")\n  local unpack = (table.unpack or _G.unpack)\n  local function granulate(getchunk)\n    local c, index, done_3f = \"\", 1, false\n    local function _195_(parser_state)\n      if not done_3f then\n        if (index <= #c) then\n          local b = c:byte(index)\n          index = (index + 1)\n          return b\n        else\n          local _196_0 = getchunk(parser_state)\n          local function _197_()\n            local char = _196_0\n            return (char ~= \"\")\n          end\n          if ((nil ~= _196_0) and _197_()) then\n            local char = _196_0\n            c = char\n            index = 2\n            return c:byte()\n          else\n            local _ = _196_0\n            done_3f = true\n            return nil\n          end\n        end\n      end\n    end\n    local function _201_()\n      c = \"\"\n      return nil\n    end\n    return _195_, _201_\n  end\n  local function string_stream(str, _3foptions)\n    local str0 = str:gsub(\"^#!\", \";;\")\n    if _3foptions then\n      _3foptions.source = str0\n    end\n    local index = 1\n    local function _203_()\n      local r = str0:byte(index)\n      index = (index + 1)\n      return r\n    end\n    return _203_\n  end\n  local delims = {[123] = 125, [125] = true, [40] = 41, [41] = true, [91] = 93, [93] = true}\n  local function sym_char_3f(b)\n    local b0 = nil\n    if (\"number\" == type(b)) then\n      b0 = b\n    else\n      b0 = string.byte(b)\n    end\n    return ((32 < b0) and not delims[b0] and (b0 ~= 127) and (b0 ~= 34) and (b0 ~= 39) and (b0 ~= 126) and (b0 ~= 59) and (b0 ~= 44) and (b0 ~= 64) and (b0 ~= 96))\n  end\n  local prefixes = {[35] = \"hashfn\", [39] = \"quote\", [44] = \"unquote\", [96] = \"quote\"}\n  local function char_starter_3f(b)\n    return (((1 < b) and (b < 127)) or ((192 < b) and (b < 247)))\n  end\n  local function parser_fn(getbyte, filename, _205_0)\n    local _206_ = _205_0\n    local options = _206_\n    local comments = _206_[\"comments\"]\n    local source = _206_[\"source\"]\n    local unfriendly = _206_[\"unfriendly\"]\n    local stack = {}\n    local line, byteindex, col, prev_col, lastb = 1, 0, 0, 0, nil\n    local function ungetb(ub)\n      if char_starter_3f(ub) then\n        col = (col - 1)\n      end\n      if (ub == 10) then\n        line, col = (line - 1), prev_col\n      end\n      byteindex = (byteindex - 1)\n      lastb = ub\n      return nil\n    end\n    local function getb()\n      local r = nil\n      if lastb then\n        r, lastb = lastb, nil\n      else\n        r = getbyte({[\"stack-size\"] = #stack})\n      end\n      if r then\n        byteindex = (byteindex + 1)\n      end\n      if (r and char_starter_3f(r)) then\n        col = (col + 1)\n      end\n      if (r == 10) then\n        line, col, prev_col = (line + 1), 0, col\n      end\n      return r\n    end\n    local function whitespace_3f(b)\n      local function _214_()\n        local _213_0 = options.whitespace\n        if (nil ~= _213_0) then\n          _213_0 = _213_0[b]\n        end\n        return _213_0\n      end\n      return ((b == 32) or ((9 <= b) and (b <= 13)) or _214_())\n    end\n    local function parse_error(msg, _3fcol_adjust)\n      local col0 = (col + (_3fcol_adjust or -1))\n      if (nil == utils[\"hook-opts\"](\"parse-error\", options, msg, filename, (line or \"?\"), col0, source, utils.root.reset)) then\n        utils.root.reset()\n        if unfriendly then\n          return error(string.format(\"%s:%s:%s: Parse error: %s\", filename, (line or \"?\"), col0, msg), 0)\n        else\n          return friend[\"parse-error\"](msg, filename, (line or \"?\"), col0, source, options)\n        end\n      end\n    end\n    local function parse_stream()\n      local whitespace_since_dispatch, done_3f, retval = true\n      local function set_source_fields(source0)\n        source0.byteend, source0.endcol, source0.endline = byteindex, (col - 1), line\n        return nil\n      end\n      local function dispatch(v, _3fsource, _3fraw)\n        whitespace_since_dispatch = false\n        local v0 = nil\n        do\n          local _218_0 = utils[\"hook-opts\"](\"parse-form\", options, v, _3fsource, _3fraw, stack)\n          if (nil ~= _218_0) then\n            local hookv = _218_0\n            v0 = hookv\n          else\n            local _ = _218_0\n            v0 = v\n          end\n        end\n        local _220_0 = stack[#stack]\n        if (_220_0 == nil) then\n          retval, done_3f = v0, true\n          return nil\n        elseif ((_G.type(_220_0) == \"table\") and (nil ~= _220_0.prefix)) then\n          local prefix = _220_0.prefix\n          local source0 = nil\n          do\n            local _221_0 = table.remove(stack)\n            set_source_fields(_221_0)\n            source0 = _221_0\n          end\n          local list = utils.list(utils.sym(prefix, source0), v0)\n          return dispatch(utils.copy(source0, list))\n        elseif (nil ~= _220_0) then\n          local top = _220_0\n          return table.insert(top, v0)\n        end\n      end\n      local function badend()\n        local closers = nil\n        do\n          local tbl_17_ = {}\n          local i_18_ = #tbl_17_\n          for _, _223_0 in ipairs(stack) do\n            local _224_ = _223_0\n            local closer = _224_[\"closer\"]\n            local val_19_ = closer\n            if (nil ~= val_19_) then\n              i_18_ = (i_18_ + 1)\n              tbl_17_[i_18_] = val_19_\n            end\n          end\n          closers = tbl_17_\n        end\n        local _226_\n        if (#stack == 1) then\n          _226_ = \"\"\n        else\n          _226_ = \"s\"\n        end\n        return parse_error(string.format(\"expected closing delimiter%s %s\", _226_, string.char(unpack(closers))))\n      end\n      local function skip_whitespace(b, close_table)\n        if (b and whitespace_3f(b)) then\n          whitespace_since_dispatch = true\n          return skip_whitespace(getb(), close_table)\n        elseif (not b and next(stack)) then\n          badend()\n          for i = #stack, 2, -1 do\n            close_table(stack[i].closer)\n          end\n          return stack[1].closer\n        else\n          return b\n        end\n      end\n      local function parse_comment(b, contents)\n        if (b and (10 ~= b)) then\n          local function _229_()\n            table.insert(contents, string.char(b))\n            return contents\n          end\n          return parse_comment(getb(), _229_())\n        elseif comments then\n          ungetb(10)\n          return dispatch(utils.comment(table.concat(contents), {filename = filename, line = line}))\n        end\n      end\n      local function open_table(b)\n        if not whitespace_since_dispatch then\n          parse_error((\"expected whitespace before opening delimiter \" .. string.char(b)))\n        end\n        return table.insert(stack, {bytestart = byteindex, closer = delims[b], col = (col - 1), filename = filename, line = line})\n      end\n      local function close_list(list)\n        return dispatch(setmetatable(list, getmetatable(utils.list())))\n      end\n      local function close_sequence(tbl)\n        local mt = getmetatable(utils.sequence())\n        for k, v in pairs(tbl) do\n          if (\"number\" ~= type(k)) then\n            mt[k] = v\n            tbl[k] = nil\n          end\n        end\n        return dispatch(setmetatable(tbl, mt))\n      end\n      local function add_comment_at(comments0, index, node)\n        local _233_0 = comments0[index]\n        if (nil ~= _233_0) then\n          local existing = _233_0\n          return table.insert(existing, node)\n        else\n          local _ = _233_0\n          comments0[index] = {node}\n          return nil\n        end\n      end\n      local function next_noncomment(tbl, i)\n        if utils[\"comment?\"](tbl[i]) then\n          return next_noncomment(tbl, (i + 1))\n        elseif utils[\"sym?\"](tbl[i], \":\") then\n          return tostring(tbl[(i + 1)])\n        else\n          return tbl[i]\n        end\n      end\n      local function extract_comments(tbl)\n        local comments0 = {keys = {}, last = {}, values = {}}\n        while utils[\"comment?\"](tbl[#tbl]) do\n          table.insert(comments0.last, 1, table.remove(tbl))\n        end\n        local last_key_3f = false\n        for i, node in ipairs(tbl) do\n          if not utils[\"comment?\"](node) then\n            last_key_3f = not last_key_3f\n          elseif last_key_3f then\n            add_comment_at(comments0.values, next_noncomment(tbl, i), node)\n          else\n            add_comment_at(comments0.keys, next_noncomment(tbl, i), node)\n          end\n        end\n        for i = #tbl, 1, -1 do\n          if utils[\"comment?\"](tbl[i]) then\n            table.remove(tbl, i)\n          end\n        end\n        return comments0\n      end\n      local function close_curly_table(tbl)\n        local comments0 = extract_comments(tbl)\n        local keys = {}\n        local val = {}\n        if ((#tbl % 2) ~= 0) then\n          byteindex = (byteindex - 1)\n          parse_error(\"expected even number of values in table literal\")\n        end\n        setmetatable(val, tbl)\n        for i = 1, #tbl, 2 do\n          if ((tostring(tbl[i]) == \":\") and utils[\"sym?\"](tbl[(i + 1)]) and utils[\"sym?\"](tbl[i])) then\n            tbl[i] = tostring(tbl[(i + 1)])\n          end\n          val[tbl[i]] = tbl[(i + 1)]\n          table.insert(keys, tbl[i])\n        end\n        tbl.comments = comments0\n        tbl.keys = keys\n        return dispatch(val)\n      end\n      local function close_table(b)\n        local top = table.remove(stack)\n        if (top == nil) then\n          parse_error((\"unexpected closing delimiter \" .. string.char(b)))\n        end\n        if (top.closer and (top.closer ~= b)) then\n          parse_error((\"mismatched closing delimiter \" .. string.char(b) .. \", expected \" .. string.char(top.closer)))\n        end\n        set_source_fields(top)\n        if (b == 41) then\n          return close_list(top)\n        elseif (b == 93) then\n          return close_sequence(top)\n        else\n          return close_curly_table(top)\n        end\n      end\n      local function parse_string_loop(chars, b, state)\n        if b then\n          table.insert(chars, string.char(b))\n        end\n        local state0 = nil\n        do\n          local _244_0 = {state, b}\n          if ((_G.type(_244_0) == \"table\") and (_244_0[1] == \"base\") and (_244_0[2] == 92)) then\n            state0 = \"backslash\"\n          elseif ((_G.type(_244_0) == \"table\") and (_244_0[1] == \"base\") and (_244_0[2] == 34)) then\n            state0 = \"done\"\n          elseif ((_G.type(_244_0) == \"table\") and (_244_0[1] == \"backslash\") and (_244_0[2] == 10)) then\n            table.remove(chars, (#chars - 1))\n            state0 = \"base\"\n          else\n            local _ = _244_0\n            state0 = \"base\"\n          end\n        end\n        if (b and (state0 ~= \"done\")) then\n          return parse_string_loop(chars, getb(), state0)\n        else\n          return b\n        end\n      end\n      local function escape_char(c)\n        return ({nil, nil, nil, nil, nil, nil, \"\\\\a\", \"\\\\b\", \"\\\\t\", \"\\\\n\", \"\\\\v\", \"\\\\f\", \"\\\\r\"})[c:byte()]\n      end\n      local function parse_string(source0)\n        if not whitespace_since_dispatch then\n          utils.warn(\"expected whitespace before string\", nil, filename, line)\n        end\n        table.insert(stack, {closer = 34})\n        local chars = {\"\\\"\"}\n        if not parse_string_loop(chars, getb(), \"base\") then\n          badend()\n        end\n        table.remove(stack)\n        local raw = table.concat(chars)\n        local formatted = raw:gsub(\"[\\7-\\13]\", escape_char)\n        local _249_0 = (rawget(_G, \"loadstring\") or load)((\"return \" .. formatted))\n        if (nil ~= _249_0) then\n          local load_fn = _249_0\n          return dispatch(load_fn(), source0, raw)\n        elseif (_249_0 == nil) then\n          return parse_error((\"Invalid string: \" .. raw))\n        end\n      end\n      local function parse_prefix(b)\n        table.insert(stack, {bytestart = byteindex, col = (col - 1), filename = filename, line = line, prefix = prefixes[b]})\n        local nextb = getb()\n        local trailing_whitespace_3f = (whitespace_3f(nextb) or (true == delims[nextb]))\n        if (trailing_whitespace_3f and (b ~= 35)) then\n          parse_error(\"invalid whitespace after quoting prefix\")\n        end\n        ungetb(nextb)\n        if (trailing_whitespace_3f and (b == 35)) then\n          local source0 = table.remove(stack)\n          set_source_fields(source0)\n          return dispatch(utils.sym(\"#\", source0))\n        end\n      end\n      local function parse_sym_loop(chars, b)\n        if (b and sym_char_3f(b)) then\n          table.insert(chars, string.char(b))\n          return parse_sym_loop(chars, getb())\n        else\n          if b then\n            ungetb(b)\n          end\n          return chars\n        end\n      end\n      local function parse_number(rawstr, source0)\n        local number_with_stripped_underscores = (not rawstr:find(\"^_\") and rawstr:gsub(\"_\", \"\"))\n        if rawstr:match(\"^%d\") then\n          dispatch((tonumber(number_with_stripped_underscores) or parse_error((\"could not read number \\\"\" .. rawstr .. \"\\\"\"))), source0, rawstr)\n          return true\n        else\n          local _255_0 = tonumber(number_with_stripped_underscores)\n          if (nil ~= _255_0) then\n            local x = _255_0\n            dispatch(x, source0, rawstr)\n            return true\n          else\n            local _ = _255_0\n            return false\n          end\n        end\n      end\n      local function check_malformed_sym(rawstr)\n        local function col_adjust(pat)\n          return (rawstr:find(pat) - utils.len(rawstr) - 1)\n        end\n        if (rawstr:match(\"^~\") and (rawstr ~= \"~=\")) then\n          parse_error(\"invalid character: ~\")\n        elseif (rawstr:match(\"[%.:][%.:]\") and (rawstr ~= \"..\") and (rawstr ~= \"$...\")) then\n          parse_error((\"malformed multisym: \" .. rawstr), col_adjust(\"[%.:][%.:]\"))\n        elseif ((rawstr ~= \":\") and rawstr:match(\":$\")) then\n          parse_error((\"malformed multisym: \" .. rawstr), col_adjust(\":$\"))\n        elseif rawstr:match(\":.+[%.:]\") then\n          parse_error((\"method must be last component of multisym: \" .. rawstr), col_adjust(\":.+[%.:]\"))\n        end\n        if not whitespace_since_dispatch then\n          utils.warn(\"expected whitespace before token\", nil, filename, line)\n        end\n        return rawstr\n      end\n      local function parse_sym(b)\n        local source0 = {bytestart = byteindex, col = (col - 1), filename = filename, line = line}\n        local rawstr = table.concat(parse_sym_loop({string.char(b)}, getb()))\n        set_source_fields(source0)\n        if (rawstr == \"true\") then\n          return dispatch(true, source0)\n        elseif (rawstr == \"false\") then\n          return dispatch(false, source0)\n        elseif (rawstr == \"...\") then\n          return dispatch(utils.varg(source0))\n        elseif rawstr:match(\"^:.+$\") then\n          return dispatch(rawstr:sub(2), source0, rawstr)\n        elseif not parse_number(rawstr, source0) then\n          return dispatch(utils.sym(check_malformed_sym(rawstr), source0))\n        end\n      end\n      local function parse_loop(b)\n        if not b then\n        elseif (b == 59) then\n          parse_comment(getb(), {\";\"})\n        elseif (type(delims[b]) == \"number\") then\n          open_table(b)\n        elseif delims[b] then\n          close_table(b)\n        elseif (b == 34) then\n          parse_string({bytestart = byteindex, col = col, filename = filename, line = line})\n        elseif prefixes[b] then\n          parse_prefix(b)\n        elseif (sym_char_3f(b) or (b == string.byte(\"~\"))) then\n          parse_sym(b)\n        elseif not utils[\"hook-opts\"](\"illegal-char\", options, b, getb, ungetb, dispatch) then\n          parse_error((\"invalid character: \" .. string.char(b)))\n        end\n        if not b then\n          return nil\n        elseif done_3f then\n          return true, retval\n        else\n          return parse_loop(skip_whitespace(getb(), close_table))\n        end\n      end\n      return parse_loop(skip_whitespace(getb(), close_table))\n    end\n    local function _263_()\n      stack, line, byteindex, col, lastb = {}, 1, 0, 0, ((lastb ~= 10) and lastb)\n      return nil\n    end\n    return parse_stream, _263_\n  end\n  local function parser(stream_or_string, _3ffilename, _3foptions)\n    local filename = (_3ffilename or \"unknown\")\n    local options = (_3foptions or utils.root.options or {})\n    assert((\"string\" == type(filename)), \"expected filename as second argument to parser\")\n    if (\"string\" == type(stream_or_string)) then\n      return parser_fn(string_stream(stream_or_string, options), filename, options)\n    else\n      return parser_fn(stream_or_string, filename, options)\n    end\n  end\n  return {[\"string-stream\"] = string_stream, [\"sym-char?\"] = sym_char_3f, granulate = granulate, parser = parser}\nend\nlocal utils = nil\npackage.preload[\"fennel.view\"] = package.preload[\"fennel.view\"] or function(...)\n  local type_order = {[\"function\"] = 5, boolean = 2, number = 1, string = 3, table = 4, thread = 7, userdata = 6}\n  local default_opts = {[\"detect-cycles?\"] = true, [\"empty-as-sequence?\"] = false, [\"escape-newlines?\"] = false, [\"line-length\"] = 80, [\"max-sparse-gap\"] = 10, [\"metamethod?\"] = true, [\"one-line?\"] = false, [\"prefer-colon?\"] = false, [\"utf8?\"] = true, depth = 128}\n  local lua_pairs = pairs\n  local lua_ipairs = ipairs\n  local function pairs(t)\n    local _1_0 = getmetatable(t)\n    if ((_G.type(_1_0) == \"table\") and (nil ~= _1_0.__pairs)) then\n      local p = _1_0.__pairs\n      return p(t)\n    else\n      local _ = _1_0\n      return lua_pairs(t)\n    end\n  end\n  local function ipairs(t)\n    local _3_0 = getmetatable(t)\n    if ((_G.type(_3_0) == \"table\") and (nil ~= _3_0.__ipairs)) then\n      local i = _3_0.__ipairs\n      return i(t)\n    else\n      local _ = _3_0\n      return lua_ipairs(t)\n    end\n  end\n  local function length_2a(t)\n    local _5_0 = getmetatable(t)\n    if ((_G.type(_5_0) == \"table\") and (nil ~= _5_0.__len)) then\n      local l = _5_0.__len\n      return l(t)\n    else\n      local _ = _5_0\n      return #t\n    end\n  end\n  local function get_default(key)\n    local _7_0 = default_opts[key]\n    if (_7_0 == nil) then\n      return error((\"option '%s' doesn't have a default value, use the :after key to set it\"):format(tostring(key)))\n    elseif (nil ~= _7_0) then\n      local v = _7_0\n      return v\n    end\n  end\n  local function getopt(options, key)\n    local _9_0 = options[key]\n    if ((_G.type(_9_0) == \"table\") and (nil ~= _9_0.once)) then\n      local val_2a = _9_0.once\n      return val_2a\n    else\n      local _3fval = _9_0\n      return _3fval\n    end\n  end\n  local function normalize_opts(options)\n    local tbl_14_ = {}\n    for k, v in pairs(options) do\n      local k_15_, v_16_ = nil, nil\n      local function _12_()\n        local _11_0 = v\n        if ((_G.type(_11_0) == \"table\") and (nil ~= _11_0.after)) then\n          local val = _11_0.after\n          return val\n        else\n          local function _13_()\n            return v.once\n          end\n          if ((_G.type(_11_0) == \"table\") and _13_()) then\n            return get_default(k)\n          else\n            local _ = _11_0\n            return v\n          end\n        end\n      end\n      k_15_, v_16_ = k, _12_()\n      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n        tbl_14_[k_15_] = v_16_\n      end\n    end\n    return tbl_14_\n  end\n  local function sort_keys(_16_0, _18_0)\n    local _17_ = _16_0\n    local a = _17_[1]\n    local _19_ = _18_0\n    local b = _19_[1]\n    local ta = type(a)\n    local tb = type(b)\n    if ((ta == tb) and ((ta == \"string\") or (ta == \"number\"))) then\n      return (a < b)\n    else\n      local dta = type_order[ta]\n      local dtb = type_order[tb]\n      if (dta and dtb) then\n        return (dta < dtb)\n      elseif dta then\n        return true\n      elseif dtb then\n        return false\n      else\n        return (ta < tb)\n      end\n    end\n  end\n  local function max_index_gap(kv)\n    local gap = 0\n    if (0 < length_2a(kv)) then\n      local i = 0\n      for _, _22_0 in ipairs(kv) do\n        local _23_ = _22_0\n        local k = _23_[1]\n        if (gap < (k - i)) then\n          gap = (k - i)\n        end\n        i = k\n      end\n    end\n    return gap\n  end\n  local function fill_gaps(kv)\n    local missing_indexes = {}\n    local i = 0\n    for _, _26_0 in ipairs(kv) do\n      local _27_ = _26_0\n      local j = _27_[1]\n      i = (i + 1)\n      while (i < j) do\n        table.insert(missing_indexes, i)\n        i = (i + 1)\n      end\n    end\n    for _, k in ipairs(missing_indexes) do\n      table.insert(kv, k, {k})\n    end\n    return nil\n  end\n  local function table_kv_pairs(t, options)\n    local assoc_3f = false\n    local kv = {}\n    local insert = table.insert\n    for k, v in pairs(t) do\n      if ((type(k) ~= \"number\") or (k < 1)) then\n        assoc_3f = true\n      end\n      insert(kv, {k, v})\n    end\n    table.sort(kv, sort_keys)\n    if not assoc_3f then\n      if (options[\"max-sparse-gap\"] < max_index_gap(kv)) then\n        assoc_3f = true\n      else\n        fill_gaps(kv)\n      end\n    end\n    if (length_2a(kv) == 0) then\n      return kv, \"empty\"\n    else\n      local function _31_()\n        if assoc_3f then\n          return \"table\"\n        else\n          return \"seq\"\n        end\n      end\n      return kv, _31_()\n    end\n  end\n  local function count_table_appearances(t, appearances)\n    if (type(t) == \"table\") then\n      if not appearances[t] then\n        appearances[t] = 1\n        for k, v in pairs(t) do\n          count_table_appearances(k, appearances)\n          count_table_appearances(v, appearances)\n        end\n      else\n        appearances[t] = ((appearances[t] or 0) + 1)\n      end\n    end\n    return appearances\n  end\n  local function save_table(t, seen)\n    local seen0 = (seen or {len = 0})\n    local id = (seen0.len + 1)\n    if not seen0[t] then\n      seen0[t] = id\n      seen0.len = id\n    end\n    return seen0\n  end\n  local function detect_cycle(t, seen)\n    if (\"table\" == type(t)) then\n      seen[t] = true\n      local res = nil\n      for k, v in pairs(t) do\n        if res then break end\n        res = (seen[k] or detect_cycle(k, seen) or seen[v] or detect_cycle(v, seen))\n      end\n      return res\n    end\n  end\n  local function visible_cycle_3f(t, options)\n    return (getopt(options, \"detect-cycles?\") and detect_cycle(t, {}) and save_table(t, options.seen) and (1 < (options.appearances[t] or 0)))\n  end\n  local function table_indent(indent, id)\n    local opener_length = nil\n    if id then\n      opener_length = (length_2a(tostring(id)) + 2)\n    else\n      opener_length = 1\n    end\n    return (indent + opener_length)\n  end\n  local pp = nil\n  local function concat_table_lines(elements, options, multiline_3f, indent, table_type, prefix, last_comment_3f)\n    local indent_str = (\"\\n\" .. string.rep(\" \", indent))\n    local open = nil\n    local function _38_()\n      if (\"seq\" == table_type) then\n        return \"[\"\n      else\n        return \"{\"\n      end\n    end\n    open = ((prefix or \"\") .. _38_())\n    local close = nil\n    if (\"seq\" == table_type) then\n      close = \"]\"\n    else\n      close = \"}\"\n    end\n    local oneline = (open .. table.concat(elements, \" \") .. close)\n    if (not getopt(options, \"one-line?\") and (multiline_3f or (options[\"line-length\"] < (indent + length_2a(oneline))) or last_comment_3f)) then\n      local function _40_()\n        if last_comment_3f then\n          return indent_str\n        else\n          return \"\"\n        end\n      end\n      return (open .. table.concat(elements, indent_str) .. _40_() .. close)\n    else\n      return oneline\n    end\n  end\n  local function utf8_len(x)\n    local n = 0\n    for _ in string.gmatch(x, \"[%z\\1-\\127\\192-\\247]\") do\n      n = (n + 1)\n    end\n    return n\n  end\n  local function comment_3f(x)\n    if (\"table\" == type(x)) then\n      local fst = x[1]\n      return ((\"string\" == type(fst)) and (nil ~= fst:find(\"^;\")))\n    else\n      return false\n    end\n  end\n  local function pp_associative(t, kv, options, indent)\n    local multiline_3f = false\n    local id = options.seen[t]\n    if (options.depth <= options.level) then\n      return \"{...}\"\n    elseif (id and getopt(options, \"detect-cycles?\")) then\n      return (\"@\" .. id .. \"{...}\")\n    else\n      local visible_cycle_3f0 = visible_cycle_3f(t, options)\n      local id0 = (visible_cycle_3f0 and options.seen[t])\n      local indent0 = table_indent(indent, id0)\n      local slength = nil\n      if getopt(options, \"utf8?\") then\n        slength = utf8_len\n      else\n        local function _43_(_241)\n          return #_241\n        end\n        slength = _43_\n      end\n      local prefix = nil\n      if visible_cycle_3f0 then\n        prefix = (\"@\" .. id0)\n      else\n        prefix = \"\"\n      end\n      local items = nil\n      do\n        local options0 = normalize_opts(options)\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, _46_0 in ipairs(kv) do\n          local _47_ = _46_0\n          local k = _47_[1]\n          local v = _47_[2]\n          local val_19_ = nil\n          do\n            local k0 = pp(k, options0, (indent0 + 1), true)\n            local v0 = pp(v, options0, (indent0 + slength(k0) + 1))\n            multiline_3f = (multiline_3f or k0:find(\"\\n\") or v0:find(\"\\n\"))\n            val_19_ = (k0 .. \" \" .. v0)\n          end\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        items = tbl_17_\n      end\n      return concat_table_lines(items, options, multiline_3f, indent0, \"table\", prefix, false)\n    end\n  end\n  local function pp_sequence(t, kv, options, indent)\n    local multiline_3f = false\n    local id = options.seen[t]\n    if (options.depth <= options.level) then\n      return \"[...]\"\n    elseif (id and getopt(options, \"detect-cycles?\")) then\n      return (\"@\" .. id .. \"[...]\")\n    else\n      local visible_cycle_3f0 = visible_cycle_3f(t, options)\n      local id0 = (visible_cycle_3f0 and options.seen[t])\n      local indent0 = table_indent(indent, id0)\n      local prefix = nil\n      if visible_cycle_3f0 then\n        prefix = (\"@\" .. id0)\n      else\n        prefix = \"\"\n      end\n      local last_comment_3f = comment_3f(t[#t])\n      local items = nil\n      do\n        local options0 = normalize_opts(options)\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, _51_0 in ipairs(kv) do\n          local _52_ = _51_0\n          local _0 = _52_[1]\n          local v = _52_[2]\n          local val_19_ = nil\n          do\n            local v0 = pp(v, options0, indent0)\n            multiline_3f = (multiline_3f or v0:find(\"\\n\") or v0:find(\"^;\"))\n            val_19_ = v0\n          end\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        items = tbl_17_\n      end\n      return concat_table_lines(items, options, multiline_3f, indent0, \"seq\", prefix, last_comment_3f)\n    end\n  end\n  local function concat_lines(lines, options, indent, force_multi_line_3f)\n    if (length_2a(lines) == 0) then\n      if getopt(options, \"empty-as-sequence?\") then\n        return \"[]\"\n      else\n        return \"{}\"\n      end\n    else\n      local oneline = nil\n      local _56_\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for _, line in ipairs(lines) do\n          local val_19_ = line:gsub(\"^%s+\", \"\")\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        _56_ = tbl_17_\n      end\n      oneline = table.concat(_56_, \" \")\n      if (not getopt(options, \"one-line?\") and (force_multi_line_3f or oneline:find(\"\\n\") or (options[\"line-length\"] < (indent + length_2a(oneline))))) then\n        return table.concat(lines, (\"\\n\" .. string.rep(\" \", indent)))\n      else\n        return oneline\n      end\n    end\n  end\n  local function pp_metamethod(t, metamethod, options, indent)\n    if (options.depth <= options.level) then\n      if getopt(options, \"empty-as-sequence?\") then\n        return \"[...]\"\n      else\n        return \"{...}\"\n      end\n    else\n      local _ = nil\n      local function _61_(_241)\n        return visible_cycle_3f(_241, options)\n      end\n      options[\"visible-cycle?\"] = _61_\n      _ = nil\n      local lines, force_multi_line_3f = nil, nil\n      do\n        local options0 = normalize_opts(options)\n        lines, force_multi_line_3f = metamethod(t, pp, options0, indent)\n      end\n      options[\"visible-cycle?\"] = nil\n      local _62_0 = type(lines)\n      if (_62_0 == \"string\") then\n        return lines\n      elseif (_62_0 == \"table\") then\n        return concat_lines(lines, options, indent, force_multi_line_3f)\n      else\n        local _0 = _62_0\n        return error(\"__fennelview metamethod must return a table of lines\")\n      end\n    end\n  end\n  local function pp_table(x, options, indent)\n    options.level = (options.level + 1)\n    local x0 = nil\n    do\n      local _65_0 = nil\n      if getopt(options, \"metamethod?\") then\n        local _66_0 = x\n        if (nil ~= _66_0) then\n          local _67_0 = getmetatable(_66_0)\n          if (nil ~= _67_0) then\n            _65_0 = _67_0.__fennelview\n          else\n            _65_0 = _67_0\n          end\n        else\n          _65_0 = _66_0\n        end\n      else\n      _65_0 = nil\n      end\n      if (nil ~= _65_0) then\n        local metamethod = _65_0\n        x0 = pp_metamethod(x, metamethod, options, indent)\n      else\n        local _ = _65_0\n        local _71_0, _72_0 = table_kv_pairs(x, options)\n        if (true and (_72_0 == \"empty\")) then\n          local _0 = _71_0\n          if getopt(options, \"empty-as-sequence?\") then\n            x0 = \"[]\"\n          else\n            x0 = \"{}\"\n          end\n        elseif ((nil ~= _71_0) and (_72_0 == \"table\")) then\n          local kv = _71_0\n          x0 = pp_associative(x, kv, options, indent)\n        elseif ((nil ~= _71_0) and (_72_0 == \"seq\")) then\n          local kv = _71_0\n          x0 = pp_sequence(x, kv, options, indent)\n        else\n        x0 = nil\n        end\n      end\n    end\n    options.level = (options.level - 1)\n    return x0\n  end\n  local function number__3estring(n)\n    local _76_0 = string.gsub(tostring(n), \",\", \".\")\n    return _76_0\n  end\n  local function colon_string_3f(s)\n    return s:find(\"^[-%w?^_!$%&*+./|<=>]+$\")\n  end\n  local utf8_inits = {{[\"max-byte\"] = 127, [\"max-code\"] = 127, [\"min-byte\"] = 0, [\"min-code\"] = 0, len = 1}, {[\"max-byte\"] = 223, [\"max-code\"] = 2047, [\"min-byte\"] = 192, [\"min-code\"] = 128, len = 2}, {[\"max-byte\"] = 239, [\"max-code\"] = 65535, [\"min-byte\"] = 224, [\"min-code\"] = 2048, len = 3}, {[\"max-byte\"] = 247, [\"max-code\"] = 1114111, [\"min-byte\"] = 240, [\"min-code\"] = 65536, len = 4}}\n  local function default_byte_escape(byte, _options)\n    return (\"\\\\%03d\"):format(byte)\n  end\n  local function utf8_escape(str, options)\n    local function validate_utf8(str0, index)\n      local inits = utf8_inits\n      local byte = string.byte(str0, index)\n      local init = nil\n      do\n        local ret = nil\n        for _, init0 in ipairs(inits) do\n          if ret then break end\n          ret = (byte and (function(_77_,_78_,_79_) return (_77_ <= _78_) and (_78_ <= _79_) end)(init0[\"min-byte\"],byte,init0[\"max-byte\"]) and init0)\n        end\n        init = ret\n      end\n      local code = nil\n      local function _80_()\n        local code0 = nil\n        if init then\n          code0 = (byte - init[\"min-byte\"])\n        else\n          code0 = nil\n        end\n        for i = (index + 1), (index + init.len + -1) do\n          local byte0 = string.byte(str0, i)\n          code0 = (byte0 and code0 and ((128 <= byte0) and (byte0 <= 191)) and ((code0 * 64) + (byte0 - 128)))\n        end\n        return code0\n      end\n      code = (init and _80_())\n      if (code and (function(_82_,_83_,_84_) return (_82_ <= _83_) and (_83_ <= _84_) end)(init[\"min-code\"],code,init[\"max-code\"]) and not ((55296 <= code) and (code <= 57343))) then\n        return init.len\n      end\n    end\n    local index = 1\n    local output = {}\n    local byte_escape = (getopt(options, \"byte-escape\") or default_byte_escape)\n    while (index <= #str) do\n      local nexti = (string.find(str, \"[\\128-\\255]\", index) or (#str + 1))\n      local len = validate_utf8(str, nexti)\n      table.insert(output, string.sub(str, index, (nexti + (len or 0) + -1)))\n      if (not len and (nexti <= #str)) then\n        table.insert(output, byte_escape(str:byte(nexti), options))\n      end\n      if len then\n        index = (nexti + len)\n      else\n        index = (nexti + 1)\n      end\n    end\n    return table.concat(output)\n  end\n  local function pp_string(str, options, indent)\n    local len = length_2a(str)\n    local esc_newline_3f = ((len < 2) or (getopt(options, \"escape-newlines?\") and (len < (options[\"line-length\"] - indent))))\n    local byte_escape = (getopt(options, \"byte-escape\") or default_byte_escape)\n    local escs = nil\n    local _88_\n    if esc_newline_3f then\n      _88_ = \"\\\\n\"\n    else\n      _88_ = \"\\n\"\n    end\n    local function _90_(_241, _242)\n      return byte_escape(_242:byte(), options)\n    end\n    escs = setmetatable({[\"\\\"\"] = \"\\\\\\\"\", [\"\\v\"] = \"\\\\v\", [\"\\f\"] = \"\\\\f\", [\"\\r\"] = \"\\\\r\", [\"\\7\"] = \"\\\\a\", [\"\\8\"] = \"\\\\b\", [\"\\9\"] = \"\\\\t\", [\"\\\\\"] = \"\\\\\\\\\", [\"\\n\"] = _88_}, {__index = _90_})\n    local str0 = (\"\\\"\" .. str:gsub(\"[%c\\\\\\\"]\", escs) .. \"\\\"\")\n    if getopt(options, \"utf8?\") then\n      return utf8_escape(str0, options)\n    else\n      return str0\n    end\n  end\n  local function make_options(t, options)\n    local defaults = nil\n    do\n      local tbl_14_ = {}\n      for k, v in pairs(default_opts) do\n        local k_15_, v_16_ = k, v\n        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n          tbl_14_[k_15_] = v_16_\n        end\n      end\n      defaults = tbl_14_\n    end\n    local overrides = {appearances = count_table_appearances(t, {}), level = 0, seen = {len = 0}}\n    for k, v in pairs((options or {})) do\n      defaults[k] = v\n    end\n    for k, v in pairs(overrides) do\n      defaults[k] = v\n    end\n    return defaults\n  end\n  local function _93_(x, options, indent, colon_3f)\n    local indent0 = (indent or 0)\n    local options0 = (options or make_options(x))\n    local x0 = nil\n    if options0.preprocess then\n      x0 = options0.preprocess(x, options0)\n    else\n      x0 = x\n    end\n    local tv = type(x0)\n    local function _96_()\n      local _95_0 = getmetatable(x0)\n      if ((_G.type(_95_0) == \"table\") and true) then\n        local __fennelview = _95_0.__fennelview\n        return __fennelview\n      end\n    end\n    if ((tv == \"table\") or ((tv == \"userdata\") and _96_())) then\n      return pp_table(x0, options0, indent0)\n    elseif (tv == \"number\") then\n      return number__3estring(x0)\n    else\n      local function _98_()\n        if (colon_3f ~= nil) then\n          return colon_3f\n        elseif (\"function\" == type(options0[\"prefer-colon?\"])) then\n          return options0[\"prefer-colon?\"](x0)\n        else\n          return getopt(options0, \"prefer-colon?\")\n        end\n      end\n      if ((tv == \"string\") and colon_string_3f(x0) and _98_()) then\n        return (\":\" .. x0)\n      elseif (tv == \"string\") then\n        return pp_string(x0, options0, indent0)\n      elseif ((tv == \"boolean\") or (tv == \"nil\")) then\n        return tostring(x0)\n      else\n        return (\"#<\" .. tostring(x0) .. \">\")\n      end\n    end\n  end\n  pp = _93_\n  local function _view(x, _3foptions)\n    return pp(x, make_options(x, _3foptions), 0)\n  end\n  return _view\nend\npackage.preload[\"fennel.utils\"] = package.preload[\"fennel.utils\"] or function(...)\n  local view = require(\"fennel.view\")\n  local version = \"1.5.0\"\n  local function luajit_vm_3f()\n    return ((nil ~= _G.jit) and (type(_G.jit) == \"table\") and (nil ~= _G.jit.on) and (nil ~= _G.jit.off) and (type(_G.jit.version_num) == \"number\"))\n  end\n  local function luajit_vm_version()\n    local jit_os = nil\n    if (_G.jit.os == \"OSX\") then\n      jit_os = \"macOS\"\n    else\n      jit_os = _G.jit.os\n    end\n    return (_G.jit.version .. \" \" .. jit_os .. \"/\" .. _G.jit.arch)\n  end\n  local function fengari_vm_3f()\n    return ((nil ~= _G.fengari) and (type(_G.fengari) == \"table\") and (nil ~= _G.fengari.VERSION) and (type(_G.fengari.VERSION_NUM) == \"number\"))\n  end\n  local function fengari_vm_version()\n    return (_G.fengari.RELEASE .. \" (\" .. _VERSION .. \")\")\n  end\n  local function lua_vm_version()\n    if luajit_vm_3f() then\n      return luajit_vm_version()\n    elseif fengari_vm_3f() then\n      return fengari_vm_version()\n    else\n      return (\"PUC \" .. _VERSION)\n    end\n  end\n  local function runtime_version(_3fas_table)\n    if _3fas_table then\n      return {fennel = version, lua = lua_vm_version()}\n    else\n      return (\"Fennel \" .. version .. \" on \" .. lua_vm_version())\n    end\n  end\n  local len = nil\n  do\n    local _103_0, _104_0 = pcall(require, \"utf8\")\n    if ((_103_0 == true) and (nil ~= _104_0)) then\n      local utf8 = _104_0\n      len = utf8.len\n    else\n      local _ = _103_0\n      len = string.len\n    end\n  end\n  local kv_order = {boolean = 2, number = 1, string = 3, table = 4}\n  local function kv_compare(a, b)\n    local _106_0, _107_0 = type(a), type(b)\n    if (((_106_0 == \"number\") and (_107_0 == \"number\")) or ((_106_0 == \"string\") and (_107_0 == \"string\"))) then\n      return (a < b)\n    else\n      local function _108_()\n        local a_t = _106_0\n        local b_t = _107_0\n        return (a_t ~= b_t)\n      end\n      if (((nil ~= _106_0) and (nil ~= _107_0)) and _108_()) then\n        local a_t = _106_0\n        local b_t = _107_0\n        return ((kv_order[a_t] or 5) < (kv_order[b_t] or 5))\n      else\n        local _ = _106_0\n        return (tostring(a) < tostring(b))\n      end\n    end\n  end\n  local function add_stable_keys(succ, prev_key, src, _3fpred)\n    local first = prev_key\n    local last = nil\n    do\n      local prev = prev_key\n      for _, k in ipairs(src) do\n        if ((prev == k) or (succ[k] ~= nil) or (_3fpred and not _3fpred(k))) then\n          prev = prev\n        else\n          if (first == nil) then\n            first = k\n            prev = k\n          elseif (prev ~= nil) then\n            succ[prev] = k\n            prev = k\n          else\n            prev = k\n          end\n        end\n      end\n      last = prev\n    end\n    return succ, last, first\n  end\n  local function stablepairs(t)\n    local mt_keys = nil\n    do\n      local _112_0 = getmetatable(t)\n      if (nil ~= _112_0) then\n        _112_0 = _112_0.keys\n      end\n      mt_keys = _112_0\n    end\n    local succ, prev, first_mt = nil, nil, nil\n    local function _114_(_241)\n      return t[_241]\n    end\n    succ, prev, first_mt = add_stable_keys({}, nil, (mt_keys or {}), _114_)\n    local pairs_keys = nil\n    do\n      local _115_0 = nil\n      do\n        local tbl_17_ = {}\n        local i_18_ = #tbl_17_\n        for k in pairs(t) do\n          local val_19_ = k\n          if (nil ~= val_19_) then\n            i_18_ = (i_18_ + 1)\n            tbl_17_[i_18_] = val_19_\n          end\n        end\n        _115_0 = tbl_17_\n      end\n      table.sort(_115_0, kv_compare)\n      pairs_keys = _115_0\n    end\n    local succ0, _, first_after_mt = add_stable_keys(succ, prev, pairs_keys)\n    local first = nil\n    if (first_mt == nil) then\n      first = first_after_mt\n    else\n      first = first_mt\n    end\n    local function stablenext(tbl, key)\n      local _118_0 = nil\n      if (key == nil) then\n        _118_0 = first\n      else\n        _118_0 = succ0[key]\n      end\n      if (nil ~= _118_0) then\n        local next_key = _118_0\n        local _120_0 = tbl[next_key]\n        if (_120_0 ~= nil) then\n          return next_key, _120_0\n        else\n          return _120_0\n        end\n      end\n    end\n    return stablenext, t, nil\n  end\n  local function get_in(tbl, path)\n    if (nil ~= path[1]) then\n      local t = tbl\n      for _, k in ipairs(path) do\n        if (nil == t) then break end\n        if (type(t) == \"table\") then\n          t = t[k]\n        else\n        t = nil\n        end\n      end\n      return t\n    end\n  end\n  local function copy(_3ffrom, _3fto)\n    local tbl_14_ = (_3fto or {})\n    for k, v in pairs((_3ffrom or {})) do\n      local k_15_, v_16_ = k, v\n      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n        tbl_14_[k_15_] = v_16_\n      end\n    end\n    return tbl_14_\n  end\n  local function member_3f(x, tbl, _3fn)\n    local _126_0 = tbl[(_3fn or 1)]\n    if (_126_0 == x) then\n      return true\n    elseif (_126_0 == nil) then\n      return nil\n    else\n      local _ = _126_0\n      return member_3f(x, tbl, ((_3fn or 1) + 1))\n    end\n  end\n  local function maxn(tbl)\n    local max = 0\n    for k in pairs(tbl) do\n      if (\"number\" == type(k)) then\n        max = math.max(max, k)\n      else\n        max = max\n      end\n    end\n    return max\n  end\n  local function every_3f(t, predicate)\n    local result = true\n    for _, item in ipairs(t) do\n      if not result then break end\n      result = predicate(item)\n    end\n    return result\n  end\n  local function allpairs(tbl)\n    assert((type(tbl) == \"table\"), \"allpairs expects a table\")\n    local t = tbl\n    local seen = {}\n    local function allpairs_next(_, state)\n      local next_state, value = next(t, state)\n      if seen[next_state] then\n        return allpairs_next(nil, next_state)\n      elseif next_state then\n        seen[next_state] = true\n        return next_state, value\n      else\n        local _129_0 = getmetatable(t)\n        if ((_G.type(_129_0) == \"table\") and true) then\n          local __index = _129_0.__index\n          if (\"table\" == type(__index)) then\n            t = __index\n            return allpairs_next(t)\n          end\n        end\n      end\n    end\n    return allpairs_next\n  end\n  local function deref(self)\n    return self[1]\n  end\n  local function list__3estring(self, _3fview, _3foptions, _3findent)\n    local viewed = nil\n    do\n      local tbl_17_ = {}\n      local i_18_ = #tbl_17_\n      for i = 1, maxn(self) do\n        local val_19_ = nil\n        if _3fview then\n          val_19_ = _3fview(self[i], _3foptions, _3findent)\n        else\n          val_19_ = view(self[i])\n        end\n        if (nil ~= val_19_) then\n          i_18_ = (i_18_ + 1)\n          tbl_17_[i_18_] = val_19_\n        end\n      end\n      viewed = tbl_17_\n    end\n    return (\"(\" .. table.concat(viewed, \" \") .. \")\")\n  end\n  local function comment_view(c)\n    return c, true\n  end\n  local function sym_3d(a, b)\n    return ((deref(a) == deref(b)) and (getmetatable(a) == getmetatable(b)))\n  end\n  local function sym_3c(a, b)\n    return (a[1] < tostring(b))\n  end\n  local symbol_mt = {\"SYMBOL\", __eq = sym_3d, __fennelview = deref, __lt = sym_3c, __tostring = deref}\n  local expr_mt = nil\n  local function _135_(x)\n    return tostring(deref(x))\n  end\n  expr_mt = {\"EXPR\", __tostring = _135_}\n  local list_mt = {\"LIST\", __fennelview = list__3estring, __tostring = list__3estring}\n  local comment_mt = {\"COMMENT\", __eq = sym_3d, __fennelview = comment_view, __lt = sym_3c, __tostring = deref}\n  local sequence_marker = {\"SEQUENCE\"}\n  local varg_mt = {\"VARARG\", __fennelview = deref, __tostring = deref}\n  local getenv = nil\n  local function _136_()\n    return nil\n  end\n  getenv = ((os and os.getenv) or _136_)\n  local function debug_on_3f(flag)\n    local level = (getenv(\"FENNEL_DEBUG\") or \"\")\n    return ((level == \"all\") or level:find(flag))\n  end\n  local function list(...)\n    return setmetatable({...}, list_mt)\n  end\n  local function sym(str, _3fsource)\n    local _137_\n    do\n      local tbl_14_ = {str}\n      for k, v in pairs((_3fsource or {})) do\n        local k_15_, v_16_ = nil, nil\n        if (type(k) == \"string\") then\n          k_15_, v_16_ = k, v\n        else\n        k_15_, v_16_ = nil\n        end\n        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n          tbl_14_[k_15_] = v_16_\n        end\n      end\n      _137_ = tbl_14_\n    end\n    return setmetatable(_137_, symbol_mt)\n  end\n  local function sequence(...)\n    local function _140_(seq, view0, inspector, indent)\n      local opts = nil\n      do\n        inspector[\"empty-as-sequence?\"] = {after = inspector[\"empty-as-sequence?\"], once = true}\n        inspector[\"metamethod?\"] = {after = inspector[\"metamethod?\"], once = false}\n        opts = inspector\n      end\n      return view0(seq, opts, indent)\n    end\n    return setmetatable({...}, {__fennelview = _140_, sequence = sequence_marker})\n  end\n  local function expr(strcode, etype)\n    return setmetatable({strcode, type = etype}, expr_mt)\n  end\n  local function comment_2a(contents, _3fsource)\n    local _141_ = (_3fsource or {})\n    local filename = _141_[\"filename\"]\n    local line = _141_[\"line\"]\n    return setmetatable({contents, filename = filename, line = line}, comment_mt)\n  end\n  local function varg(_3fsource)\n    local _142_\n    do\n      local tbl_14_ = {\"...\"}\n      for k, v in pairs((_3fsource or {})) do\n        local k_15_, v_16_ = nil, nil\n        if (type(k) == \"string\") then\n          k_15_, v_16_ = k, v\n        else\n        k_15_, v_16_ = nil\n        end\n        if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n          tbl_14_[k_15_] = v_16_\n        end\n      end\n      _142_ = tbl_14_\n    end\n    return setmetatable(_142_, varg_mt)\n  end\n  local function expr_3f(x)\n    return ((type(x) == \"table\") and (getmetatable(x) == expr_mt) and x)\n  end\n  local function varg_3f(x)\n    return ((type(x) == \"table\") and (getmetatable(x) == varg_mt) and x)\n  end\n  local function list_3f(x)\n    return ((type(x) == \"table\") and (getmetatable(x) == list_mt) and x)\n  end\n  local function sym_3f(x, _3fname)\n    return ((type(x) == \"table\") and (getmetatable(x) == symbol_mt) and ((nil == _3fname) or (x[1] == _3fname)) and x)\n  end\n  local function sequence_3f(x)\n    local mt = ((type(x) == \"table\") and getmetatable(x))\n    return (mt and (mt.sequence == sequence_marker) and x)\n  end\n  local function comment_3f(x)\n    return ((type(x) == \"table\") and (getmetatable(x) == comment_mt) and x)\n  end\n  local function table_3f(x)\n    return ((type(x) == \"table\") and not varg_3f(x) and (getmetatable(x) ~= list_mt) and (getmetatable(x) ~= symbol_mt) and not comment_3f(x) and x)\n  end\n  local function kv_table_3f(t)\n    if table_3f(t) then\n      local nxt, t0, k = pairs(t)\n      local len0 = #t0\n      local next_state = nil\n      if (0 == len0) then\n        next_state = k\n      else\n        next_state = len0\n      end\n      return ((nil ~= nxt(t0, next_state)) and t0)\n    end\n  end\n  local function string_3f(x)\n    if (type(x) == \"string\") then\n      return x\n    else\n      return false\n    end\n  end\n  local function multi_sym_3f(str)\n    if sym_3f(str) then\n      return multi_sym_3f(tostring(str))\n    elseif (type(str) ~= \"string\") then\n      return false\n    else\n      local function _148_()\n        local parts = {}\n        for part in str:gmatch(\"[^%.%:]+[%.%:]?\") do\n          local last_char = part:sub(-1)\n          if (last_char == \":\") then\n            parts[\"multi-sym-method-call\"] = true\n          end\n          if ((last_char == \":\") or (last_char == \".\")) then\n            parts[(#parts + 1)] = part:sub(1, -2)\n          else\n            parts[(#parts + 1)] = part\n          end\n        end\n        return (next(parts) and parts)\n      end\n      return ((str:match(\"%.\") or str:match(\":\")) and not str:match(\"%.%.\") and (str:byte() ~= string.byte(\".\")) and (str:byte() ~= string.byte(\":\")) and (str:byte(-1) ~= string.byte(\".\")) and (str:byte(-1) ~= string.byte(\":\")) and _148_())\n    end\n  end\n  local function call_of_3f(ast, callee)\n    return (list_3f(ast) and sym_3f(ast[1], callee))\n  end\n  local function quoted_3f(symbol)\n    return symbol.quoted\n  end\n  local function idempotent_expr_3f(x)\n    local t = type(x)\n    return ((t == \"string\") or (t == \"number\") or (t == \"boolean\") or (sym_3f(x) and not multi_sym_3f(x)))\n  end\n  local function walk_tree(root, f, _3fcustom_iterator)\n    local function walk(iterfn, parent, idx, node)\n      if (f(idx, node, parent) and not sym_3f(node)) then\n        for k, v in iterfn(node) do\n          walk(iterfn, node, k, v)\n        end\n        return nil\n      end\n    end\n    walk((_3fcustom_iterator or pairs), nil, nil, root)\n    return root\n  end\n  local root = nil\n  local function _153_()\n  end\n  root = {chunk = nil, options = nil, reset = _153_, scope = nil}\n  root[\"set-reset\"] = function(_154_0)\n    local _155_ = _154_0\n    local chunk = _155_[\"chunk\"]\n    local options = _155_[\"options\"]\n    local reset = _155_[\"reset\"]\n    local scope = _155_[\"scope\"]\n    root.reset = function()\n      root.chunk, root.scope, root.options, root.reset = chunk, scope, options, reset\n      return nil\n    end\n    return root.reset\n  end\n  local lua_keywords = {[\"and\"] = true, [\"break\"] = true, [\"do\"] = true, [\"else\"] = true, [\"elseif\"] = true, [\"end\"] = true, [\"false\"] = true, [\"for\"] = true, [\"function\"] = true, [\"goto\"] = true, [\"if\"] = true, [\"in\"] = true, [\"local\"] = true, [\"nil\"] = true, [\"not\"] = true, [\"or\"] = true, [\"repeat\"] = true, [\"return\"] = true, [\"then\"] = true, [\"true\"] = true, [\"until\"] = true, [\"while\"] = true}\n  local function lua_keyword_3f(str)\n    local function _157_()\n      local _156_0 = root.options\n      if (nil ~= _156_0) then\n        _156_0 = _156_0.keywords\n      end\n      if (nil ~= _156_0) then\n        _156_0 = _156_0[str]\n      end\n      return _156_0\n    end\n    return (lua_keywords[str] or _157_())\n  end\n  local function valid_lua_identifier_3f(str)\n    return (str:match(\"^[%a_][%w_]*$\") and not lua_keyword_3f(str))\n  end\n  local propagated_options = {\"allowedGlobals\", \"indent\", \"correlate\", \"useMetadata\", \"env\", \"compiler-env\", \"compilerEnv\"}\n  local function propagate_options(options, subopts)\n    local tbl_14_ = subopts\n    for _, name in ipairs(propagated_options) do\n      local k_15_, v_16_ = name, options[name]\n      if ((k_15_ ~= nil) and (v_16_ ~= nil)) then\n        tbl_14_[k_15_] = v_16_\n      end\n    end\n    return tbl_14_\n  end\n  local function ast_source(ast)\n    if (table_3f(ast) or sequence_3f(ast)) then\n      return (getmetatable(ast) or {})\n    elseif (\"table\" == type(ast)) then\n      return ast\n    else\n      return {}\n    end\n  end\n  local function warn(msg, _3fast, _3ffilename, _3fline)\n    if (_G.io and _G.io.stderr) then\n      local loc = nil\n      do\n        local _162_0 = ast_source(_3fast)\n        if ((_G.type(_162_0) == \"table\") and (nil ~= _162_0.filename) and (nil ~= _162_0.line)) then\n          local filename = _162_0.filename\n          local line = _162_0.line\n          loc = (filename .. \":\" .. line .. \": \")\n        else\n          local _ = _162_0\n          if (_3ffilename and _3fline) then\n            loc = (_3ffilename .. \":\" .. _3fline .. \": \")\n          else\n            loc = \"\"\n          end\n        end\n      end\n      return (_G.io.stderr):write((\"--WARNING: %s%s\\n\"):format(loc, tostring(msg)))\n    end\n  end\n  local warned = {}\n  local function check_plugin_version(_166_0)\n    local _167_ = _166_0\n    local plugin = _167_\n    local name = _167_[\"name\"]\n    local versions = _167_[\"versions\"]\n    if (not member_3f(version:gsub(\"-dev\", \"\"), (versions or {})) and not (string_3f(versions) and version:find(versions)) and not warned[plugin]) then\n      warned[plugin] = true\n      return warn(string.format(\"plugin %s does not support Fennel version %s\", (name or \"unknown\"), version))\n    end\n  end\n  local function hook_opts(event, _3foptions, ...)\n    local plugins = nil\n    local function _170_(...)\n      local _169_0 = _3foptions\n      if (nil ~= _169_0) then\n        _169_0 = _169_0.plugins\n      end\n      return _169_0\n    end\n    local function _173_(...)\n      local _172_0 = root.options\n      if (nil ~= _172_0) then\n        _172_0 = _172_0.plugins\n      end\n      return _172_0\n    end\n    plugins = (_170_(...) or _173_(...))\n    if plugins then\n      local result = nil\n      for _, plugin in ipairs(plugins) do\n        if (nil ~= result) then break end\n        check_plugin_version(plugin)\n        local _175_0 = plugin[event]\n        if (nil ~= _175_0) then\n          local f = _175_0\n          result = f(...)\n        else\n        result = nil\n        end\n      end\n      return result\n    end\n  end\n  local function hook(event, ...)\n    return hook_opts(event, root.options, ...)\n  end\n  return {[\"ast-source\"] = ast_source, [\"call-of?\"] = call_of_3f, [\"comment?\"] = comment_3f, [\"debug-on?\"] = debug_on_3f, [\"every?\"] = every_3f, [\"expr?\"] = expr_3f, [\"fennel-module\"] = nil, [\"get-in\"] = get_in, [\"hook-opts\"] = hook_opts, [\"idempotent-expr?\"] = idempotent_expr_3f, [\"kv-table?\"] = kv_table_3f, [\"list?\"] = list_3f, [\"lua-keyword?\"] = lua_keyword_3f, [\"macro-path\"] = table.concat({\"./?.fnl\", \"./?/init-macros.fnl\", \"./?/init.fnl\", getenv(\"FENNEL_MACRO_PATH\")}, \";\"), [\"member?\"] = member_3f, [\"multi-sym?\"] = multi_sym_3f, [\"propagate-options\"] = propagate_options, [\"quoted?\"] = quoted_3f, [\"runtime-version\"] = runtime_version, [\"sequence?\"] = sequence_3f, [\"string?\"] = string_3f, [\"sym?\"] = sym_3f, [\"table?\"] = table_3f, [\"valid-lua-identifier?\"] = valid_lua_identifier_3f, [\"varg?\"] = varg_3f, [\"walk-tree\"] = walk_tree, allpairs = allpairs, comment = comment_2a, copy = copy, expr = expr, hook = hook, len = len, list = list, maxn = maxn, path = table.concat({\"./?.fnl\", \"./?/init.fnl\", getenv(\"FENNEL_PATH\")}, \";\"), root = root, sequence = sequence, stablepairs = stablepairs, sym = sym, varg = varg, version = version, warn = warn}\nend\nutils = require(\"fennel.utils\")\nlocal parser = require(\"fennel.parser\")\nlocal compiler = require(\"fennel.compiler\")\nlocal specials = require(\"fennel.specials\")\nlocal repl = require(\"fennel.repl\")\nlocal view = require(\"fennel.view\")\nlocal function eval_env(env, opts)\n  if (env == \"_COMPILER\") then\n    local env0 = specials[\"make-compiler-env\"](nil, compiler.scopes.compiler, {}, opts)\n    if (opts.allowedGlobals == nil) then\n      opts.allowedGlobals = specials[\"current-global-names\"](env0)\n    end\n    return specials[\"wrap-env\"](env0)\n  else\n    return (env and specials[\"wrap-env\"](env))\n  end\nend\nlocal function eval_opts(options, str)\n  local opts = utils.copy(options)\n  if (opts.allowedGlobals == nil) then\n    opts.allowedGlobals = specials[\"current-global-names\"](opts.env)\n  end\n  if (not opts.filename and not opts.source) then\n    opts.source = str\n  end\n  if (opts.env == \"_COMPILER\") then\n    opts.scope = compiler[\"make-scope\"](compiler.scopes.compiler)\n  end\n  return opts\nend\nlocal function eval(str, _3foptions, ...)\n  local opts = eval_opts(_3foptions, str)\n  local env = eval_env(opts.env, opts)\n  local lua_source = compiler[\"compile-string\"](str, opts)\n  local loader = nil\n  local function _814_(...)\n    if opts.filename then\n      return (\"@\" .. opts.filename)\n    else\n      return str\n    end\n  end\n  loader = specials[\"load-code\"](lua_source, env, _814_(...))\n  opts.filename = nil\n  return loader(...)\nend\nlocal function dofile_2a(filename, _3foptions, ...)\n  local opts = utils.copy(_3foptions)\n  local f = assert(io.open(filename, \"rb\"))\n  local source = assert(f:read(\"*all\"), (\"Could not read \" .. filename))\n  f:close()\n  opts.filename = filename\n  return eval(source, opts, ...)\nend\nlocal function syntax()\n  local body_3f = {\"when\", \"with-open\", \"collect\", \"icollect\", \"fcollect\", \"lambda\", \"\\206\\187\", \"macro\", \"match\", \"match-try\", \"case\", \"case-try\", \"accumulate\", \"faccumulate\", \"doto\"}\n  local binding_3f = {\"collect\", \"icollect\", \"fcollect\", \"each\", \"for\", \"let\", \"with-open\", \"accumulate\", \"faccumulate\"}\n  local define_3f = {\"fn\", \"lambda\", \"\\206\\187\", \"var\", \"local\", \"macro\", \"macros\", \"global\"}\n  local deprecated = {\"~=\", \"#\", \"global\", \"require-macros\", \"pick-args\"}\n  local out = {}\n  for k, v in pairs(compiler.scopes.global.specials) do\n    local metadata = (compiler.metadata[v] or {})\n    out[k] = {[\"binding-form?\"] = utils[\"member?\"](k, binding_3f), [\"body-form?\"] = metadata[\"fnl/body-form?\"], [\"define?\"] = utils[\"member?\"](k, define_3f), [\"deprecated?\"] = utils[\"member?\"](k, deprecated), [\"special?\"] = true}\n  end\n  for k in pairs(compiler.scopes.global.macros) do\n    out[k] = {[\"binding-form?\"] = utils[\"member?\"](k, binding_3f), [\"body-form?\"] = utils[\"member?\"](k, body_3f), [\"define?\"] = utils[\"member?\"](k, define_3f), [\"macro?\"] = true}\n  end\n  for k, v in pairs(_G) do\n    local _815_0 = type(v)\n    if (_815_0 == \"function\") then\n      out[k] = {[\"function?\"] = true, [\"global?\"] = true}\n    elseif (_815_0 == \"table\") then\n      if not k:find(\"^_\") then\n        for k2, v2 in pairs(v) do\n          if (\"function\" == type(v2)) then\n            out[(k .. \".\" .. k2)] = {[\"function?\"] = true, [\"global?\"] = true}\n          end\n        end\n        out[k] = {[\"global?\"] = true}\n      end\n    end\n  end\n  return out\nend\nlocal mod = {[\"ast-source\"] = utils[\"ast-source\"], [\"comment?\"] = utils[\"comment?\"], [\"compile-stream\"] = compiler[\"compile-stream\"], [\"compile-string\"] = compiler[\"compile-string\"], [\"list?\"] = utils[\"list?\"], [\"load-code\"] = specials[\"load-code\"], [\"macro-loaded\"] = specials[\"macro-loaded\"], [\"macro-path\"] = utils[\"macro-path\"], [\"macro-searchers\"] = specials[\"macro-searchers\"], [\"make-searcher\"] = specials[\"make-searcher\"], [\"multi-sym?\"] = utils[\"multi-sym?\"], [\"runtime-version\"] = utils[\"runtime-version\"], [\"search-module\"] = specials[\"search-module\"], [\"sequence?\"] = utils[\"sequence?\"], [\"string-stream\"] = parser[\"string-stream\"], [\"sym-char?\"] = parser[\"sym-char?\"], [\"sym?\"] = utils[\"sym?\"], [\"table?\"] = utils[\"table?\"], [\"varg?\"] = utils[\"varg?\"], comment = utils.comment, compile = compiler.compile, compile1 = compiler.compile1, compileStream = compiler[\"compile-stream\"], compileString = compiler[\"compile-string\"], doc = specials.doc, dofile = dofile_2a, eval = eval, gensym = compiler.gensym, getinfo = compiler.getinfo, granulate = parser.granulate, list = utils.list, loadCode = specials[\"load-code\"], macroLoaded = specials[\"macro-loaded\"], macroPath = utils[\"macro-path\"], macroSearchers = specials[\"macro-searchers\"], makeSearcher = specials[\"make-searcher\"], make_searcher = specials[\"make-searcher\"], mangle = compiler[\"global-mangling\"], metadata = compiler.metadata, parser = parser.parser, path = utils.path, repl = repl, runtimeVersion = utils[\"runtime-version\"], scope = compiler[\"make-scope\"], searchModule = specials[\"search-module\"], searcher = specials[\"make-searcher\"](), sequence = utils.sequence, stringStream = parser[\"string-stream\"], sym = utils.sym, syntax = syntax, traceback = compiler.traceback, unmangle = compiler[\"global-unmangling\"], varg = utils.varg, version = utils.version, view = view}\nmod.install = function(_3fopts)\n  table.insert((package.searchers or package.loaders), specials[\"make-searcher\"](_3fopts))\n  return mod\nend\nutils[\"fennel-module\"] = mod\ndo\n  local module_name = \"fennel.macros\"\n  local _ = nil\n  local function _819_()\n    return mod\n  end\n  package.preload[module_name] = _819_\n  _ = nil\n  local env = nil\n  do\n    local _820_0 = specials[\"make-compiler-env\"](nil, compiler.scopes.compiler, {})\n    _820_0[\"utils\"] = utils\n    _820_0[\"fennel\"] = mod\n    _820_0[\"get-function-metadata\"] = specials[\"get-function-metadata\"]\n    env = _820_0\n  end\n  local built_ins = eval([===[;; fennel-ls: macro-file\n  \n  ;; These macros are awkward because their definition cannot rely on the any\n  ;; built-in macros, only special forms. (no when, no icollect, etc)\n  \n  (fn copy [t]\n    (let [out []]\n      (each [_ v (ipairs t)] (table.insert out v))\n      (setmetatable out (getmetatable t))))\n  \n  (fn ->* [val ...]\n    \"Thread-first macro.\n  Take the first value and splice it into the second form as its first argument.\n  The value of the second form is spliced into the first arg of the third, etc.\"\n    (var x val)\n    (each [_ e (ipairs [...])]\n      (let [elt (if (list? e) (copy e) (list e))]\n        (table.insert elt 2 x)\n        (set x elt)))\n    x)\n  \n  (fn ->>* [val ...]\n    \"Thread-last macro.\n  Same as ->, except splices the value into the last position of each form\n  rather than the first.\"\n    (var x val)\n    (each [_ e (ipairs [...])]\n      (let [elt (if (list? e) (copy e) (list e))]\n        (table.insert elt x)\n        (set x elt)))\n    x)\n  \n  (fn -?>* [val ?e ...]\n    \"Nil-safe thread-first macro.\n  Same as -> except will short-circuit with nil when it encounters a nil value.\"\n    (if (= nil ?e)\n        val\n        (not (utils.idempotent-expr? val))\n        ;; try again, but with an eval-safe val\n        `(let [tmp# ,val]\n          (-?> tmp# ,?e ,...))\n        (let [call (if (list? ?e) (copy ?e) (list ?e))]\n          (table.insert call 2 val)\n          `(if (not= nil ,val)\n               ,(-?>* call ...)))))\n  \n  (fn -?>>* [val ?e ...]\n    \"Nil-safe thread-last macro.\n  Same as ->> except will short-circuit with nil when it encounters a nil value.\"\n    (if (= nil ?e)\n        val\n        (not (utils.idempotent-expr? val))\n        ;; try again, but with an eval-safe val\n        `(let [tmp# ,val]\n          (-?>> tmp# ,?e ,...))\n        (let [call (if (list? ?e) (copy ?e) (list ?e))]\n          (table.insert call val)\n          `(if (not= ,val nil)\n               ,(-?>>* call ...)))))\n  \n  (fn ?dot [tbl ...]\n    \"Nil-safe table look up.\n  Same as . (dot), except will short-circuit with nil when it encounters\n  a nil value in any of subsequent keys.\"\n    (let [head (gensym :t)\n          lookups `(do\n                     (var ,head ,tbl)\n                     ,head)]\n      (each [i k (ipairs [...])]\n        ;; Kinda gnarly to reassign in place like this, but it emits the best lua.\n        ;; With this impl, it emits a flat, concise, and readable set of ifs\n        (table.insert lookups (+ i 2)\n                      `(if (not= nil ,head) (set ,head (. ,head ,k)))))\n      lookups))\n  \n  (fn doto* [val ...]\n    \"Evaluate val and splice it into the first argument of subsequent forms.\"\n    (assert (not= val nil) \"missing subject\")\n    (if (not (utils.idempotent-expr? val))\n      `(let [tmp# ,val]\n         (doto tmp# ,...))\n      (let [form `(do)]\n        (each [_ elt (ipairs [...])]\n          (let [elt (if (list? elt) (copy elt) (list elt))]\n            (table.insert elt 2 val)\n            (table.insert form elt)))\n        (table.insert form val)\n        form)))\n  \n  (fn when* [condition body1 ...]\n    \"Evaluate body for side-effects only when condition is truthy.\"\n    (assert body1 \"expected body\")\n    `(if ,condition\n         (do\n           ,body1\n           ,...)))\n  \n  (fn with-open* [closable-bindings ...]\n    \"Like `let`, but invokes (v:close) on each binding after evaluating the body.\n  The body is evaluated inside `xpcall` so that bound values will be closed upon\n  encountering an error before propagating it.\"\n    (let [bodyfn `(fn []\n                    ,...)\n          closer `(fn close-handlers# [ok# ...]\n                    (if ok# ... (error ... 0)))\n          traceback `(. (or (. package.loaded ,(fennel-module-name)) _G.debug {})\n                        :traceback)]\n      (for [i 1 (length closable-bindings) 2]\n        (assert (sym? (. closable-bindings i))\n                \"with-open only allows symbols in bindings\")\n        (table.insert closer 4 `(: ,(. closable-bindings i) :close)))\n      `(let ,closable-bindings\n         ,closer\n         (close-handlers# (_G.xpcall ,bodyfn ,traceback)))))\n  \n  (fn extract-into [iter-tbl]\n    (var (into iter-out found?) (values [] (copy iter-tbl)))\n    (for [i (length iter-tbl) 2 -1]\n      (let [item (. iter-tbl i)]\n        (if (or (sym? item \"&into\") (= :into item))\n            (do\n              (assert (not found?) \"expected only one &into clause\")\n              (set found? true)\n              (set into (. iter-tbl (+ i 1)))\n              (table.remove iter-out i)\n              (table.remove iter-out i)))))\n    (assert (or (not found?) (sym? into) (table? into) (list? into))\n            \"expected table, function call, or symbol in &into clause\")\n    (values into iter-out found?))\n  \n  (fn collect* [iter-tbl key-expr value-expr ...]\n    \"Return a table made by running an iterator and evaluating an expression that\n  returns key-value pairs to be inserted sequentially into the table.  This can\n  be thought of as a table comprehension. The body should provide two expressions\n  (used as key and value) or nil, which causes it to be omitted.\n  \n  For example,\n    (collect [k v (pairs {:apple \\\"red\\\" :orange \\\"orange\\\"})]\n      (values v k))\n  returns\n    {:red \\\"apple\\\" :orange \\\"orange\\\"}\n  \n  Supports an &into clause after the iterator to put results in an existing table.\n  Supports early termination with an &until clause.\"\n    (assert (and (sequence? iter-tbl) (<= 2 (length iter-tbl)))\n            \"expected iterator binding table\")\n    (assert (not= nil key-expr) \"expected key and value expression\")\n    (assert (= nil ...)\n            \"expected 1 or 2 body expressions; wrap multiple expressions with do\")\n    (assert (or value-expr (list? key-expr)) \"need key and value\")\n    (let [kv-expr (if (= nil value-expr) key-expr `(values ,key-expr ,value-expr))\n          (into iter) (extract-into iter-tbl)]\n      `(let [tbl# ,into]\n         (each ,iter\n           (let [(k# v#) ,kv-expr]\n             (if (and (not= k# nil) (not= v# nil))\n               (tset tbl# k# v#))))\n         tbl#)))\n  \n  (fn seq-collect [how iter-tbl value-expr ...]\n    \"Common part between icollect and fcollect for producing sequential tables.\n  \n  Iteration code only differs in using the for or each keyword, the rest\n  of the generated code is identical.\"\n    (assert (not= nil value-expr) \"expected table value expression\")\n    (assert (= nil ...)\n            \"expected exactly one body expression. Wrap multiple expressions in do\")\n    (let [(into iter has-into?) (extract-into iter-tbl)]\n      (if has-into?\n          `(let [tbl# ,into]\n             (,how ,iter (let [val# ,value-expr]\n                           (table.insert tbl# val#)))\n             tbl#)\n          ;; believe it or not, using a var here has a pretty good performance\n          ;; boost: https://p.hagelb.org/icollect-performance.html\n          ;; but it doesn't always work with &into clauses, so skip if that's used\n          `(let [tbl# []]\n             (var i# 0)\n             (,how ,iter\n                   (let [val# ,value-expr]\n                     (when (not= nil val#)\n                       (set i# (+ i# 1))\n                       (tset tbl# i# val#))))\n             tbl#))))\n  \n  (fn icollect* [iter-tbl value-expr ...]\n    \"Return a sequential table made by running an iterator and evaluating an\n  expression that returns values to be inserted sequentially into the table.\n  This can be thought of as a table comprehension. If the body evaluates to nil\n  that element is omitted.\n  \n  For example,\n    (icollect [_ v (ipairs [1 2 3 4 5])]\n      (when (not= v 3)\n        (* v v)))\n  returns\n    [1 4 16 25]\n  \n  Supports an &into clause after the iterator to put results in an existing table.\n  Supports early termination with an &until clause.\"\n    (assert (and (sequence? iter-tbl) (<= 2 (length iter-tbl)))\n            \"expected iterator binding table\")\n    (seq-collect 'each iter-tbl value-expr ...))\n  \n  (fn fcollect* [iter-tbl value-expr ...]\n    \"Return a sequential table made by advancing a range as specified by\n  for, and evaluating an expression that returns values to be inserted\n  sequentially into the table.  This can be thought of as a range\n  comprehension. If the body evaluates to nil that element is omitted.\n  \n  For example,\n    (fcollect [i 1 10 2]\n      (when (not= i 3)\n        (* i i)))\n  returns\n    [1 25 49 81]\n  \n  Supports an &into clause after the range to put results in an existing table.\n  Supports early termination with an &until clause.\"\n    (assert (and (sequence? iter-tbl) (< 2 (length iter-tbl)))\n            \"expected range binding table\")\n    (seq-collect 'for iter-tbl value-expr ...))\n  \n  (fn accumulate-impl [for? iter-tbl body ...]\n    (assert (and (sequence? iter-tbl) (<= 4 (length iter-tbl)))\n            \"expected initial value and iterator binding table\")\n    (assert (not= nil body) \"expected body expression\")\n    (assert (= nil ...)\n            \"expected exactly one body expression. Wrap multiple expressions with do\")\n    (let [[accum-var accum-init] iter-tbl\n          iter (sym (if for? \"for\" \"each\"))] ; accumulate or faccumulate?\n      `(do\n         (var ,accum-var ,accum-init)\n         (,iter ,[(unpack iter-tbl 3)]\n                (set ,accum-var ,body))\n         ,(if (list? accum-var)\n            (list (sym :values) (unpack accum-var))\n            accum-var))))\n  \n  (fn accumulate* [iter-tbl body ...]\n    \"Accumulation macro.\n  \n  It takes a binding table and an expression as its arguments.  In the binding\n  table, the first form starts out bound to the second value, which is an initial\n  accumulator. The rest are an iterator binding table in the format `each` takes.\n  \n  It runs through the iterator in each step of which the given expression is\n  evaluated, and the accumulator is set to the value of the expression. It\n  eventually returns the final value of the accumulator.\n  \n  For example,\n    (accumulate [total 0\n                 _ n (pairs {:apple 2 :orange 3})]\n      (+ total n))\n  returns 5\"\n    (accumulate-impl false iter-tbl body ...))\n  \n  (fn faccumulate* [iter-tbl body ...]\n    \"Identical to accumulate, but after the accumulator the binding table is the\n  same as `for` instead of `each`. Like collect to fcollect, will iterate over a\n  numerical range like `for` rather than an iterator.\"\n    (accumulate-impl true iter-tbl body ...))\n  \n  (fn partial* [f ...]\n    \"Return a function with all arguments partially applied to f.\"\n    (assert f \"expected a function to partially apply\")\n    (let [bindings []\n          args []]\n      (each [_ arg (ipairs [...])]\n        (if (utils.idempotent-expr? arg)\n          (table.insert args arg)\n          (let [name (gensym)]\n            (table.insert bindings name)\n            (table.insert bindings arg)\n            (table.insert args name))))\n      (let [body (list f (unpack args))]\n        (table.insert body _VARARG)\n        ;; only use the extra let if we need double-eval protection\n        (if (= nil (. bindings 1))\n            `(fn [,_VARARG] ,body)\n            `(let ,bindings\n               (fn [,_VARARG] ,body))))))\n  \n  (fn pick-args* [n f]\n    \"Create a function of arity n that applies its arguments to f. Deprecated.\"\n    (if (and _G.io _G.io.stderr)\n        (_G.io.stderr:write\n         \"-- WARNING: pick-args is deprecated and will be removed in the future.\\n\"))\n    (let [bindings []]\n      (for [i 1 n] (tset bindings i (gensym)))\n      `(fn ,bindings (,f ,(unpack bindings)))))\n  \n  (fn lambda* [...]\n    \"Function literal with nil-checked arguments.\n  Like `fn`, but will throw an exception if a declared argument is passed in as\n  nil, unless that argument's name begins with a question mark.\"\n    (let [args [...]\n          args-len (length args)\n          has-internal-name? (sym? (. args 1))\n          arglist (if has-internal-name? (. args 2) (. args 1))\n          metadata-position (if has-internal-name? 3 2)\n          (_ check-position) (get-function-metadata [:lambda ...] arglist\n                                                    metadata-position)\n          empty-body? (< args-len check-position)]\n      (fn check! [a]\n        (if (table? a)\n            (each [_ a (pairs a)] (check! a))\n            (let [as (tostring a)]\n              (and (not (as:find \"^?\")) (not= as \"&\") (not (as:find \"^_\"))\n                   (not= as \"...\") (not= as \"&as\")))\n            (table.insert args check-position\n                          `(_G.assert (not= nil ,a)\n                                      ,(: \"Missing argument %s on %s:%s\" :format\n                                          (tostring a)\n                                          (or a.filename :unknown)\n                                          (or a.line \"?\"))))))\n  \n      (assert (= :table (type arglist)) \"expected arg list\")\n      (each [_ a (ipairs arglist)] (check! a))\n      (if empty-body? (table.insert args (sym :nil)))\n      `(fn ,(unpack args))))\n  \n  (fn macro* [name ...]\n    \"Define a single macro.\"\n    (assert (sym? name) \"expected symbol for macro name\")\n    (local args [...])\n    `(macros {,(tostring name) (fn ,(unpack args))}))\n  \n  (fn macrodebug* [form return?]\n    \"Print the resulting form after performing macroexpansion.\n  With a second argument, returns expanded form as a string instead of printing.\"\n    (let [handle (if return? `do `print)]\n      ;; TODO: Provide a helpful compiler error in the unlikely edge case of an\n      ;; infinite AST instead of the current \"silently expand until max depth\"\n      `(,handle ,(view (macroexpand form _SCOPE) {:detect-cycles? false}))))\n  \n  (fn import-macros* [binding1 module-name1 ...]\n    \"Bind a table of macros from each macro module according to a binding form.\n  Each binding form can be either a symbol or a k/v destructuring table.\n  Example:\n    (import-macros mymacros                 :my-macros    ; bind to symbol\n                   {:macro1 alias : macro2} :proj.macros) ; import by name\"\n    (assert (and binding1 module-name1 (= 0 (% (select \"#\" ...) 2)))\n            \"expected even number of binding/modulename pairs\")\n    (for [i 1 (select \"#\" binding1 module-name1 ...) 2]\n      ;; delegate the actual loading of the macros to the require-macros\n      ;; special which already knows how to set up the compiler env and stuff.\n      ;; this is weird because require-macros is deprecated but it works.\n      (let [(binding modname) (select i binding1 module-name1 ...)\n            scope (get-scope)\n            ;; if the module-name is an expression (and not just a string) we\n            ;; patch our expression to have the correct source filename so\n            ;; require-macros can pass it down when resolving the module-name.\n            expr `(import-macros ,modname)\n            filename (if (list? modname) (. modname 1 :filename) :unknown)\n            _ (tset expr :filename filename)\n            macros* (_SPECIALS.require-macros expr scope {} binding)]\n        (if (sym? binding)\n            ;; bind whole table of macros to table bound to symbol\n            (tset scope.macros (. binding 1) macros*)\n            ;; 1-level table destructuring for importing individual macros\n            (table? binding)\n            (each [macro-name [import-key] (pairs binding)]\n              (assert (= :function (type (. macros* macro-name)))\n                      (.. \"macro \" macro-name \" not found in module \"\n                          (tostring modname)))\n              (tset scope.macros import-key (. macros* macro-name))))))\n    nil)\n  \n  (fn assert-repl* [condition ...]\n    \"Enter into a debug REPL  and print the message when condition is false/nil.\n  Works as a drop-in replacement for Lua's `assert`.\n  REPL `,return` command returns values to assert in place to continue execution.\"\n    {:fnl/arglist [condition ?message ...]}\n    (fn add-locals [{: symmeta : parent} locals]\n      (each [name (pairs symmeta)]\n        (tset locals name (sym name)))\n      (if parent (add-locals parent locals) locals))\n    `(let [unpack# (or table.unpack _G.unpack)\n           pack# (or table.pack #(doto [$...] (tset :n (select :# $...))))\n           ;; need to pack/unpack input args to account for (assert (foo)),\n           ;; because assert returns *all* arguments upon success\n           vals# (pack# ,condition ,...)\n           condition# (. vals# 1)\n           message# (or (. vals# 2) \"assertion failed, entering repl.\")]\n       (if (not condition#)\n           (let [opts# {:assert-repl? true}\n                 fennel# (require ,(fennel-module-name))\n                 locals# ,(add-locals (get-scope) [])]\n             (set opts#.message (fennel#.traceback message#))\n             (set opts#.env (collect [k# v# (pairs _G) &into locals#]\n                              (if (= nil (. locals# k#)) (values k# v#))))\n             (_G.assert (fennel#.repl opts#)))\n           (values (unpack# vals# 1 vals#.n)))))\n  \n  {:-> ->*\n   :->> ->>*\n   :-?> -?>*\n   :-?>> -?>>*\n   :?. ?dot\n   :doto doto*\n   :when when*\n   :with-open with-open*\n   :collect collect*\n   :icollect icollect*\n   :fcollect fcollect*\n   :accumulate accumulate*\n   :faccumulate faccumulate*\n   :partial partial*\n   :lambda lambda*\n   :\206\187 lambda*\n   :pick-args pick-args*\n   :macro macro*\n   :macrodebug macrodebug*\n   :import-macros import-macros*\n   :assert-repl assert-repl*}\n  ]===], {env = env, filename = \"src/fennel/macros.fnl\", moduleName = module_name, scope = compiler.scopes.compiler, useMetadata = true})\n  local _0 = nil\n  for k, v in pairs(built_ins) do\n    compiler.scopes.global.macros[k] = v\n  end\n  _0 = nil\n  local match_macros = eval([===[;; fennel-ls: macro-file\n  \n  ;;; Pattern matching\n  ;; This is separated out so we can use the \"core\" macros during the\n  ;; implementation of pattern matching.\n  \n  (fn copy [t] (collect [k v (pairs t)] k v))\n  \n  (fn double-eval-safe? [x type]\n    (or (= :number type) (= :string type) (= :boolean type)\n        (and (sym? x) (not (multi-sym? x)))))\n  \n  (fn with [opts k]\n    (doto (copy opts) (tset k true)))\n  \n  (fn without [opts k]\n    (doto (copy opts) (tset k nil)))\n  \n  (fn case-values [vals pattern unifications case-pattern opts]\n    (let [condition `(and)\n          bindings []]\n      (each [i pat (ipairs pattern)]\n        (let [(subcondition subbindings) (case-pattern [(. vals i)] pat\n                                                        unifications (without opts :multival?))]\n          (table.insert condition subcondition)\n          (icollect [_ b (ipairs subbindings) &into bindings] b)))\n      (values condition bindings)))\n  \n  (fn case-table [val pattern unifications case-pattern opts]\n    (let [condition `(and (= (_G.type ,val) :table))\n          bindings []]\n      (each [k pat (pairs pattern)]\n        (if (sym? pat :&)\n            (let [rest-pat (. pattern (+ k 1))\n                  rest-val `(select ,k ((or table.unpack _G.unpack) ,val))\n                  subcondition (case-table `(pick-values 1 ,rest-val)\n                                            rest-pat unifications case-pattern\n                                            (without opts :multival?))]\n              (if (not (sym? rest-pat))\n                  (table.insert condition subcondition))\n              (assert (= nil (. pattern (+ k 2)))\n                      \"expected & rest argument before last parameter\")\n              (table.insert bindings rest-pat)\n              (table.insert bindings [rest-val]))\n            (sym? k :&as)\n            (do\n              (table.insert bindings pat)\n              (table.insert bindings val))\n            (and (= :number (type k)) (sym? pat :&as))\n            (do\n              (assert (= nil (. pattern (+ k 2)))\n                      \"expected &as argument before last parameter\")\n              (table.insert bindings (. pattern (+ k 1)))\n              (table.insert bindings val))\n            ;; don't process the pattern right after &/&as; already got it\n            (or (not= :number (type k)) (and (not (sym? (. pattern (- k 1)) :&as))\n                                             (not (sym? (. pattern (- k 1)) :&))))\n            (let [subval `(. ,val ,k)\n                  (subcondition subbindings) (case-pattern [subval] pat\n                                                            unifications\n                                                            (without opts :multival?))]\n              (table.insert condition subcondition)\n              (icollect [_ b (ipairs subbindings) &into bindings] b))))\n      (values condition bindings)))\n  \n  (fn case-guard [vals condition guards unifications case-pattern opts]\n    (if (. guards 1)\n      (let [(pcondition bindings) (case-pattern vals condition unifications opts)\n            condition `(and ,(unpack guards))]\n         (values `(and ,pcondition\n                       (let ,bindings\n                         ,condition)) bindings))\n      (case-pattern vals condition unifications opts)))\n  \n  (fn symbols-in-pattern [pattern]\n    \"gives the set of symbols inside a pattern\"\n    (if (list? pattern)\n        (if (or (sym? (. pattern 1) :where)\n                (sym? (. pattern 1) :=))\n            (symbols-in-pattern (. pattern 2))\n            (sym? (. pattern 2) :?)\n            (symbols-in-pattern (. pattern 1))\n            (let [result {}]\n              (each [_ child-pattern (ipairs pattern)]\n                (collect [name symbol (pairs (symbols-in-pattern child-pattern)) &into result]\n                  name symbol))\n              result))\n        (sym? pattern)\n        (if (and (not (sym? pattern :or))\n                 (not (sym? pattern :nil)))\n            {(tostring pattern) pattern}\n            {})\n        (= (type pattern) :table)\n        (let [result {}]\n          (each [key-pattern value-pattern (pairs pattern)]\n            (collect [name symbol (pairs (symbols-in-pattern key-pattern)) &into result]\n              name symbol)\n            (collect [name symbol (pairs (symbols-in-pattern value-pattern)) &into result]\n              name symbol))\n          result)\n        {}))\n  \n  (fn symbols-in-every-pattern [pattern-list infer-unification?]\n    \"gives a list of symbols that are present in every pattern in the list\"\n    (let [?symbols (accumulate [?symbols nil\n                                _ pattern (ipairs pattern-list)]\n                     (let [in-pattern (symbols-in-pattern pattern)]\n                       (if ?symbols\n                         (do\n                           (each [name (pairs ?symbols)]\n                             (when (not (. in-pattern name))\n                               (tset ?symbols name nil)))\n                           ?symbols)\n                         in-pattern)))]\n      (icollect [_ symbol (pairs (or ?symbols {}))]\n        (if (not (and infer-unification?\n                      (in-scope? symbol)))\n          symbol))))\n  \n  (fn case-or [vals pattern guards unifications case-pattern opts]\n    (let [pattern [(unpack pattern 2)]\n          bindings (symbols-in-every-pattern pattern opts.infer-unification?)]\n      (if (= nil (. bindings 1))\n          ;; no bindings special case generates simple code\n          (let [condition (icollect [_ subpattern (ipairs pattern) &into `(or)]\n                            (case-pattern vals subpattern unifications opts))]\n            (values (if (. guards 1)\n                        `(and ,condition ,(unpack guards))\n                        condition)\n                    []))\n        ;; case with bindings is handled specially, and returns three values instead of two\n        (let [matched? (gensym :matched?)\n              bindings-mangled (icollect [_ binding (ipairs bindings)]\n                                 (gensym (tostring binding)))\n              pre-bindings `(if)]\n          (each [_ subpattern (ipairs pattern)]\n            (let [(subcondition subbindings) (case-guard vals subpattern guards {} case-pattern opts)]\n              (table.insert pre-bindings subcondition)\n              (table.insert pre-bindings `(let ,subbindings\n                                            (values true ,(unpack bindings))))))\n          (values matched?\n                  [`(,(unpack bindings)) `(values ,(unpack bindings-mangled))]\n                  [`(,matched? ,(unpack bindings-mangled)) pre-bindings])))))\n  \n  (fn case-pattern [vals pattern unifications opts top-level?]\n    \"Take the AST of values and a single pattern and returns a condition\n  to determine if it matches as well as a list of bindings to\n  introduce for the duration of the body if it does match.\"\n  \n    ;; This function returns the following values (multival):\n    ;; a \"condition\", which is an expression that determines whether the\n    ;;   pattern should match,\n    ;; a \"bindings\", which bind all of the symbols used in a pattern\n    ;; an optional \"pre-bindings\", which is a list of bindings that happen\n    ;;   before the condition and bindings are evaluated. These should only\n    ;;   come from a (case-or). In this case there should be no recursion:\n    ;;   the call stack should be case-condition > case-pattern > case-or\n    ;;\n    ;; Here are the expected flags in the opts table:\n    ;;   :infer-unification? boolean - if the pattern should guess when to unify  (ie, match -> true, case -> false)\n    ;;   :multival? boolean - if the pattern can contain multivals  (in order to disallow patterns like [(1 2)])\n    ;;   :in-where? boolean - if the pattern is surrounded by (where)  (where opts into more pattern features)\n    ;;   :legacy-guard-allowed? boolean - if the pattern should allow `(a ? b) patterns\n  \n    ;; we have to assume we're matching against multiple values here until we\n    ;; know we're either in a multi-valued clause (in which case we know the #\n    ;; of vals) or we're not, in which case we only care about the first one.\n    (let [[val] vals]\n      (if (and (sym? pattern)\n               (or (sym? pattern :nil)\n                   (and opts.infer-unification?\n                        (in-scope? pattern)\n                        (not (sym? pattern :_)))\n                   (and opts.infer-unification?\n                        (multi-sym? pattern)\n                        (in-scope? (. (multi-sym? pattern) 1)))))\n          (values `(= ,val ,pattern) [])\n          ;; unify a local we've seen already\n          (and (sym? pattern) (. unifications (tostring pattern)))\n          (values `(= ,(. unifications (tostring pattern)) ,val) [])\n          ;; bind a fresh local\n          (sym? pattern)\n          (let [wildcard? (: (tostring pattern) :find \"^_\")]\n            (if (not wildcard?) (tset unifications (tostring pattern) val))\n            (values (if (or wildcard? (string.find (tostring pattern) \"^?\")) true\n                        `(not= ,(sym :nil) ,val)) [pattern val]))\n          ;; opt-in unify with (=)\n          (and (list? pattern)\n               (sym? (. pattern 1) :=)\n               (sym? (. pattern 2)))\n          (let [bind (. pattern 2)]\n            (assert-compile (= 2 (length pattern)) \"(=) should take only one argument\" pattern)\n            (assert-compile (not opts.infer-unification?) \"(=) cannot be used inside of match\" pattern)\n            (assert-compile opts.in-where? \"(=) must be used in (where) patterns\" pattern)\n            (assert-compile (and (sym? bind) (not (sym? bind :nil)) \"= has to bind to a symbol\" bind))\n            (values `(= ,val ,bind) []))\n          ;; where-or clause\n          (and (list? pattern) (sym? (. pattern 1) :where) (list? (. pattern 2)) (sym? (. pattern 2 1) :or))\n          (do\n            (assert-compile top-level? \"can't nest (where) pattern\" pattern)\n            (case-or vals (. pattern 2) [(unpack pattern 3)] unifications case-pattern (with opts :in-where?)))\n          ;; where clause\n          (and (list? pattern) (sym? (. pattern 1) :where))\n          (do\n            (assert-compile top-level? \"can't nest (where) pattern\" pattern)\n            (case-guard vals (. pattern 2) [(unpack pattern 3)] unifications case-pattern (with opts :in-where?)))\n          ;; or clause (not allowed on its own)\n          (and (list? pattern) (sym? (. pattern 1) :or))\n          (do\n            (assert-compile top-level? \"can't nest (or) pattern\" pattern)\n            ;; This assertion can be removed to make patterns more permissive\n            (assert-compile false \"(or) must be used in (where) patterns\" pattern)\n            (case-or vals pattern [] unifications case-pattern opts))\n          ;; guard clause\n          (and (list? pattern) (sym? (. pattern 2) :?))\n          (do\n            (assert-compile opts.legacy-guard-allowed? \"legacy guard clause not supported in case\" pattern)\n            (case-guard vals (. pattern 1) [(unpack pattern 3)] unifications case-pattern opts))\n          ;; multi-valued patterns (represented as lists)\n          (list? pattern)\n          (do\n            (assert-compile opts.multival? \"can't nest multi-value destructuring\" pattern)\n            (case-values vals pattern unifications case-pattern opts))\n          ;; table patterns\n          (= (type pattern) :table)\n          (case-table val pattern unifications case-pattern opts)\n          ;; literal value\n          (values `(= ,val ,pattern) []))))\n  \n  (fn add-pre-bindings [out pre-bindings]\n    \"Decide when to switch from the current `if` AST to a new one\"\n    (if pre-bindings\n        ;; `out` no longer needs to grow.\n        ;; Instead, a new tail `if` AST is introduced, which is where the rest of\n        ;; the clauses will get appended. This way, all future clauses have the\n        ;; pre-bindings in scope.\n        (let [tail `(if)]\n          (table.insert out true)\n          (table.insert out `(let ,pre-bindings ,tail))\n          tail)\n        ;; otherwise, keep growing the current `if` AST.\n        out))\n  \n  (fn case-condition [vals clauses match?]\n    \"Construct the actual `if` AST for the given match values and clauses.\"\n    ;; root is the original `if` AST.\n    ;; out is the `if` AST that is currently being grown.\n    (let [root `(if)]\n      (faccumulate [out root\n                    i 1 (length clauses) 2]\n        (let [pattern (. clauses i)\n              body (. clauses (+ i 1))\n              (condition bindings pre-bindings) (case-pattern vals pattern {}\n                                                              {:multival? true\n                                                               :infer-unification? match?\n                                                               :legacy-guard-allowed? match?}\n                                                              true)\n              out (add-pre-bindings out pre-bindings)]\n          ;; grow the `if` AST by one extra condition\n          (table.insert out condition)\n          (table.insert out `(let ,bindings\n                              ,body))\n          out))\n      root))\n  \n  (fn count-case-multival [pattern]\n    \"Identify the amount of multival values that a pattern requires.\"\n    (if (and (list? pattern) (sym? (. pattern 2) :?))\n        (count-case-multival (. pattern 1))\n        (and (list? pattern) (sym? (. pattern 1) :where))\n        (count-case-multival (. pattern 2))\n        (and (list? pattern) (sym? (. pattern 1) :or))\n        (accumulate [longest 0\n                     _ child-pattern (ipairs pattern)]\n          (math.max longest (count-case-multival child-pattern)))\n        (list? pattern)\n        (length pattern)\n        1))\n  \n  (fn case-count-syms [clauses]\n    \"Find the length of the largest multi-valued clause\"\n    (let [patterns (fcollect [i 1 (length clauses) 2]\n                     (. clauses i))]\n      (accumulate [longest 0\n                   _ pattern (ipairs patterns)]\n        (math.max longest (count-case-multival pattern)))))\n  \n  (fn maybe-optimize-table [val clauses]\n    (if (faccumulate [all (sequence? val) i 1 (length clauses) 2 &until (not all)]\n          (and (sequence? (. clauses i))\n               (accumulate [all2 (next (. clauses i))\n                            _ d (ipairs (. clauses i)) &until (not all2)]\n                 (and all2 (or (not (sym? d)) (not (: (tostring d) :find \"^&\")))))))\n        (values `(values ,(unpack val))\n                (fcollect [i 1 (length clauses)]\n                  (if (= 1 (% i 2))\n                      (list (unpack (. clauses i)))\n                      (. clauses i))))\n        (values val clauses)))\n  \n  (fn case-impl [match? val ...]\n    \"The shared implementation of case and match.\"\n    (assert (not= val nil) \"missing subject\")\n    (assert (= 0 (math.fmod (select :# ...) 2))\n            \"expected even number of pattern/body pairs\")\n    (assert (not= 0 (select :# ...))\n            \"expected at least one pattern/body pair\")\n    (let [(val clauses) (maybe-optimize-table val [...])\n          vals-count (case-count-syms clauses)\n          skips-multiple-eval-protection? (and (= vals-count 1) (double-eval-safe? val))]\n      (if skips-multiple-eval-protection?\n        (case-condition (list val) clauses match?)\n        ;; protect against multiple evaluation of the value, bind against as\n        ;; many values as we ever match against in the clauses.\n        (let [vals (fcollect [_ 1 vals-count &into (list)] (gensym))]\n          (list `let [vals val] (case-condition vals clauses match?))))))\n  \n  (fn case* [val ...]\n    \"Perform pattern matching on val. See reference for details.\n  \n  Syntax:\n  \n  (case data-expression\n    pattern body\n    (where pattern guards*) body\n    (where (or pattern patterns*) guards*) body)\"\n    (case-impl false val ...))\n  \n  (fn match* [val ...]\n    \"Perform pattern matching on val, automatically unifying on variables in\n  local scope. See reference for details.\n  \n  Syntax:\n  \n  (match data-expression\n    pattern body\n    (where pattern guards*) body\n    (where (or pattern patterns*) guards*) body)\"\n    (case-impl true val ...))\n  \n  (fn case-try-step [how expr else pattern body ...]\n    (if (= nil pattern body)\n        expr\n        ;; unlike regular match, we can't know how many values the value\n        ;; might evaluate to, so we have to capture them all in ... via IIFE\n        ;; to avoid double-evaluation.\n        `((fn [...]\n            (,how ...\n              ,pattern ,(case-try-step how body else ...)\n              ,(unpack else)))\n          ,expr)))\n  \n  (fn case-try-impl [how expr pattern body ...]\n    (let [clauses [pattern body ...]\n          last (. clauses (length clauses))\n          catch (if (sym? (and (= :table (type last)) (. last 1)) :catch)\n                   (let [[_ & e] (table.remove clauses)] e) ; remove `catch sym\n                   [`_# `...])]\n      (assert (= 0 (math.fmod (length clauses) 2))\n              \"expected every pattern to have a body\")\n      (assert (= 0 (math.fmod (length catch) 2))\n              \"expected every catch pattern to have a body\")\n      (case-try-step how expr catch (unpack clauses))))\n  \n  (fn case-try* [expr pattern body ...]\n    \"Perform chained pattern matching for a sequence of steps which might fail.\n  \n  The values from the initial expression are matched against the first pattern.\n  If they match, the first body is evaluated and its values are matched against\n  the second pattern, etc.\n  \n  If there is a (catch pat1 body1 pat2 body2 ...) form at the end, any mismatch\n  from the steps will be tried against these patterns in sequence as a fallback\n  just like a normal match. If there is no catch, the mismatched values will be\n  returned as the value of the entire expression.\"\n    (case-try-impl `case expr pattern body ...))\n  \n  (fn match-try* [expr pattern body ...]\n    \"Perform chained pattern matching for a sequence of steps which might fail.\n  \n  The values from the initial expression are matched against the first pattern.\n  If they match, the first body is evaluated and its values are matched against\n  the second pattern, etc.\n  \n  If there is a (catch pat1 body1 pat2 body2 ...) form at the end, any mismatch\n  from the steps will be tried against these patterns in sequence as a fallback\n  just like a normal match. If there is no catch, the mismatched values will be\n  returned as the value of the entire expression.\"\n    (case-try-impl `match expr pattern body ...))\n  \n  {:case case*\n   :case-try case-try*\n   :match match*\n   :match-try match-try*}\n  ]===], {allowedGlobals = false, env = env, filename = \"src/fennel/match.fnl\", moduleName = module_name, scope = compiler.scopes.compiler, useMetadata = true})\n  for k, v in pairs(match_macros) do\n    compiler.scopes.global.macros[k] = v\n  end\n  package.preload[module_name] = nil\nend\nreturn mod\n", fengari = "!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.fengari=e():t.fengari=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,\"a\",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p=\"\",r(r.s=34)}([function(t,e,r){\"use strict\";\n/**\n@license MIT\n\nCopyright \194\169 2017-2018 Benoit Giannangeli\nCopyright \194\169 2017-2018 Daurnimator\nCopyright \194\169 1994\226\128\1472017 Lua.org, PUC-Rio.\n*/var n=r(5);t.exports.FENGARI_AUTHORS=n.FENGARI_AUTHORS,t.exports.FENGARI_COPYRIGHT=n.FENGARI_COPYRIGHT,t.exports.FENGARI_RELEASE=n.FENGARI_RELEASE,t.exports.FENGARI_VERSION=n.FENGARI_VERSION,t.exports.FENGARI_VERSION_MAJOR=n.FENGARI_VERSION_MAJOR,t.exports.FENGARI_VERSION_MINOR=n.FENGARI_VERSION_MINOR,t.exports.FENGARI_VERSION_NUM=n.FENGARI_VERSION_NUM,t.exports.FENGARI_VERSION_RELEASE=n.FENGARI_VERSION_RELEASE,t.exports.luastring_eq=n.luastring_eq,t.exports.luastring_indexOf=n.luastring_indexOf,t.exports.luastring_of=n.luastring_of,t.exports.to_jsstring=n.to_jsstring,t.exports.to_luastring=n.to_luastring,t.exports.to_uristring=n.to_uristring;var a=r(3),u=r(2),s=r(7),o=r(17);t.exports.luaconf=a,t.exports.lua=u,t.exports.lauxlib=s,t.exports.lualib=o},function(t,e,r){\"use strict\";var n,a,u;if(n=\"function\"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(t){for(var e=0,r=t.length,n=new Uint8Array(r);r>e;)n[e]=t[e++];return n},\"function\"==typeof(new Uint8Array).indexOf)a=function(t,e,r){return t.indexOf(e,r)};else{var s=[].indexOf;if(0!==s.call(new Uint8Array(1),0))throw Error(\"missing .indexOf\");a=function(t,e,r){return s.call(t,e,r)}}u=\"function\"==typeof Uint8Array.of?Uint8Array.of.bind(Uint8Array):function(){return n(arguments)};var o=function(t){return t instanceof Uint8Array},l=\"cannot convert invalid utf8 to javascript string\",i=\";,/?:@&=+$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,-_.!~*'()#\".split(\"\").reduce(function(t,e){return t[e.charCodeAt(0)]=!0,t},{}),c={},f=function(t,e){if(\"string\"!=typeof t)throw new TypeError(\"to_luastring expects a javascript string\");if(e){var r=c[t];if(o(r))return r}for(var a=t.length,u=Array(a),s=0,l=0;l<a;++l){var i=t.charCodeAt(l);if(i<=127)u[s++]=i;else if(i<=2047)u[s++]=192|i>>6,u[s++]=128|63&i;else{if(i>=55296&&i<=56319&&l+1<a){var f=t.charCodeAt(l+1);f>=56320&&f<=57343&&(l++,i=1024*(i-55296)+f+9216)}i<=65535?(u[s++]=224|i>>12,u[s++]=128|i>>6&63,u[s++]=128|63&i):(u[s++]=240|i>>18,u[s++]=128|i>>12&63,u[s++]=128|i>>6&63,u[s++]=128|63&i)}}return u=n(u),e&&(c[t]=u),u};t.exports.luastring_from=n,t.exports.luastring_indexOf=a,t.exports.luastring_of=u,t.exports.is_luastring=o,t.exports.luastring_eq=function(t,e){if(t!==e){var r=t.length;if(r!==e.length)return!1;for(var n=0;n<r;n++)if(t[n]!==e[n])return!1}return!0},t.exports.to_jsstring=function(t,e,r,n){if(!o(t))throw new TypeError(\"to_jsstring expects a Uint8Array\");r=void 0===r?t.length:Math.min(t.length,r);for(var a=\"\",u=void 0!==e?e:0;u<r;){var s=t[u++];if(s<128)a+=String.fromCharCode(s);else if(s<194||s>244){if(!n)throw RangeError(l);a+=\"\239\191\189\"}else if(s<=223){if(u>=r){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var i=t[u++];if(128!=(192&i)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}a+=String.fromCharCode(((31&s)<<6)+(63&i))}else if(s<=239){if(u+1>=r){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var c=t[u++];if(128!=(192&c)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var f=t[u++];if(128!=(192&f)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var _=((15&s)<<12)+((63&c)<<6)+(63&f);if(_<=65535)a+=String.fromCharCode(_);else{var p=55296+((_-=65536)>>10),v=_%1024+56320;a+=String.fromCharCode(p,v)}}else{if(u+2>=r){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var h=t[u++];if(128!=(192&h)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var L=t[u++];if(128!=(192&L)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var d=t[u++];if(128!=(192&d)){if(!n)throw RangeError(l);a+=\"\239\191\189\";continue}var A=((7&s)<<18)+((63&h)<<12)+((63&L)<<6)+(63&d),g=55296+((A-=65536)>>10),T=A%1024+56320;a+=String.fromCharCode(g,T)}}return a},t.exports.to_uristring=function(t){if(!o(t))throw new TypeError(\"to_uristring expects a Uint8Array\");for(var e=\"\",r=0;r<t.length;r++){var n=t[r];i[n]?e+=String.fromCharCode(n):e+=\"%\"+(n<16?\"0\":\"\")+n.toString(16)}return e},t.exports.to_luastring=f,t.exports.from_userstring=function(t){if(!o(t)){if(\"string\"!=typeof t)throw new TypeError(\"expects an array of bytes or javascript string\");t=f(t)}return t};var _=f(\"\27Lua\");t.exports.LUA_SIGNATURE=_,t.exports.LUA_VERSION_MAJOR=\"5\",t.exports.LUA_VERSION_MINOR=\"3\",t.exports.LUA_VERSION_NUM=503,t.exports.LUA_VERSION_RELEASE=\"4\",t.exports.LUA_VERSION=\"Lua 5.3\",t.exports.LUA_RELEASE=\"Lua 5.3.4\",t.exports.LUA_COPYRIGHT=\"Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio\",t.exports.LUA_AUTHORS=\"R. Ierusalimschy, L. H. de Figueiredo, W. Celes\";var p={LUA_TNONE:-1,LUA_TNIL:0,LUA_TBOOLEAN:1,LUA_TLIGHTUSERDATA:2,LUA_TNUMBER:3,LUA_TSTRING:4,LUA_TTABLE:5,LUA_TFUNCTION:6,LUA_TUSERDATA:7,LUA_TTHREAD:8,LUA_NUMTAGS:9};p.LUA_TSHRSTR=0|p.LUA_TSTRING,p.LUA_TLNGSTR=16|p.LUA_TSTRING,p.LUA_TNUMFLT=0|p.LUA_TNUMBER,p.LUA_TNUMINT=16|p.LUA_TNUMBER,p.LUA_TLCL=0|p.LUA_TFUNCTION,p.LUA_TLCF=16|p.LUA_TFUNCTION,p.LUA_TCCL=32|p.LUA_TFUNCTION;var v=-r(3).LUAI_MAXSTACK-1e3;t.exports.LUA_HOOKCALL=0,t.exports.LUA_HOOKCOUNT=3,t.exports.LUA_HOOKLINE=2,t.exports.LUA_HOOKRET=1,t.exports.LUA_HOOKTAILCALL=4,t.exports.LUA_MASKCALL=1,t.exports.LUA_MASKCOUNT=8,t.exports.LUA_MASKLINE=4,t.exports.LUA_MASKRET=2,t.exports.LUA_MINSTACK=20,t.exports.LUA_MULTRET=-1,t.exports.LUA_OPADD=0,t.exports.LUA_OPBAND=7,t.exports.LUA_OPBNOT=13,t.exports.LUA_OPBOR=8,t.exports.LUA_OPBXOR=9,t.exports.LUA_OPDIV=5,t.exports.LUA_OPEQ=0,t.exports.LUA_OPIDIV=6,t.exports.LUA_OPLE=2,t.exports.LUA_OPLT=1,t.exports.LUA_OPMOD=3,t.exports.LUA_OPMUL=2,t.exports.LUA_OPPOW=4,t.exports.LUA_OPSHL=10,t.exports.LUA_OPSHR=11,t.exports.LUA_OPSUB=1,t.exports.LUA_OPUNM=12,t.exports.LUA_REGISTRYINDEX=v,t.exports.LUA_RIDX_GLOBALS=2,t.exports.LUA_RIDX_LAST=2,t.exports.LUA_RIDX_MAINTHREAD=1,t.exports.constant_types=p,t.exports.lua_Debug=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.event=NaN,this.name=null,this.namewhat=null,this.what=null,this.source=null,this.currentline=NaN,this.linedefined=NaN,this.lastlinedefined=NaN,this.nups=NaN,this.nparams=NaN,this.isvararg=NaN,this.istailcall=NaN,this.short_src=null,this.i_ci=null},t.exports.lua_upvalueindex=function(t){return v-t},t.exports.thread_status={LUA_OK:0,LUA_YIELD:1,LUA_ERRRUN:2,LUA_ERRSYNTAX:3,LUA_ERRMEM:4,LUA_ERRGCMM:5,LUA_ERRERR:6}},function(t,e,r){\"use strict\";var n=r(1),a=r(19),u=r(11),s=r(8),o=r(12);t.exports.LUA_AUTHORS=n.LUA_AUTHORS,t.exports.LUA_COPYRIGHT=n.LUA_COPYRIGHT,t.exports.LUA_ERRERR=n.thread_status.LUA_ERRERR,t.exports.LUA_ERRGCMM=n.thread_status.LUA_ERRGCMM,t.exports.LUA_ERRMEM=n.thread_status.LUA_ERRMEM,t.exports.LUA_ERRRUN=n.thread_status.LUA_ERRRUN,t.exports.LUA_ERRSYNTAX=n.thread_status.LUA_ERRSYNTAX,t.exports.LUA_HOOKCALL=n.LUA_HOOKCALL,t.exports.LUA_HOOKCOUNT=n.LUA_HOOKCOUNT,t.exports.LUA_HOOKLINE=n.LUA_HOOKLINE,t.exports.LUA_HOOKRET=n.LUA_HOOKRET,t.exports.LUA_HOOKTAILCALL=n.LUA_HOOKTAILCALL,t.exports.LUA_MASKCALL=n.LUA_MASKCALL,t.exports.LUA_MASKCOUNT=n.LUA_MASKCOUNT,t.exports.LUA_MASKLINE=n.LUA_MASKLINE,t.exports.LUA_MASKRET=n.LUA_MASKRET,t.exports.LUA_MINSTACK=n.LUA_MINSTACK,t.exports.LUA_MULTRET=n.LUA_MULTRET,t.exports.LUA_NUMTAGS=n.constant_types.LUA_NUMTAGS,t.exports.LUA_OK=n.thread_status.LUA_OK,t.exports.LUA_OPADD=n.LUA_OPADD,t.exports.LUA_OPBAND=n.LUA_OPBAND,t.exports.LUA_OPBNOT=n.LUA_OPBNOT,t.exports.LUA_OPBOR=n.LUA_OPBOR,t.exports.LUA_OPBXOR=n.LUA_OPBXOR,t.exports.LUA_OPDIV=n.LUA_OPDIV,t.exports.LUA_OPEQ=n.LUA_OPEQ,t.exports.LUA_OPIDIV=n.LUA_OPIDIV,t.exports.LUA_OPLE=n.LUA_OPLE,t.exports.LUA_OPLT=n.LUA_OPLT,t.exports.LUA_OPMOD=n.LUA_OPMOD,t.exports.LUA_OPMUL=n.LUA_OPMUL,t.exports.LUA_OPPOW=n.LUA_OPPOW,t.exports.LUA_OPSHL=n.LUA_OPSHL,t.exports.LUA_OPSHR=n.LUA_OPSHR,t.exports.LUA_OPSUB=n.LUA_OPSUB,t.exports.LUA_OPUNM=n.LUA_OPUNM,t.exports.LUA_REGISTRYINDEX=n.LUA_REGISTRYINDEX,t.exports.LUA_RELEASE=n.LUA_RELEASE,t.exports.LUA_RIDX_GLOBALS=n.LUA_RIDX_GLOBALS,t.exports.LUA_RIDX_LAST=n.LUA_RIDX_LAST,t.exports.LUA_RIDX_MAINTHREAD=n.LUA_RIDX_MAINTHREAD,t.exports.LUA_SIGNATURE=n.LUA_SIGNATURE,t.exports.LUA_TNONE=n.constant_types.LUA_TNONE,t.exports.LUA_TNIL=n.constant_types.LUA_TNIL,t.exports.LUA_TBOOLEAN=n.constant_types.LUA_TBOOLEAN,t.exports.LUA_TLIGHTUSERDATA=n.constant_types.LUA_TLIGHTUSERDATA,t.exports.LUA_TNUMBER=n.constant_types.LUA_TNUMBER,t.exports.LUA_TSTRING=n.constant_types.LUA_TSTRING,t.exports.LUA_TTABLE=n.constant_types.LUA_TTABLE,t.exports.LUA_TFUNCTION=n.constant_types.LUA_TFUNCTION,t.exports.LUA_TUSERDATA=n.constant_types.LUA_TUSERDATA,t.exports.LUA_TTHREAD=n.constant_types.LUA_TTHREAD,t.exports.LUA_VERSION=n.LUA_VERSION,t.exports.LUA_VERSION_MAJOR=n.LUA_VERSION_MAJOR,t.exports.LUA_VERSION_MINOR=n.LUA_VERSION_MINOR,t.exports.LUA_VERSION_NUM=n.LUA_VERSION_NUM,t.exports.LUA_VERSION_RELEASE=n.LUA_VERSION_RELEASE,t.exports.LUA_YIELD=n.thread_status.LUA_YIELD,t.exports.lua_Debug=n.lua_Debug,t.exports.lua_upvalueindex=n.lua_upvalueindex,t.exports.lua_absindex=a.lua_absindex,t.exports.lua_arith=a.lua_arith,t.exports.lua_atpanic=a.lua_atpanic,t.exports.lua_atnativeerror=a.lua_atnativeerror,t.exports.lua_call=a.lua_call,t.exports.lua_callk=a.lua_callk,t.exports.lua_checkstack=a.lua_checkstack,t.exports.lua_close=o.lua_close,t.exports.lua_compare=a.lua_compare,t.exports.lua_concat=a.lua_concat,t.exports.lua_copy=a.lua_copy,t.exports.lua_createtable=a.lua_createtable,t.exports.lua_dump=a.lua_dump,t.exports.lua_error=a.lua_error,t.exports.lua_gc=a.lua_gc,t.exports.lua_getallocf=a.lua_getallocf,t.exports.lua_getextraspace=a.lua_getextraspace,t.exports.lua_getfield=a.lua_getfield,t.exports.lua_getglobal=a.lua_getglobal,t.exports.lua_gethook=u.lua_gethook,t.exports.lua_gethookcount=u.lua_gethookcount,t.exports.lua_gethookmask=u.lua_gethookmask,t.exports.lua_geti=a.lua_geti,t.exports.lua_getinfo=u.lua_getinfo,t.exports.lua_getlocal=u.lua_getlocal,t.exports.lua_getmetatable=a.lua_getmetatable,t.exports.lua_getstack=u.lua_getstack,t.exports.lua_gettable=a.lua_gettable,t.exports.lua_gettop=a.lua_gettop,t.exports.lua_getupvalue=a.lua_getupvalue,t.exports.lua_getuservalue=a.lua_getuservalue,t.exports.lua_insert=a.lua_insert,t.exports.lua_isboolean=a.lua_isboolean,t.exports.lua_iscfunction=a.lua_iscfunction,t.exports.lua_isfunction=a.lua_isfunction,t.exports.lua_isinteger=a.lua_isinteger,t.exports.lua_islightuserdata=a.lua_islightuserdata,t.exports.lua_isnil=a.lua_isnil,t.exports.lua_isnone=a.lua_isnone,t.exports.lua_isnoneornil=a.lua_isnoneornil,t.exports.lua_isnumber=a.lua_isnumber,t.exports.lua_isproxy=a.lua_isproxy,t.exports.lua_isstring=a.lua_isstring,t.exports.lua_istable=a.lua_istable,t.exports.lua_isthread=a.lua_isthread,t.exports.lua_isuserdata=a.lua_isuserdata,t.exports.lua_isyieldable=s.lua_isyieldable,t.exports.lua_len=a.lua_len,t.exports.lua_load=a.lua_load,t.exports.lua_newstate=o.lua_newstate,t.exports.lua_newtable=a.lua_newtable,t.exports.lua_newthread=o.lua_newthread,t.exports.lua_newuserdata=a.lua_newuserdata,t.exports.lua_next=a.lua_next,t.exports.lua_pcall=a.lua_pcall,t.exports.lua_pcallk=a.lua_pcallk,t.exports.lua_pop=a.lua_pop,t.exports.lua_pushboolean=a.lua_pushboolean,t.exports.lua_pushcclosure=a.lua_pushcclosure,t.exports.lua_pushcfunction=a.lua_pushcfunction,t.exports.lua_pushfstring=a.lua_pushfstring,t.exports.lua_pushglobaltable=a.lua_pushglobaltable,t.exports.lua_pushinteger=a.lua_pushinteger,t.exports.lua_pushjsclosure=a.lua_pushjsclosure,t.exports.lua_pushjsfunction=a.lua_pushjsfunction,t.exports.lua_pushlightuserdata=a.lua_pushlightuserdata,t.exports.lua_pushliteral=a.lua_pushliteral,t.exports.lua_pushlstring=a.lua_pushlstring,t.exports.lua_pushnil=a.lua_pushnil,t.exports.lua_pushnumber=a.lua_pushnumber,t.exports.lua_pushstring=a.lua_pushstring,t.exports.lua_pushthread=a.lua_pushthread,t.exports.lua_pushvalue=a.lua_pushvalue,t.exports.lua_pushvfstring=a.lua_pushvfstring,t.exports.lua_rawequal=a.lua_rawequal,t.exports.lua_rawget=a.lua_rawget,t.exports.lua_rawgeti=a.lua_rawgeti,t.exports.lua_rawgetp=a.lua_rawgetp,t.exports.lua_rawlen=a.lua_rawlen,t.exports.lua_rawset=a.lua_rawset,t.exports.lua_rawseti=a.lua_rawseti,t.exports.lua_rawsetp=a.lua_rawsetp,t.exports.lua_register=a.lua_register,t.exports.lua_remove=a.lua_remove,t.exports.lua_replace=a.lua_replace,t.exports.lua_resume=s.lua_resume,t.exports.lua_rotate=a.lua_rotate,t.exports.lua_setallof=s.lua_setallof,t.exports.lua_setfield=a.lua_setfield,t.exports.lua_setglobal=a.lua_setglobal,t.exports.lua_sethook=u.lua_sethook,t.exports.lua_seti=a.lua_seti,t.exports.lua_setlocal=u.lua_setlocal,t.exports.lua_setmetatable=a.lua_setmetatable,t.exports.lua_settable=a.lua_settable,t.exports.lua_settop=a.lua_settop,t.exports.lua_setupvalue=a.lua_setupvalue,t.exports.lua_setuservalue=a.lua_setuservalue,t.exports.lua_status=a.lua_status,t.exports.lua_stringtonumber=a.lua_stringtonumber,t.exports.lua_toboolean=a.lua_toboolean,t.exports.lua_todataview=a.lua_todataview,t.exports.lua_tointeger=a.lua_tointeger,t.exports.lua_tointegerx=a.lua_tointegerx,t.exports.lua_tojsstring=a.lua_tojsstring,t.exports.lua_tolstring=a.lua_tolstring,t.exports.lua_tonumber=a.lua_tonumber,t.exports.lua_tonumberx=a.lua_tonumberx,t.exports.lua_topointer=a.lua_topointer,t.exports.lua_toproxy=a.lua_toproxy,t.exports.lua_tostring=a.lua_tostring,t.exports.lua_tothread=a.lua_tothread,t.exports.lua_touserdata=a.lua_touserdata,t.exports.lua_type=a.lua_type,t.exports.lua_typename=a.lua_typename,t.exports.lua_upvalueid=a.lua_upvalueid,t.exports.lua_upvaluejoin=a.lua_upvaluejoin,t.exports.lua_version=a.lua_version,t.exports.lua_xmove=a.lua_xmove,t.exports.lua_yield=s.lua_yield,t.exports.lua_yieldk=s.lua_yieldk,t.exports.lua_tocfunction=a.lua_tocfunction},function(t,e,r){\"use strict\";var n={},a=r(1),u=a.LUA_VERSION_MAJOR,s=a.LUA_VERSION_MINOR,o=a.to_luastring;t.exports.LUA_PATH_SEP=\";\";t.exports.LUA_PATH_MARK=\"?\";t.exports.LUA_EXEC_DIR=\"!\";var l=u+\".\"+s;t.exports.LUA_VDIR=l;t.exports.LUA_DIRSEP=\"/\";var i=\"./lua/\"+l+\"/\";t.exports.LUA_LDIR=i;var c=i;t.exports.LUA_JSDIR=c;var f=o(i+\"?.lua;\"+i+\"?/init.lua;./?.lua;./?/init.lua\");t.exports.LUA_PATH_DEFAULT=f;var _=o(c+\"?.js;\"+c+\"loadall.js;./?.js\");t.exports.LUA_JSPATH_DEFAULT=_;var p=n.LUA_COMPAT_FLOATSTRING||!1,v=n.LUAI_MAXSTACK||1e6,h=n.LUA_IDSIZE||59,L=\"%\".concat(\"\",\"d\"),d=n.LUAL_BUFFERSIZE||8192,A=function(t,e){for(var r=Math.min(3,Math.ceil(Math.abs(e)/1023)),n=t,a=0;a<r;a++)n*=Math.pow(2,Math.floor((e+a)/r));return n};t.exports.LUAI_MAXSTACK=v,t.exports.LUA_COMPAT_FLOATSTRING=p,t.exports.LUA_IDSIZE=h,t.exports.LUA_INTEGER_FMT=L,t.exports.LUA_INTEGER_FRMLEN=\"\",t.exports.LUA_MAXINTEGER=2147483647,t.exports.LUA_MININTEGER=-2147483648,t.exports.LUA_NUMBER_FMT=\"%.14g\",t.exports.LUA_NUMBER_FRMLEN=\"\",t.exports.LUAL_BUFFERSIZE=d,t.exports.frexp=function(t){if(0===t)return[t,0];var e=new DataView(new ArrayBuffer(8));e.setFloat64(0,t);var r=e.getUint32(0)>>>20&2047;0===r&&(e.setFloat64(0,t*Math.pow(2,64)),r=(e.getUint32(0)>>>20&2047)-64);var n=r-1022;return[A(t,-n),n]},t.exports.ldexp=A,t.exports.lua_getlocaledecpoint=function(){return 46},t.exports.lua_integer2str=function(t){return String(t)},t.exports.lua_number2str=function(t){return String(Number(t.toPrecision(14)))},t.exports.lua_numbertointeger=function(t){return t>=-2147483648&&t<2147483648&&t},t.exports.luai_apicheck=function(t,e){if(!e)throw Error(e)}},function(t,e,r){\"use strict\";var n=r(3).luai_apicheck,a=function(t){if(!t)throw Error(\"assertion failed\")};t.exports.lua_assert=a,t.exports.luai_apicheck=n||function(t,e){return a(e)};t.exports.api_check=function(t,e,r){return n(t,e&&r)};t.exports.LUAI_MAXCCALLS=200;t.exports.LUA_MINBUFFER=32;t.exports.luai_nummod=function(t,e,r){var n=e%r;return n*r<0&&(n+=r),n};t.exports.MAX_INT=2147483647;t.exports.MIN_INT=-2147483648},function(t,e,r){var n=r(1),a=\"Fengari 0.1.4  Copyright (C) 2017-2018 B. Giannangeli, Daurnimator\\nBased on: \"+n.LUA_COPYRIGHT;t.exports.FENGARI_AUTHORS=\"B. Giannangeli, Daurnimator\",t.exports.FENGARI_COPYRIGHT=a,t.exports.FENGARI_RELEASE=\"Fengari 0.1.4\",t.exports.FENGARI_VERSION=\"Fengari 0.1\",t.exports.FENGARI_VERSION_MAJOR=\"0\",t.exports.FENGARI_VERSION_MINOR=\"1\",t.exports.FENGARI_VERSION_NUM=1,t.exports.FENGARI_VERSION_RELEASE=\"4\",t.exports.is_luastring=n.is_luastring,t.exports.luastring_eq=n.luastring_eq,t.exports.luastring_from=n.luastring_from,t.exports.luastring_indexOf=n.luastring_indexOf,t.exports.luastring_of=n.luastring_of,t.exports.to_jsstring=n.to_jsstring,t.exports.to_luastring=n.to_luastring,t.exports.to_uristring=n.to_uristring,t.exports.from_userstring=n.from_userstring},function(t,e,r){\"use strict\";var n;function a(t){return(a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function u(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function s(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var l=r(1),i=l.LUA_OPADD,c=l.LUA_OPBAND,f=l.LUA_OPBNOT,_=l.LUA_OPBOR,p=l.LUA_OPBXOR,v=l.LUA_OPDIV,h=l.LUA_OPIDIV,L=l.LUA_OPMOD,d=l.LUA_OPMUL,A=l.LUA_OPPOW,g=l.LUA_OPSHL,T=l.LUA_OPSHR,x=l.LUA_OPSUB,b=l.LUA_OPUNM,k=l.constant_types,O=k.LUA_NUMTAGS,E=k.LUA_TBOOLEAN,m=k.LUA_TCCL,U=k.LUA_TFUNCTION,N=k.LUA_TLCF,R=k.LUA_TLCL,y=k.LUA_TLIGHTUSERDATA,S=k.LUA_TLNGSTR,w=k.LUA_TNIL,I=k.LUA_TNUMBER,M=k.LUA_TNUMFLT,P=k.LUA_TNUMINT,C=k.LUA_TSHRSTR,D=k.LUA_TSTRING,V=k.LUA_TTABLE,B=k.LUA_TTHREAD,G=k.LUA_TUSERDATA,K=l.from_userstring,F=l.luastring_indexOf,j=l.luastring_of,H=l.to_jsstring,X=l.to_luastring,z=r(22),Y=z.lisdigit,J=z.lisprint,Z=z.lisspace,q=z.lisxdigit,W=r(11),Q=r(8),$=r(12),tt=r(10),et=tt.luaS_bless,rt=tt.luaS_new,nt=r(9),at=r(3),ut=at.LUA_COMPAT_FLOATSTRING,st=at.ldexp,ot=at.lua_integer2str,lt=at.lua_number2str,it=r(15),ct=r(4),ft=ct.MAX_INT,_t=ct.luai_nummod,pt=ct.lua_assert,vt=r(14),ht=O,Lt=O+1,dt=function(){function t(e,r){s(this,t),this.type=e,this.value=r}return function(t,e,r){e&&o(t.prototype,e),r&&o(t,r)}(t,[{key:\"ttype\",value:function(){return 63&this.type}},{key:\"ttnov\",value:function(){return 15&this.type}},{key:\"checktag\",value:function(t){return this.type===t}},{key:\"checktype\",value:function(t){return this.ttnov()===t}},{key:\"ttisnumber\",value:function(){return this.checktype(I)}},{key:\"ttisfloat\",value:function(){return this.checktag(M)}},{key:\"ttisinteger\",value:function(){return this.checktag(P)}},{key:\"ttisnil\",value:function(){return this.checktag(w)}},{key:\"ttisboolean\",value:function(){return this.checktag(E)}},{key:\"ttislightuserdata\",value:function(){return this.checktag(y)}},{key:\"ttisstring\",value:function(){return this.checktype(D)}},{key:\"ttisshrstring\",value:function(){return this.checktag(C)}},{key:\"ttislngstring\",value:function(){return this.checktag(S)}},{key:\"ttistable\",value:function(){return this.checktag(V)}},{key:\"ttisfunction\",value:function(){return this.checktype(U)}},{key:\"ttisclosure\",value:function(){return(31&this.type)===U}},{key:\"ttisCclosure\",value:function(){return this.checktag(m)}},{key:\"ttisLclosure\",value:function(){return this.checktag(R)}},{key:\"ttislcf\",value:function(){return this.checktag(N)}},{key:\"ttisfulluserdata\",value:function(){return this.checktag(G)}},{key:\"ttisthread\",value:function(){return this.checktag(B)}},{key:\"ttisdeadkey\",value:function(){return this.checktag(Lt)}},{key:\"l_isfalse\",value:function(){return this.ttisnil()||this.ttisboolean()&&!1===this.value}},{key:\"setfltvalue\",value:function(t){this.type=M,this.value=t}},{key:\"chgfltvalue\",value:function(t){pt(this.type==M),this.value=t}},{key:\"setivalue\",value:function(t){this.type=P,this.value=t}},{key:\"chgivalue\",value:function(t){pt(this.type==P),this.value=t}},{key:\"setnilvalue\",value:function(){this.type=w,this.value=null}},{key:\"setfvalue\",value:function(t){this.type=N,this.value=t}},{key:\"setpvalue\",value:function(t){this.type=y,this.value=t}},{key:\"setbvalue\",value:function(t){this.type=E,this.value=t}},{key:\"setsvalue\",value:function(t){this.type=S,this.value=t}},{key:\"setuvalue\",value:function(t){this.type=G,this.value=t}},{key:\"setthvalue\",value:function(t){this.type=B,this.value=t}},{key:\"setclLvalue\",value:function(t){this.type=R,this.value=t}},{key:\"setclCvalue\",value:function(t){this.type=m,this.value=t}},{key:\"sethvalue\",value:function(t){this.type=V,this.value=t}},{key:\"setdeadvalue\",value:function(){this.type=Lt,this.value=null}},{key:\"setfrom\",value:function(t){this.type=t.type,this.value=t.value}},{key:\"tsvalue\",value:function(){return pt(this.ttisstring()),this.value}},{key:\"svalue\",value:function(){return this.tsvalue().getstr()}},{key:\"vslen\",value:function(){return this.tsvalue().tsslen()}},{key:\"jsstring\",value:function(t,e){return H(this.svalue(),t,e,!0)}}]),t}(),At=function(t,e,r){t.stack[e].setsvalue(r)},gt=new dt(w,null);Object.freeze(gt),t.exports.luaO_nilobject=gt;var Tt=function t(e,r){s(this,t),this.id=e.l_G.id_counter++,this.p=null,this.nupvalues=r,this.upvals=new Array(r)},xt=function t(e,r,n){for(s(this,t),this.id=e.l_G.id_counter++,this.f=r,this.nupvalues=n,this.upvalue=new Array(n);n--;)this.upvalue[n]=new dt(w,null)},bt=function t(e,r){s(this,t),this.id=e.l_G.id_counter++,this.metatable=null,this.uservalue=new dt(w,null),this.len=r,this.data=Object.create(null)},kt=X(\"...\"),Ot=X('[string \"'),Et=X('\"]'),mt=function(t){return Y(t)?t-48:(223&t)-55},Ut=function(t,e){var r=1;if(pt(e<=1114111),e<128)t[7]=e;else{var n=63;do{t[8-r++]=128|63&e,e>>=6,n>>=1}while(e>n);t[8-r]=~n<<1|e}return r},Nt=function(t,e){var r=\"x\"===e?function(t){for(var e,r=0,n=0,a=0,u=0,s=0,o=!1;Z(t[r]);)r++;if((e=45===t[r])?r++:43===t[r]&&r++,48!==t[r]||120!==t[r+1]&&88!==t[r+1])return null;for(r+=2;;r++)if(46===t[r]){if(o)break;o=!0}else{if(!q(t[r]))break;0===a&&48===t[r]?u++:++a<=30?n=16*n+mt(t[r]):s++,o&&s--}if(u+a===0)return null;if(s*=4,112===t[r]||80===t[r]){var l,i=0;if((l=45===t[++r])?r++:43===t[r]&&r++,!Y(t[r]))return null;for(;Y(t[r]);)i=10*i+t[r++]-48;l&&(i=-i),s+=i}return e&&(n=-n),{n:st(n,s),i:r}}(t):function(t){try{t=H(t)}catch(t){return null}var e=/^[\\t\\v\\f \\n\\r]*[+-]?(?:[0-9]+\\.?[0-9]*|\\.[0-9]*)(?:[eE][+-]?[0-9]+)?/.exec(t);if(!e)return null;var r=parseFloat(e[0]);return isNaN(r)?null:{n:r,i:e[0].length}}(t);if(null===r)return null;for(;Z(t[r.i]);)r.i++;return r.i===t.length||0===t[r.i]?r:null},Rt=[46,120,88,110,78],yt=(u(n={},46,\".\"),u(n,120,\"x\"),u(n,88,\"x\"),u(n,110,\"n\"),u(n,78,\"n\"),n),St=Math.floor(ft/10),wt=ft%10,It=function(t,e){var r;if(e.ttisinteger())r=X(ot(e.value));else{var n=lt(e.value);!ut&&/^[-0123456789]+$/.test(n)&&(n+=\".0\"),r=X(n)}e.setsvalue(et(t,r))},Mt=function(t,e){Q.luaD_inctop(t),At(t,t.top-1,rt(t,e))},Pt=function(t,e,r){for(var n,u=0,s=0,o=0;-1!=(n=F(e,37,s));){switch(Mt(t,e.subarray(s,n)),e[n+1]){case 115:var l=r[o++];if(null===l)l=X(\"(null)\",!0);else{l=K(l);var i=F(l,0);-1!==i&&(l=l.subarray(0,i))}Mt(t,l);break;case 99:var c=r[o++];J(c)?Mt(t,j(c)):Ct(t,X(\"<\\\\%d>\",!0),c);break;case 100:case 73:Q.luaD_inctop(t),t.stack[t.top-1].setivalue(r[o++]),It(t,t.stack[t.top-1]);break;case 102:Q.luaD_inctop(t),t.stack[t.top-1].setfltvalue(r[o++]),It(t,t.stack[t.top-1]);break;case 112:var f=r[o++];if(f instanceof $.lua_State||f instanceof nt.Table||f instanceof bt||f instanceof Tt||f instanceof xt)Mt(t,X(\"0x\"+f.id.toString(16)));else switch(a(f)){case\"undefined\":Mt(t,X(\"undefined\"));break;case\"number\":Mt(t,X(\"Number(\"+f+\")\"));break;case\"string\":Mt(t,X(\"String(\"+JSON.stringify(f)+\")\"));break;case\"boolean\":Mt(t,X(f?\"Boolean(true)\":\"Boolean(false)\"));break;case\"object\":if(null===f){Mt(t,X(\"null\"));break}case\"function\":var _=t.l_G.ids.get(f);_||(_=t.l_G.id_counter++,t.l_G.ids.set(f,_)),Mt(t,X(\"0x\"+_.toString(16)));break;default:Mt(t,X(\"<id NYI>\"))}break;case 85:var p=new Uint8Array(8),v=Ut(p,r[o++]);Mt(t,p.subarray(8-v));break;case 37:Mt(t,X(\"%\",!0));break;default:W.luaG_runerror(t,X(\"invalid option '%%%c' to 'lua_pushfstring'\"),e[n+1])}u+=2,s=n+2}return Q.luaD_checkstack(t,1),Mt(t,e.subarray(s)),u>0&&it.luaV_concat(t,u+1),t.stack[t.top-1].svalue()},Ct=function(t,e){for(var r=arguments.length,n=new Array(r>2?r-2:0),a=2;a<r;a++)n[a-2]=arguments[a];return Pt(t,e,n)},Dt=function(t,e,r,n){switch(e){case i:return r+n|0;case x:return r-n|0;case d:return it.luaV_imul(r,n);case L:return it.luaV_mod(t,r,n);case h:return it.luaV_div(t,r,n);case c:return r&n;case _:return r|n;case p:return r^n;case g:return it.luaV_shiftl(r,n);case T:return it.luaV_shiftl(r,-n);case b:return 0-r|0;case f:return-1^r;default:pt(0)}},Vt=function(t,e,r,n){switch(e){case i:return r+n;case x:return r-n;case d:return r*n;case v:return r/n;case A:return Math.pow(r,n);case h:return Math.floor(r/n);case b:return-r;case L:return _t(t,r,n);default:pt(0)}};t.exports.CClosure=xt,t.exports.LClosure=Tt,t.exports.LUA_TDEADKEY=Lt,t.exports.LUA_TPROTO=ht,t.exports.LocVar=function t(){s(this,t),this.varname=null,this.startpc=NaN,this.endpc=NaN},t.exports.TValue=dt,t.exports.Udata=bt,t.exports.UTF8BUFFSZ=8,t.exports.luaO_arith=function(t,e,r,n,a){var u=\"number\"==typeof a?t.stack[a]:a;switch(e){case c:case _:case p:case g:case T:case f:var s,o;if(!1!==(s=it.tointeger(r))&&!1!==(o=it.tointeger(n)))return void u.setivalue(Dt(t,e,s,o));break;case v:case A:var l,h;if(!1!==(l=it.tonumber(r))&&!1!==(h=it.tonumber(n)))return void u.setfltvalue(Vt(t,e,l,h));break;default:var L,d;if(r.ttisinteger()&&n.ttisinteger())return void u.setivalue(Dt(t,e,r.value,n.value));if(!1!==(L=it.tonumber(r))&&!1!==(d=it.tonumber(n)))return void u.setfltvalue(Vt(t,e,L,d))}pt(null!==t),vt.luaT_trybinTM(t,r,n,a,e-i+vt.TMS.TM_ADD)},t.exports.luaO_chunkid=function(t,e){var r,n=t.length;if(61===t[0])n<e?(r=new Uint8Array(n-1)).set(t.subarray(1)):(r=new Uint8Array(e)).set(t.subarray(1,e+1));else if(64===t[0])n<=e?(r=new Uint8Array(n-1)).set(t.subarray(1)):((r=new Uint8Array(e)).set(kt),e-=kt.length,r.set(t.subarray(n-e),kt.length));else{r=new Uint8Array(e);var a=F(t,10);r.set(Ot);var u=Ot.length;n<(e-=Ot.length+kt.length+Et.length)&&-1===a?(r.set(t,u),u+=t.length):(-1!==a&&(n=a),n>e&&(n=e),r.set(t.subarray(0,n),u),u+=n,r.set(kt,u),u+=kt.length),r.set(Et,u),u+=Et.length,r=r.subarray(0,u)}return r},t.exports.luaO_hexavalue=mt,t.exports.luaO_int2fb=function(t){var e=0;if(t<8)return t;for(;t>=128;)t=t+15>>4,e+=4;for(;t>=16;)t=t+1>>1,e++;return e+1<<3|t-8},t.exports.luaO_pushfstring=Ct,t.exports.luaO_pushvfstring=Pt,t.exports.luaO_str2num=function(t,e){var r=function(t){for(var e,r=0,n=0,a=!0;Z(t[r]);)r++;if((e=45===t[r])?r++:43===t[r]&&r++,48!==t[r]||120!==t[r+1]&&88!==t[r+1])for(;r<t.length&&Y(t[r]);r++){var u=t[r]-48;if(n>=St&&(n>St||u>wt+e))return null;n=10*n+u|0,a=!1}else for(r+=2;r<t.length&&q(t[r]);r++)n=16*n+mt(t[r])|0,a=!1;for(;r<t.length&&Z(t[r]);)r++;return a||r!==t.length&&0!==t[r]?null:{n:0|(e?-n:n),i:r}}(t);return null!==r?(e.setivalue(r.n),r.i+1):null!==(r=function(t){for(var e=t.length,r=0,n=0;n<e;n++){var a=t[n];if(-1!==Rt.indexOf(a)){r=a;break}}var u=yt[r];return\"n\"===u?null:Nt(t,u)}(t))?(e.setfltvalue(r.n),r.i+1):0},t.exports.luaO_tostring=It,t.exports.luaO_utf8esc=Ut,t.exports.numarith=Vt,t.exports.pushobj2s=function(t,e){t.stack[t.top++]=new dt(e.type,e.value)},t.exports.pushsvalue2s=function(t,e){t.stack[t.top++]=new dt(S,e)},t.exports.setobjs2s=function(t,e,r){t.stack[e].setfrom(t.stack[r])},t.exports.setobj2s=function(t,e,r){t.stack[e].setfrom(r)},t.exports.setsvalue2s=At},function(t,e,r){\"use strict\";function n(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var a,u,s=r(3).LUAL_BUFFERSIZE,o=r(2),l=o.LUA_ERRERR,i=o.LUA_MULTRET,c=o.LUA_REGISTRYINDEX,f=o.LUA_SIGNATURE,_=o.LUA_TBOOLEAN,p=o.LUA_TLIGHTUSERDATA,v=o.LUA_TNIL,h=o.LUA_TNONE,L=o.LUA_TNUMBER,d=o.LUA_TSTRING,A=o.LUA_TTABLE,g=o.LUA_VERSION_NUM,T=o.lua_Debug,x=o.lua_absindex,b=o.lua_atpanic,k=o.lua_call,O=o.lua_checkstack,E=o.lua_concat,m=o.lua_copy,U=o.lua_createtable,N=o.lua_error,R=o.lua_getfield,y=o.lua_getinfo,S=o.lua_getmetatable,w=o.lua_getstack,I=o.lua_gettop,M=o.lua_insert,P=o.lua_isinteger,C=o.lua_isnil,D=o.lua_isnumber,V=o.lua_isstring,B=o.lua_istable,G=o.lua_len,K=o.lua_load,F=o.lua_newstate,j=o.lua_newtable,H=o.lua_next,X=o.lua_pcall,z=o.lua_pop,Y=o.lua_pushboolean,J=o.lua_pushcclosure,Z=o.lua_pushcfunction,q=o.lua_pushfstring,W=o.lua_pushinteger,Q=o.lua_pushliteral,$=o.lua_pushlstring,tt=o.lua_pushnil,et=o.lua_pushstring,rt=o.lua_pushvalue,nt=o.lua_pushvfstring,at=o.lua_rawequal,ut=o.lua_rawget,st=o.lua_rawgeti,ot=o.lua_rawlen,lt=o.lua_rawseti,it=o.lua_remove,ct=o.lua_setfield,ft=o.lua_setglobal,_t=o.lua_setmetatable,pt=o.lua_settop,vt=o.lua_toboolean,ht=o.lua_tointeger,Lt=o.lua_tointegerx,dt=o.lua_tojsstring,At=o.lua_tolstring,gt=o.lua_tonumber,Tt=o.lua_tonumberx,xt=o.lua_topointer,bt=o.lua_tostring,kt=o.lua_touserdata,Ot=o.lua_type,Et=o.lua_typename,mt=o.lua_version,Ut=r(5),Nt=Ut.from_userstring,Rt=Ut.luastring_eq,yt=Ut.to_luastring,St=Ut.to_uristring,wt=l+1,It=yt(\"_LOADED\"),Mt=yt(\"_PRELOAD\"),Pt=yt(\"FILE*\"),Ct=yt(\"__name\"),Dt=yt(\"__tostring\"),Vt=new Uint8Array(0),Bt=function t(){n(this,t),this.L=null,this.b=Vt,this.n=0},Gt=function(t,e){var r=I(t);if(y(t,yt(\"f\"),e),R(t,c,It),function t(e,r,n){if(0===n||!B(e,-1))return 0;for(tt(e);H(e,-2);){if(Ot(e,-2)===d){if(at(e,r,-1))return z(e,1),1;if(t(e,r,n-1))return it(e,-2),Q(e,\".\"),M(e,-2),E(e,3),1}z(e,1)}return 0}(t,r+1,2)){var n=bt(t,-1);return 95===n[0]&&71===n[1]&&46===n[2]&&(et(t,n.subarray(3)),it(t,-2)),m(t,-1,r+1),z(t,2),1}return pt(t,r),0},Kt=function(t,e){Gt(t,e)?(q(t,yt(\"function '%s'\"),bt(t,-1)),it(t,-2)):0!==e.namewhat.length?q(t,yt(\"%s '%s'\"),e.namewhat,e.name):e.what&&109===e.what[0]?Q(t,\"main chunk\"):e.what&&76===e.what[0]?q(t,yt(\"function <%s:%d>\"),e.short_src,e.linedefined):Q(t,\"?\")},Ft=function(t){var e=\"PANIC: unprotected error in call to Lua API (\"+dt(t,-1)+\")\";throw new Error(e)},jt=function(t,e,r){var n=new T;return w(t,0,n)?(y(t,yt(\"n\"),n),Rt(n.namewhat,yt(\"method\"))&&0===--e?zt(t,yt(\"calling '%s' on bad self (%s)\"),n.name,r):(null===n.name&&(n.name=Gt(t,n)?bt(t,-1):yt(\"?\")),zt(t,yt(\"bad argument #%d to '%s' (%s)\"),e,n.name,r))):zt(t,yt(\"bad argument #%d (%s)\"),e,r)},Ht=function(t,e,r){var n;n=he(t,e,Ct)===d?bt(t,-1):Ot(t,e)===p?yt(\"light userdata\",!0):Wt(t,e);var a=q(t,yt(\"%s expected, got %s\"),r,n);return jt(t,e,a)},Xt=function(t,e){var r=new T;w(t,e,r)&&(y(t,yt(\"Sl\",!0),r),r.currentline>0)?q(t,yt(\"%s:%d: \"),r.short_src,r.currentline):et(t,yt(\"\"))},zt=function(t,e){Xt(t,1);for(var r=arguments.length,n=new Array(r>2?r-2:0),a=2;a<r;a++)n[a-2]=arguments[a];return nt(t,e,n),E(t,2),N(t)},Yt=function(t,e,r,n){return e?(Y(t,1),1):(tt(t),n?(a=n.message,u=-n.errno):(a=\"Success\",u=0),r?q(t,yt(\"%s: %s\"),r,yt(a)):et(t,yt(a)),W(t,u),3);var a,u},Jt=function(t,e){return R(t,c,e)},Zt=function(t,e,r){var n=kt(t,e);return null!==n&&S(t,e)?(Jt(t,r),at(t,-1,-2)||(n=null),z(t,2),n):null},qt=function(t,e,r){Ht(t,e,Et(t,r))},Wt=function(t,e){return Et(t,Ot(t,e))},Qt=function(t,e){var r=At(t,e);return null!==r&&void 0!==r||qt(t,e,d),r},$t=Qt,te=function(t,e,r){return Ot(t,e)<=0?null===r?null:Nt(r):Qt(t,e)},ee=te,re=function(t,e){var r=Tt(t,e);return!1===r&&qt(t,e,L),r},ne=function(t,e){var r=Lt(t,e);return!1===r&&function(t,e){D(t,e)?jt(t,e,yt(\"number has no integer representation\",!0)):qt(t,e,L)}(t,e),r},ae=function(t,e){var r=t.n+e;if(t.b.length<r){var n=Math.max(2*t.b.length,r),a=new Uint8Array(n);a.set(t.b),t.b=a}return t.b.subarray(t.n,r)},ue=function(t,e){e.L=t,e.b=Vt},se=function(t,e,r){r>0&&(e=Nt(e),ae(t,r).set(e.subarray(0,r)),ie(t,r))},oe=function(t,e){e=Nt(e),se(t,e,e.length)},le=function(t){$(t.L,t.b,t.n),t.n=0,t.b=Vt},ie=function(t,e){t.n+=e},ce=function(t,e,r,n){return Ot(t,r)<=0?n:e(t,r)},fe=function(t,e){var r=e.string;return e.string=null,r},_e=function(t,e,r,n,a){return K(t,fe,{string:e},n,a)},pe=function(t,e,r,n){return _e(t,e,0,n,null)},ve=function(t,e){return pe(t,e,e.length,e)},he=function(t,e,r){if(S(t,e)){et(t,r);var n=ut(t,-2);return n===v?z(t,2):it(t,-2),n}return v},Le=function(t,e,r){return e=x(t,e),he(t,e,r)!==v&&(rt(t,e),k(t,1,1),!0)},de=yt(\"%I\"),Ae=yt(\"%f\"),ge=function(t,e,r){var n=r>>>0,a=e.length,u=t.length+1-a;t:for(;n<u;n++){for(var s=0;s<a;s++)if(t[n+s]!==e[s])continue t;return n}return-1},Te=function(t,e,r){return R(t,e,r)===A||(z(t,1),e=x(t,e),j(t),rt(t,-1),ct(t,e,r),!1)},xe=function(t,e,r){for(var n in be(t,r,yt(\"too many upvalues\",!0)),e){for(var a=0;a<r;a++)rt(t,-r);J(t,e[n],r),ct(t,-(r+2),yt(n))}z(t,r)},be=function(t,e,r){O(t,e)||(r?zt(t,yt(\"stack overflow (%s)\"),r):zt(t,yt(\"stack overflow\",!0)))},ke=function(t,e,r,n){var a=n.message,u=bt(t,r).subarray(1);return q(t,yt(\"cannot %s %s: %s\"),yt(e),u,yt(a)),it(t,r),wt},Oe=[239,187,191],Ee=function(t){var e=function(t){var e;t.n=0;var r=0;do{if(null===(e=a(t))||e!==Oe[r])return e;r++,t.buff[t.n++]=e}while(r<Oe.length);return t.n=0,a(t)}(t);if(35===e){do{e=a(t)}while(e&&10!==e);return{skipped:!0,c:a(t)}}return{skipped:!1,c:e}},me=function(t,e){var r=e;if(null!==r.f&&r.n>0){var n=r.n;return r.n=0,r.f=r.f.subarray(r.pos),r.buff.subarray(0,n)}var a=r.f;return r.f=null,a};a=function(t){return t.pos<t.f.length?t.f[t.pos++]:null},u=function(t,e,r){var a=new function t(){n(this,t),this.n=NaN,this.f=null,this.buff=new Uint8Array(1024),this.pos=0,this.err=void 0},u=I(t)+1;if(null===e)throw new Error(\"Can't read stdin in the browser\");q(t,yt(\"@%s\"),e);var s=St(e),o=new XMLHttpRequest;if(o.open(\"GET\",s,!1),\"undefined\"==typeof window&&(o.responseType=\"arraybuffer\"),o.send(),!(o.status>=200&&o.status<=299))return a.err=o.status,ke(t,\"open\",u,{message:\"\".concat(o.status,\": \").concat(o.statusText)});\"string\"==typeof o.response?a.f=yt(o.response):a.f=new Uint8Array(o.response);var l=Ee(a);l.c===f[0]&&e||l.skipped&&(a.buff[a.n++]=10),null!==l.c&&(a.buff[a.n++]=l.c);var i=K(t,me,a,bt(t,-1),r),c=a.err;return c?(pt(t,u),ke(t,\"read\",u,c)):(it(t,u),i)};var Ue=function(t,e){return u(t,e,null)},Ne=function(t,e,r){var n=mt(t);72!=r&&zt(t,yt(\"core and library have incompatible numeric types\")),n!=mt(null)?zt(t,yt(\"multiple Lua VMs detected\")):n!==e&&zt(t,yt(\"version mismatch: app. needs %f, Lua core provides %f\"),e,n)};t.exports.LUA_ERRFILE=wt,t.exports.LUA_FILEHANDLE=Pt,t.exports.LUA_LOADED_TABLE=It,t.exports.LUA_NOREF=-2,t.exports.LUA_PRELOAD_TABLE=Mt,t.exports.LUA_REFNIL=-1,t.exports.luaL_Buffer=Bt,t.exports.luaL_addchar=function(t,e){ae(t,1),t.b[t.n++]=e},t.exports.luaL_addlstring=se,t.exports.luaL_addsize=ie,t.exports.luaL_addstring=oe,t.exports.luaL_addvalue=function(t){var e=t.L,r=bt(e,-1);se(t,r,r.length),z(e,1)},t.exports.luaL_argcheck=function(t,e,r,n){e||jt(t,r,n)},t.exports.luaL_argerror=jt,t.exports.luaL_buffinit=ue,t.exports.luaL_buffinitsize=function(t,e,r){return ue(t,e),ae(e,r)},t.exports.luaL_callmeta=Le,t.exports.luaL_checkany=function(t,e){Ot(t,e)===h&&jt(t,e,yt(\"value expected\",!0))},t.exports.luaL_checkinteger=ne,t.exports.luaL_checklstring=Qt,t.exports.luaL_checknumber=re,t.exports.luaL_checkoption=function(t,e,r,n){for(var a=null!==r?ee(t,e,r):$t(t,e),u=0;n[u];u++)if(Rt(n[u],a))return u;return jt(t,e,q(t,yt(\"invalid option '%s'\"),a))},t.exports.luaL_checkstack=be,t.exports.luaL_checkstring=$t,t.exports.luaL_checktype=function(t,e,r){Ot(t,e)!==r&&qt(t,e,r)},t.exports.luaL_checkudata=function(t,e,r){var n=Zt(t,e,r);return null===n&&Ht(t,e,r),n},t.exports.luaL_checkversion=function(t){Ne(t,g,72)},t.exports.luaL_checkversion_=Ne,t.exports.luaL_dofile=function(t,e){return Ue(t,e)||X(t,0,i,0)},t.exports.luaL_dostring=function(t,e){return ve(t,e)||X(t,0,i,0)},t.exports.luaL_error=zt,t.exports.luaL_execresult=function(t,e){var r,n;if(null===e)return Y(t,1),Q(t,\"exit\"),W(t,0),3;if(e.status)r=\"exit\",n=e.status;else{if(!e.signal)return Yt(t,0,null,e);r=\"signal\",n=e.signal}return tt(t),Q(t,r),W(t,n),3},t.exports.luaL_fileresult=Yt,t.exports.luaL_getmetafield=he,t.exports.luaL_getmetatable=Jt,t.exports.luaL_getsubtable=Te,t.exports.luaL_gsub=function(t,e,r,n){var a,u=new Bt;for(ue(t,u);(a=ge(e,r))>=0;)se(u,e,a),oe(u,n),e=e.subarray(a+r.length);return oe(u,e),le(u),bt(t,-1)},t.exports.luaL_len=function(t,e){G(t,e);var r=Lt(t,-1);return!1===r&&zt(t,yt(\"object length is not an integer\",!0)),z(t,1),r},t.exports.luaL_loadbuffer=pe,t.exports.luaL_loadbufferx=_e,t.exports.luaL_loadfile=Ue,t.exports.luaL_loadfilex=u,t.exports.luaL_loadstring=ve,t.exports.luaL_newlib=function(t,e){U(t),xe(t,e,0)},t.exports.luaL_newlibtable=function(t){U(t)},t.exports.luaL_newmetatable=function(t,e){return Jt(t,e)!==v?0:(z(t,1),U(t,0,2),et(t,e),ct(t,-2,Ct),rt(t,-1),ct(t,c,e),1)},t.exports.luaL_newstate=function(){var t=F();return t&&b(t,Ft),t},t.exports.luaL_opt=ce,t.exports.luaL_optinteger=function(t,e,r){return ce(t,ne,e,r)},t.exports.luaL_optlstring=te,t.exports.luaL_optnumber=function(t,e,r){return ce(t,re,e,r)},t.exports.luaL_optstring=ee,t.exports.luaL_prepbuffer=function(t){return ae(t,s)},t.exports.luaL_prepbuffsize=ae,t.exports.luaL_pushresult=le,t.exports.luaL_pushresultsize=function(t,e){ie(t,e),le(t)},t.exports.luaL_ref=function(t,e){var r;return C(t,-1)?(z(t,1),-1):(e=x(t,e),st(t,e,0),r=ht(t,-1),z(t,1),0!==r?(st(t,e,r),lt(t,e,0)):r=ot(t,e)+1,lt(t,e,r),r)},t.exports.luaL_requiref=function(t,e,r,n){Te(t,c,It),R(t,-1,e),vt(t,-1)||(z(t,1),Z(t,r),et(t,e),k(t,1,1),rt(t,-1),ct(t,-3,e)),it(t,-2),n&&(rt(t,-1),ft(t,e))},t.exports.luaL_setfuncs=xe,t.exports.luaL_setmetatable=function(t,e){Jt(t,e),_t(t,-2)},t.exports.luaL_testudata=Zt,t.exports.luaL_tolstring=function(t,e){if(Le(t,e,Dt))V(t,-1)||zt(t,yt(\"'__tostring' must return a string\"));else switch(Ot(t,e)){case L:P(t,e)?q(t,de,ht(t,e)):q(t,Ae,gt(t,e));break;case d:rt(t,e);break;case _:Q(t,vt(t,e)?\"true\":\"false\");break;case v:Q(t,\"nil\");break;default:var r=he(t,e,Ct),n=r===d?bt(t,-1):Wt(t,e);q(t,yt(\"%s: %p\"),n,xt(t,e)),r!==v&&it(t,-2)}return At(t,-1)},t.exports.luaL_traceback=function(t,e,r,n){var a=new T,u=I(t),s=function(t){for(var e=new T,r=1,n=1;w(t,n,e);)r=n,n*=2;for(;r<n;){var a=Math.floor((r+n)/2);w(t,a,e)?r=a+1:n=a}return n-1}(e),o=s-n>21?10:-1;for(r&&q(t,yt(\"%s\\n\"),r),be(t,10,null),Q(t,\"stack traceback:\");w(e,n++,a);)0==o--?(Q(t,\"\\n\\t...\"),n=s-11+1):(y(e,yt(\"Slnt\",!0),a),q(t,yt(\"\\n\\t%s:\"),a.short_src),a.currentline>0&&Q(t,\"\".concat(a.currentline,\":\")),Q(t,\" in \"),Kt(t,a),a.istailcall&&Q(t,\"\\n\\t(...tail calls..)\"),E(t,I(t)-u));E(t,I(t)-u)},t.exports.luaL_typename=Wt,t.exports.luaL_unref=function(t,e,r){r>=0&&(e=x(t,e),st(t,e,0),lt(t,e,r),W(t,r),lt(t,e,0))},t.exports.luaL_where=Xt,t.exports.lua_writestringerror=function(){for(var t=0;t<arguments.length;t++){var e=arguments[t];do{var r=/([^\\n]*)\\n?([\\d\\D]*)/.exec(e);console.error(r[1]),e=r[2]}while(\"\"!==e)}}},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_HOOKCALL,u=n.LUA_HOOKRET,s=n.LUA_HOOKTAILCALL,o=n.LUA_MASKCALL,l=n.LUA_MASKLINE,i=n.LUA_MASKRET,c=n.LUA_MINSTACK,f=n.LUA_MULTRET,_=n.LUA_SIGNATURE,p=n.constant_types,v=p.LUA_TCCL,h=p.LUA_TLCF,L=p.LUA_TLCL,d=p.LUA_TNIL,A=n.thread_status,g=A.LUA_ERRMEM,T=A.LUA_ERRERR,x=A.LUA_ERRRUN,b=A.LUA_ERRSYNTAX,k=A.LUA_OK,O=A.LUA_YIELD,E=n.lua_Debug,m=n.luastring_indexOf,U=n.to_luastring,N=r(19),R=r(11),y=r(13),S=r(4),w=S.api_check,I=S.lua_assert,M=S.LUAI_MAXCCALLS,P=r(6),C=r(16),D=r(23),V=r(12),B=r(10).luaS_newliteral,G=r(14),K=r(3).LUAI_MAXSTACK,F=r(36),j=r(15),H=r(20).MBuffer,X=function(t,e){if(t.top<e)for(;t.top<e;)t.stack[t.top++]=new P.TValue(d,null);else for(;t.top>e;)delete t.stack[--t.top]},z=function(t,e,r){for(var n=t.top;t.top<r+1;)t.stack[t.top++]=new P.TValue(d,null);switch(e){case g:P.setsvalue2s(t,r,B(t,\"not enough memory\"));break;case T:P.setsvalue2s(t,r,B(t,\"error in error handling\"));break;default:P.setobjs2s(t,r,n-1)}for(;t.top>r+1;)delete t.stack[--t.top]},Y=K+200,J=function(t,e){I(e<=K||e==Y),I(t.stack_last==t.stack.length-V.EXTRA_STACK),t.stack.length=e,t.stack_last=e-V.EXTRA_STACK},Z=function(t,e){var r=t.stack.length;if(r>K)st(t,T);else{var n=t.top+e+V.EXTRA_STACK,a=2*r;a>K&&(a=K),a<n&&(a=n),a>K?(J(t,Y),R.luaG_runerror(t,U(\"stack overflow\",!0))):J(t,a)}},q=function(t,e){t.stack_last-t.top<=e&&Z(t,e)},W=function(t){var e=function(t){for(var e=t.top,r=t.ci;null!==r;r=r.previous)e<r.top&&(e=r.top);return I(e<=t.stack_last),e+1}(t),r=e+Math.floor(e/8)+2*V.EXTRA_STACK;r>K&&(r=K),t.stack.length>K&&V.luaE_freeCI(t),e<=K-V.EXTRA_STACK&&r<t.stack.length&&J(t,r)},Q=function t(e,r,n){var u=e.stack[r];switch(u.type){case v:case h:var s=u.type===v?u.value.f:u.value;q(e,c);var l=V.luaE_extendCI(e);l.funcOff=r,l.nresults=n,l.func=u,l.top=e.top+c,I(l.top<=e.stack_last),l.callstatus=0,e.hookmask&o&&et(e,a,-1);var i=s(e);if(\"number\"!=typeof i||i<0||(0|i)!==i)throw Error(\"invalid return value from JS function (expected integer)\");return N.api_checknelems(e,i),$(e,l,e.top-i,i),!0;case L:var f,_=u.value.p,p=e.top-r-1,A=_.maxstacksize;if(q(e,A),_.is_vararg)f=nt(e,_,p);else{for(;p<_.numparams;p++)e.stack[e.top++]=new P.TValue(d,null);f=r+1}var g=V.luaE_extendCI(e);return g.funcOff=r,g.nresults=n,g.func=u,g.l_base=f,g.top=f+A,X(e,g.top),g.l_code=_.code,g.l_savedpc=0,g.callstatus=V.CIST_LUA,e.hookmask&o&&rt(e,g),!1;default:return q(e,1),at(e,r,u),t(e,r,n)}},$=function(t,e,r,n){var a=e.nresults;t.hookmask&(i|l)&&(t.hookmask&i&&et(t,u,-1),t.oldpc=e.previous.l_savedpc);var s=e.funcOff;return t.ci=e.previous,t.ci.next=null,tt(t,r,s,n,a)},tt=function(t,e,r,n,a){switch(a){case 0:break;case 1:0===n?t.stack[r].setnilvalue():P.setobjs2s(t,r,e);break;case f:for(var u=0;u<n;u++)P.setobjs2s(t,r+u,e+u);for(var s=t.top;s>=r+n;s--)delete t.stack[s];return t.top=r+n,!1;default:var o;if(a<=n)for(o=0;o<a;o++)P.setobjs2s(t,r+o,e+o);else{for(o=0;o<n;o++)P.setobjs2s(t,r+o,e+o);for(;o<a;o++)r+o>=t.top?t.stack[r+o]=new P.TValue(d,null):t.stack[r+o].setnilvalue()}}for(var l=r+a,i=t.top;i>=l;i--)delete t.stack[i];return t.top=l,!0},et=function(t,e,r){var n=t.hook;if(n&&t.allowhook){var a=t.ci,u=t.top,s=a.top,o=new E;o.event=e,o.currentline=r,o.i_ci=a,q(t,c),a.top=t.top+c,I(a.top<=t.stack_last),t.allowhook=0,a.callstatus|=V.CIST_HOOKED,n(t,o),I(!t.allowhook),t.allowhook=1,a.top=s,X(t,u),a.callstatus&=~V.CIST_HOOKED}},rt=function(t,e){var r=a;e.l_savedpc++,e.previous.callstatus&V.CIST_LUA&&e.previous.l_code[e.previous.l_savedpc-1].opcode==C.OpCodesI.OP_TAILCALL&&(e.callstatus|=V.CIST_TAIL,r=s),et(t,r,-1),e.l_savedpc--},nt=function(t,e,r){var n,a=e.numparams,u=t.top-r,s=t.top;for(n=0;n<a&&n<r;n++)P.pushobj2s(t,t.stack[u+n]),t.stack[u+n].setnilvalue();for(;n<a;n++)t.stack[t.top++]=new P.TValue(d,null);return s},at=function(t,e,r){var n=G.luaT_gettmbyobj(t,r,G.TMS.TM_CALL);n.ttisfunction(n)||R.luaG_typeerror(t,r,U(\"call\",!0)),P.pushobj2s(t,t.stack[t.top-1]);for(var a=t.top-2;a>e;a--)P.setobjs2s(t,a,a-1);P.setobj2s(t,e,n)},ut=function(t,e,r){++t.nCcalls>=M&&function(t){t.nCcalls===M?R.luaG_runerror(t,U(\"JS stack overflow\",!0)):t.nCcalls>=M+(M>>3)&&st(t,T)}(t),Q(t,e,r)||j.luaV_execute(t),t.nCcalls--},st=function t(e,r){if(e.errorJmp)throw e.errorJmp.status=r,e.errorJmp;var n=e.l_G;if(e.status=r,!n.mainthread.errorJmp){var a=n.panic;throw a&&(z(e,r,e.top),e.ci.top<e.top&&(e.ci.top=e.top),a(e)),new Error(\"Aborted \".concat(r))}n.mainthread.stack[n.mainthread.top++]=e.stack[e.top-1],t(n.mainthread,r)},ot=function(t,e,r){var n=t.nCcalls,a={status:k,previous:t.errorJmp};t.errorJmp=a;try{e(t,r)}catch(e){if(a.status===k){var u=t.l_G.atnativeerror;if(u)try{if(a.status=k,N.lua_pushcfunction(t,u),N.lua_pushlightuserdata(t,e),ht(t,t.top-2,1),0!==t.errfunc){var s=t.errfunc;P.pushobj2s(t,t.stack[t.top-1]),P.setobjs2s(t,t.top-2,s),ht(t,t.top-2,1)}a.status=x}catch(t){a.status===k&&(a.status=-1)}else a.status=-1}}return t.errorJmp=a.previous,t.nCcalls=n,a.status},lt=function(t,e){var r=t.ci;I(null!==r.c_k&&0===t.nny),I(r.callstatus&V.CIST_YPCALL||e===O),r.callstatus&V.CIST_YPCALL&&(r.callstatus&=~V.CIST_YPCALL,t.errfunc=r.c_old_errfunc),r.nresults===f&&t.ci.top<t.top&&(t.ci.top=t.top);var n=(0,r.c_k)(t,e,r.c_ctx);N.api_checknelems(t,n),$(t,r,t.top-n,n)},it=function(t,e){for(null!==e&&lt(t,e);t.ci!==t.base_ci;)t.ci.callstatus&V.CIST_LUA?(j.luaV_finishOp(t),j.luaV_execute(t)):lt(t,O)},ct=function(t,e){var r=function(t){for(var e=t.ci;null!==e;e=e.previous)if(e.callstatus&V.CIST_YPCALL)return e;return null}(t);if(null===r)return 0;var n=r.extra;return y.luaF_close(t,n),z(t,e,n),t.ci=r,t.allowhook=r.callstatus&V.CIST_OAH,t.nny=0,W(t),t.errfunc=r.c_old_errfunc,1},ft=function(t,e,r){var n=B(t,e);if(0===r)P.pushsvalue2s(t,n),w(t,t.top<=t.ci.top,\"stack overflow\");else{for(var a=1;a<r;a++)delete t.stack[--t.top];P.setsvalue2s(t,t.top-1,n)}return x},_t=function(t,e){var r=t.top-e,n=t.ci;t.status===k?Q(t,r-1,f)||j.luaV_execute(t):(I(t.status===O),t.status=k,n.funcOff=n.extra,n.func=t.stack[n.funcOff],n.callstatus&V.CIST_LUA?j.luaV_execute(t):(null!==n.c_k&&(e=n.c_k(t,O,n.c_ctx),N.api_checknelems(t,e),r=t.top-e),$(t,n,r,e)),it(t,null))},pt=function(t,e,r,n){var a=t.ci;return N.api_checknelems(t,e),t.nny>0&&(t!==t.l_G.mainthread?R.luaG_runerror(t,U(\"attempt to yield across a JS-call boundary\",!0)):R.luaG_runerror(t,U(\"attempt to yield from outside a coroutine\",!0))),t.status=O,a.extra=a.funcOff,a.callstatus&V.CIST_LUA?w(t,null===n,\"hooks cannot continue after yielding\"):(a.c_k=n,null!==n&&(a.c_ctx=r),a.funcOff=t.top-e-1,a.func=t.stack[a.funcOff],st(t,O)),I(a.callstatus&V.CIST_HOOKED),0},vt=function(t,e,r,n,a){var u=t.ci,s=t.allowhook,o=t.nny,l=t.errfunc;t.errfunc=a;var i=ot(t,e,r);return i!==k&&(y.luaF_close(t,n),z(t,i,n),t.ci=u,t.allowhook=s,t.nny=o,W(t)),t.errfunc=l,i},ht=function(t,e,r){t.nny++,ut(t,e,r),t.nny--},Lt=function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.z=e,this.buff=new H,this.dyd=new D.Dyndata,this.mode=n,this.name=r},dt=function(t,e,r){e&&-1===m(e,r[0])&&(P.luaO_pushfstring(t,U(\"attempt to load a %s chunk (mode is '%s')\"),r,e),st(t,b))},At=function(t,e){var r,n=e.z.zgetc();n===_[0]?(dt(t,e.mode,U(\"binary\",!0)),r=F.luaU_undump(t,e.z,e.name)):(dt(t,e.mode,U(\"text\",!0)),r=D.luaY_parser(t,e.z,e.buff,e.dyd,e.name,n)),I(r.nupvalues===r.p.upvalues.length),y.luaF_initupvals(t,r)};t.exports.adjust_top=X,t.exports.luaD_call=ut,t.exports.luaD_callnoyield=ht,t.exports.luaD_checkstack=q,t.exports.luaD_growstack=Z,t.exports.luaD_hook=et,t.exports.luaD_inctop=function(t){q(t,1),t.stack[t.top++]=new P.TValue(d,null)},t.exports.luaD_pcall=vt,t.exports.luaD_poscall=$,t.exports.luaD_precall=Q,t.exports.luaD_protectedparser=function(t,e,r,n){var a=new Lt(e,r,n);t.nny++;var u=vt(t,At,a,t.top,t.errfunc);return t.nny--,u},t.exports.luaD_rawrunprotected=ot,t.exports.luaD_reallocstack=J,t.exports.luaD_throw=st,t.exports.lua_isyieldable=function(t){return 0===t.nny},t.exports.lua_resume=function(t,e,r){var n=t.nny;if(t.status===k){if(t.ci!==t.base_ci)return ft(t,\"cannot resume non-suspended coroutine\",r)}else if(t.status!==O)return ft(t,\"cannot resume dead coroutine\",r);if(t.nCcalls=e?e.nCcalls+1:1,t.nCcalls>=M)return ft(t,\"JS stack overflow\",r);t.nny=0,N.api_checknelems(t,t.status===k?r+1:r);var a=ot(t,_t,r);if(-1===a)a=x;else{for(;a>O&&ct(t,a);)a=ot(t,it,a);a>O?(t.status=a,z(t,a,t.top),t.ci.top=t.top):I(a===t.status)}return t.nny=n,t.nCcalls--,I(t.nCcalls===(e?e.nCcalls:0)),a},t.exports.lua_yield=function(t,e){pt(t,e,0,null)},t.exports.lua_yieldk=pt},function(t,e,r){\"use strict\";function n(t){return(n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}var a=r(1),u=a.constant_types,s=u.LUA_TBOOLEAN,o=u.LUA_TCCL,l=u.LUA_TLCF,i=u.LUA_TLCL,c=u.LUA_TLIGHTUSERDATA,f=u.LUA_TLNGSTR,_=u.LUA_TNIL,p=u.LUA_TNUMFLT,v=u.LUA_TNUMINT,h=u.LUA_TSHRSTR,L=u.LUA_TTABLE,d=u.LUA_TTHREAD,A=u.LUA_TUSERDATA,g=a.to_luastring,T=r(4).lua_assert,x=r(11),b=r(6),k=r(10),O=k.luaS_hashlongstr,E=k.TString,m=r(12),U=new WeakMap,N=function(t){var e=U.get(t);return e||(e={},U.set(t,e)),e},R=function(t,e){switch(e.type){case _:return x.luaG_runerror(t,g(\"table index is nil\",!0));case p:if(isNaN(e.value))return x.luaG_runerror(t,g(\"table index is NaN\",!0));case v:case s:case L:case i:case l:case o:case A:case d:return e.value;case h:case f:return O(e.tsvalue());case c:var r=e.value;switch(n(r)){case\"string\":return\"*\"+r;case\"number\":return\"#\"+r;case\"boolean\":return r?\"?true\":\"?false\";case\"function\":return N(r);case\"object\":if(r instanceof m.lua_State&&r.l_G===t.l_G||r instanceof y||r instanceof b.Udata||r instanceof b.LClosure||r instanceof b.CClosure)return N(r);default:return r}default:throw new Error(\"unknown key type: \"+e.type)}},y=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.id=e.l_G.id_counter++,this.strong=new Map,this.dead_strong=new Map,this.dead_weak=void 0,this.f=void 0,this.l=void 0,this.metatable=null,this.flags=-1},S=function(t,e,r,n){t.dead_strong.clear(),t.dead_weak=void 0;var a=null,u={key:r,value:n,p:a=t.l,n:void 0};t.f||(t.f=u),a&&(a.n=u),t.strong.set(e,u),t.l=u},w=function(t,e){var r=t.strong.get(e);if(r){r.key.setdeadvalue(),r.value=void 0;var a=r.n,u=r.p;r.p=void 0,u&&(u.n=a),a&&(a.p=u),t.f===r&&(t.f=a),t.l===r&&(t.l=u),t.strong.delete(e),!function(t){return\"object\"===n(t)?null!==t:\"function\"==typeof t}(e)?t.dead_strong.set(e,r):(t.dead_weak||(t.dead_weak=new WeakMap),t.dead_weak.set(e,r))}},I=function(t,e){var r=t.strong.get(e);return r?r.value:b.luaO_nilobject},M=function(t,e){return T(\"number\"==typeof e&&(0|e)===e),I(t,e)};t.exports.invalidateTMcache=function(t){t.flags=0},t.exports.luaH_get=function(t,e,r){return T(r instanceof b.TValue),r.ttisnil()||r.ttisfloat()&&isNaN(r.value)?b.luaO_nilobject:I(e,R(t,r))},t.exports.luaH_getint=M,t.exports.luaH_getn=function(t){for(var e=0,r=t.strong.size+1;r-e>1;){var n=Math.floor((e+r)/2);M(t,n).ttisnil()?r=n:e=n}return e},t.exports.luaH_getstr=function(t,e){return T(e instanceof E),I(t,O(e))},t.exports.luaH_setfrom=function(t,e,r,n){T(r instanceof b.TValue);var a=R(t,r);if(n.ttisnil())w(e,a);else{var u=e.strong.get(a);if(u)u.value.setfrom(n);else{var s,o=r.value;s=r.ttisfloat()&&(0|o)===o?new b.TValue(v,o):new b.TValue(r.type,o);var l=new b.TValue(n.type,n.value);S(e,a,s,l)}}},t.exports.luaH_setint=function(t,e,r){T(\"number\"==typeof e&&(0|e)===e&&r instanceof b.TValue);var n=e;if(r.ttisnil())w(t,n);else{var a=t.strong.get(n);if(a)a.value.setfrom(r);else{var u=new b.TValue(v,e),s=new b.TValue(r.type,r.value);S(t,n,u,s)}}},t.exports.luaH_new=function(t){return new y(t)},t.exports.luaH_next=function(t,e,r){var n,a=t.stack[r];if(a.type===_){if(!(n=e.f))return!1}else{var u=R(t,a);if(n=e.strong.get(u)){if(!(n=n.n))return!1}else{if(!(n=e.dead_weak&&e.dead_weak.get(u)||e.dead_strong.get(u)))return x.luaG_runerror(t,g(\"invalid key to 'next'\"));do{if(!(n=n.n))return!1}while(n.key.ttisdeadkey())}}return b.setobj2s(t,r,n.key),b.setobj2s(t,r+1,n.value),!0},t.exports.Table=y},function(t,e,r){\"use strict\";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=r(1),u=a.is_luastring,s=a.luastring_eq,o=a.luastring_from,l=a.to_luastring,i=r(4).lua_assert,c=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.hash=null,this.realstring=r}return function(t,e,r){e&&n(t.prototype,e),r&&n(t,r)}(t,[{key:\"getstr\",value:function(){return this.realstring}},{key:\"tsslen\",value:function(){return this.realstring.length}}]),t}(),f=function(t){i(u(t));for(var e=t.length,r=\"|\",n=0;n<e;n++)r+=t[n].toString(16);return r},_=function(t,e){return i(e instanceof Uint8Array),new c(t,e)};t.exports.luaS_eqlngstr=function(t,e){return i(t instanceof c),i(e instanceof c),t==e||s(t.realstring,e.realstring)},t.exports.luaS_hash=f,t.exports.luaS_hashlongstr=function(t){return i(t instanceof c),null===t.hash&&(t.hash=f(t.getstr())),t.hash},t.exports.luaS_bless=_,t.exports.luaS_new=function(t,e){return _(t,o(e))},t.exports.luaS_newliteral=function(t,e){return _(t,l(e))},t.exports.TString=c},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_HOOKCOUNT,u=n.LUA_HOOKLINE,s=n.LUA_MASKCOUNT,o=n.LUA_MASKLINE,l=n.constant_types,i=l.LUA_TBOOLEAN,c=l.LUA_TNIL,f=l.LUA_TTABLE,_=n.thread_status,p=_.LUA_ERRRUN,v=_.LUA_YIELD,h=n.from_userstring,L=n.luastring_eq,d=n.luastring_indexOf,A=n.to_luastring,g=r(4),T=g.api_check,x=g.lua_assert,b=r(3).LUA_IDSIZE,k=r(19),O=r(8),E=r(13),m=r(21),U=r(6),N=r(16),R=r(12),y=r(9),S=r(14),w=r(15),I=function(t){return x(t.callstatus&R.CIST_LUA),t.l_savedpc-1},M=function(t){return 0!==t.func.value.p.lineinfo.length?t.func.value.p.lineinfo[I(t)]:-1},P=function(t){if(t.status===v){var e=t.ci,r=e.funcOff;e.func=t.stack[e.extra],e.funcOff=e.extra,e.extra=r}},C=function(t,e){x(e<t.upvalues.length);var r=t.upvalues[e].name;return null===r?A(\"?\",!0):r.getstr()},D=function(t,e,r){var n,a=null;if(e.callstatus&R.CIST_LUA){if(r<0)return function(t,e){var r=t.func.value.p.numparams;return e>=t.l_base-t.funcOff-r?null:{pos:t.funcOff+r+e,name:A(\"(*vararg)\",!0)}}(e,-r);n=e.l_base,a=E.luaF_getlocalname(e.func.value.p,r,I(e))}else n=e.funcOff+1;if(null===a){if(!((e===t.ci?t.top:e.next.funcOff)-n>=r&&r>0))return null;a=A(\"(*temporary)\",!0)}return{pos:n+(r-1),name:a}},V=function(t,e){if(null===e||e instanceof U.CClosure)t.source=A(\"=[JS]\",!0),t.linedefined=-1,t.lastlinedefined=-1,t.what=A(\"J\",!0);else{var r=e.p;t.source=r.source?r.source.getstr():A(\"=?\",!0),t.linedefined=r.linedefined,t.lastlinedefined=r.lastlinedefined,t.what=0===t.linedefined?A(\"main\",!0):A(\"Lua\",!0)}t.short_src=U.luaO_chunkid(t.source,b)},B=function(t,e){var r={name:null,funcname:null};return null===e?null:e.callstatus&R.CIST_FIN?(r.name=A(\"__gc\",!0),r.funcname=A(\"metamethod\",!0),r):!(e.callstatus&R.CIST_TAIL)&&e.previous.callstatus&R.CIST_LUA?j(t,e.previous):null},G=function(t,e,r){var n={name:null,funcname:null};if(N.ISK(r)){var a=t.k[N.INDEXK(r)];if(a.ttisstring())return n.name=a.svalue(),n}else{var u=F(t,e,r);if(u&&99===u.funcname[0])return u}return n.name=A(\"?\",!0),n},K=function(t,e){return t<e?-1:t},F=function t(e,r,n){var a={name:E.luaF_getlocalname(e,n+1,r),funcname:null};if(a.name)return a.funcname=A(\"local\",!0),a;var u=function(t,e,r){for(var n=-1,a=0,u=N.OpCodesI,s=0;s<e;s++){var o=t.code[s],l=o.A;switch(o.opcode){case u.OP_LOADNIL:var i=o.B;l<=r&&r<=l+i&&(n=K(s,a));break;case u.OP_TFORCALL:r>=l+2&&(n=K(s,a));break;case u.OP_CALL:case u.OP_TAILCALL:r>=l&&(n=K(s,a));break;case u.OP_JMP:var c=s+1+o.sBx;s<c&&c<=e&&c>a&&(a=c);break;default:N.testAMode(o.opcode)&&r===l&&(n=K(s,a))}}return n}(e,r,n),s=N.OpCodesI;if(-1!==u){var o=e.code[u];switch(o.opcode){case s.OP_MOVE:var l=o.B;if(l<o.A)return t(e,u,l);break;case s.OP_GETTABUP:case s.OP_GETTABLE:var i=o.C,c=o.B,f=o.opcode===s.OP_GETTABLE?E.luaF_getlocalname(e,c+1,u):C(e,c);return a.name=G(e,u,i).name,a.funcname=f&&L(f,m.LUA_ENV)?A(\"global\",!0):A(\"field\",!0),a;case s.OP_GETUPVAL:return a.name=C(e,o.B),a.funcname=A(\"upvalue\",!0),a;case s.OP_LOADK:case s.OP_LOADKX:var _=o.opcode===s.OP_LOADK?o.Bx:e.code[u+1].Ax;if(e.k[_].ttisstring())return a.name=e.k[_].svalue(),a.funcname=A(\"constant\",!0),a;break;case s.OP_SELF:var p=o.C;return a.name=G(e,u,p).name,a.funcname=A(\"method\",!0),a}}return null},j=function(t,e){var r={name:null,funcname:null},n=0,a=e.func.value.p,u=I(e),s=a.code[u],o=N.OpCodesI;if(e.callstatus&R.CIST_HOOKED)return r.name=A(\"?\",!0),r.funcname=A(\"hook\",!0),r;switch(s.opcode){case o.OP_CALL:case o.OP_TAILCALL:return F(a,u,s.A);case o.OP_TFORCALL:return r.name=A(\"for iterator\",!0),r.funcname=A(\"for iterator\",!0),r;case o.OP_SELF:case o.OP_GETTABUP:case o.OP_GETTABLE:n=S.TMS.TM_INDEX;break;case o.OP_SETTABUP:case o.OP_SETTABLE:n=S.TMS.TM_NEWINDEX;break;case o.OP_ADD:n=S.TMS.TM_ADD;break;case o.OP_SUB:n=S.TMS.TM_SUB;break;case o.OP_MUL:n=S.TMS.TM_MUL;break;case o.OP_MOD:n=S.TMS.TM_MOD;break;case o.OP_POW:n=S.TMS.TM_POW;break;case o.OP_DIV:n=S.TMS.TM_DIV;break;case o.OP_IDIV:n=S.TMS.TM_IDIV;break;case o.OP_BAND:n=S.TMS.TM_BAND;break;case o.OP_BOR:n=S.TMS.TM_BOR;break;case o.OP_BXOR:n=S.TMS.TM_BXOR;break;case o.OP_SHL:n=S.TMS.TM_SHL;break;case o.OP_SHR:n=S.TMS.TM_SHR;break;case o.OP_UNM:n=S.TMS.TM_UNM;break;case o.OP_BNOT:n=S.TMS.TM_BNOT;break;case o.OP_LEN:n=S.TMS.TM_LEN;break;case o.OP_CONCAT:n=S.TMS.TM_CONCAT;break;case o.OP_EQ:n=S.TMS.TM_EQ;break;case o.OP_LT:n=S.TMS.TM_LT;break;case o.OP_LE:n=S.TMS.TM_LE;break;default:return null}return r.name=t.l_G.tmname[n].getstr(),r.funcname=A(\"metamethod\",!0),r},H=function(t,e){var r=t.ci,n=null;if(r.callstatus&R.CIST_LUA){n=function(t,e,r){for(var n=e.func.value,a=0;a<n.nupvalues;a++)if(n.upvals[a]===r)return{name:C(n.p,a),funcname:A(\"upvalue\",!0)};return null}(0,r,e);var a=function(t,e,r){for(var n=e.l_base;n<e.top;n++)if(t.stack[n]===r)return n;return!1}(t,r,e);!n&&a&&(n=F(r.func.value.p,I(r),a-r.l_base))}return n?U.luaO_pushfstring(t,A(\" (%s '%s')\",!0),n.funcname,n.name):A(\"\",!0)},X=function(t,e,r){var n=S.luaT_objtypename(t,e);Y(t,A(\"attempt to %s a %s value%s\",!0),r,n,H(t,e))},z=function(t,e,r,n){var a;return a=r?U.luaO_chunkid(r.getstr(),b):A(\"?\",!0),U.luaO_pushfstring(t,A(\"%s:%d: %s\",!0),a,n,e)},Y=function(t,e){for(var r=t.ci,n=arguments.length,a=new Array(n>2?n-2:0),u=2;u<n;u++)a[u-2]=arguments[u];var s=U.luaO_pushvfstring(t,e,a);r.callstatus&R.CIST_LUA&&z(t,s,r.func.value.p.source,M(r)),J(t)},J=function(t){if(0!==t.errfunc){var e=t.errfunc;U.pushobj2s(t,t.stack[t.top-1]),U.setobjs2s(t,t.top-2,e),O.luaD_callnoyield(t,t.top-2,1)}O.luaD_throw(t,p)};t.exports.luaG_addinfo=z,t.exports.luaG_concaterror=function(t,e,r){(e.ttisstring()||w.cvt2str(e))&&(e=r),X(t,e,A(\"concatenate\",!0))},t.exports.luaG_errormsg=J,t.exports.luaG_opinterror=function(t,e,r,n){!1===w.tonumber(e)&&(r=e),X(t,r,n)},t.exports.luaG_ordererror=function(t,e,r){var n=S.luaT_objtypename(t,e),a=S.luaT_objtypename(t,r);L(n,a)?Y(t,A(\"attempt to compare two %s values\",!0),n):Y(t,A(\"attempt to compare %s with %s\",!0),n,a)},t.exports.luaG_runerror=Y,t.exports.luaG_tointerror=function(t,e,r){!1===w.tointeger(e)&&(r=e),Y(t,A(\"number%s has no integer representation\",!0),H(t,r))},t.exports.luaG_traceexec=function(t){var e=t.ci,r=t.hookmask,n=0==--t.hookcount&&r&s;if(n)t.hookcount=t.basehookcount;else if(!(r&o))return;if(e.callstatus&R.CIST_HOOKYIELD)e.callstatus&=~R.CIST_HOOKYIELD;else{if(n&&O.luaD_hook(t,a,-1),r&o){var l=e.func.value.p,i=e.l_savedpc-1,c=0!==l.lineinfo.length?l.lineinfo[i]:-1;(0===i||e.l_savedpc<=t.oldpc||c!==(0!==l.lineinfo.length?l.lineinfo[t.oldpc-1]:-1))&&O.luaD_hook(t,u,c)}t.oldpc=e.l_savedpc,t.status===v&&(n&&(t.hookcount=1),e.l_savedpc--,e.callstatus|=R.CIST_HOOKYIELD,e.funcOff=t.top-1,e.func=t.stack[e.funcOff],O.luaD_throw(t,v))}},t.exports.luaG_typeerror=X,t.exports.lua_gethook=function(t){return t.hook},t.exports.lua_gethookcount=function(t){return t.basehookcount},t.exports.lua_gethookmask=function(t){return t.hookmask},t.exports.lua_getinfo=function(t,e,r){var n,a,u,s;return e=h(e),P(t),62===e[0]?(u=null,s=t.stack[t.top-1],T(t,s.ttisfunction(),\"function expected\"),e=e.subarray(1),t.top--):(s=(u=r.i_ci).func,x(u.func.ttisfunction())),n=function(t,e,r,n,a){for(var u=1;e.length>0;e=e.subarray(1))switch(e[0]){case 83:V(r,n);break;case 108:r.currentline=a&&a.callstatus&R.CIST_LUA?M(a):-1;break;case 117:r.nups=null===n?0:n.nupvalues,null===n||n instanceof U.CClosure?(r.isvararg=!0,r.nparams=0):(r.isvararg=n.p.is_vararg,r.nparams=n.p.numparams);break;case 116:r.istailcall=a?a.callstatus&R.CIST_TAIL:0;break;case 110:var s=B(t,a);null===s?(r.namewhat=A(\"\",!0),r.name=null):(r.namewhat=s.funcname,r.name=s.name);break;case 76:case 102:break;default:u=0}return u}(t,e,r,a=s.ttisclosure()?s.value:null,u),d(e,102)>=0&&(U.pushobj2s(t,s),T(t,t.top<=t.ci.top,\"stack overflow\")),P(t),d(e,76)>=0&&function(t,e){if(null===e||e instanceof U.CClosure)t.stack[t.top]=new U.TValue(c,null),k.api_incr_top(t);else{var r=e.p.lineinfo,n=y.luaH_new(t);t.stack[t.top]=new U.TValue(f,n),k.api_incr_top(t);for(var a=new U.TValue(i,!0),u=0;u<r.length;u++)y.luaH_setint(n,r[u],a)}}(t,a),n},t.exports.lua_getlocal=function(t,e,r){var n;if(P(t),null===e)n=t.stack[t.top-1].ttisLclosure()?E.luaF_getlocalname(t.stack[t.top-1].value.p,r,0):null;else{var a=D(t,e.i_ci,r);a?(n=a.name,U.pushobj2s(t,t.stack[a.pos]),T(t,t.top<=t.ci.top,\"stack overflow\")):n=null}return P(t),n},t.exports.lua_getstack=function(t,e,r){var n,a;if(e<0)return 0;for(n=t.ci;e>0&&n!==t.base_ci;n=n.previous)e--;return 0===e&&n!==t.base_ci?(a=1,r.i_ci=n):a=0,a},t.exports.lua_sethook=function(t,e,r,n){null!==e&&0!==r||(r=0,e=null),t.ci.callstatus&R.CIST_LUA&&(t.oldpc=t.ci.l_savedpc),t.hook=e,t.basehookcount=n,t.hookcount=t.basehookcount,t.hookmask=r},t.exports.lua_setlocal=function(t,e,r){var n;P(t);var a=D(t,e.i_ci,r);return a?(n=a.name,U.setobjs2s(t,a.pos,t.top-1),delete t.stack[--t.top]):n=null,P(t),n}},function(t,e,r){\"use strict\";function n(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var a=r(1),u=a.LUA_MINSTACK,s=a.LUA_RIDX_GLOBALS,o=a.LUA_RIDX_MAINTHREAD,l=a.constant_types,i=l.LUA_NUMTAGS,c=l.LUA_TNIL,f=l.LUA_TTABLE,_=l.LUA_TTHREAD,p=a.thread_status.LUA_OK,v=r(6),h=r(8),L=r(19),d=r(9),A=r(14),g=2*u,T=function t(){n(this,t),this.func=null,this.funcOff=NaN,this.top=NaN,this.previous=null,this.next=null,this.l_base=NaN,this.l_code=null,this.l_savedpc=NaN,this.c_k=null,this.c_old_errfunc=null,this.c_ctx=null,this.nresults=NaN,this.callstatus=NaN},x=function t(e){n(this,t),this.id=e.id_counter++,this.base_ci=new T,this.top=NaN,this.stack_last=NaN,this.oldpc=NaN,this.l_G=e,this.stack=null,this.ci=null,this.errorJmp=null,this.nCcalls=0,this.hook=null,this.hookmask=0,this.basehookcount=0,this.allowhook=1,this.hookcount=this.basehookcount,this.nny=1,this.status=p,this.errfunc=0},b=function(t){t.ci.next=null},k=function(t,e){t.stack=new Array(g),t.top=0,t.stack_last=g-5;var r=t.base_ci;r.next=r.previous=null,r.callstatus=0,r.funcOff=t.top,r.func=t.stack[t.top],t.stack[t.top++]=new v.TValue(c,null),r.top=t.top+u,t.ci=r},O=function(t){t.ci=t.base_ci,b(t),t.stack=null},E=function(t){var e=t.l_G;k(t),function(t,e){var r=d.luaH_new(t);e.l_registry.sethvalue(r),d.luaH_setint(r,o,new v.TValue(_,t)),d.luaH_setint(r,s,new v.TValue(f,d.luaH_new(t)))}(t,e),A.luaT_init(t),e.version=L.lua_version(null)};t.exports.lua_State=x,t.exports.CallInfo=T,t.exports.CIST_OAH=1,t.exports.CIST_LUA=2,t.exports.CIST_HOOKED=4,t.exports.CIST_FRESH=8,t.exports.CIST_YPCALL=16,t.exports.CIST_TAIL=32,t.exports.CIST_HOOKYIELD=64,t.exports.CIST_LEQ=128,t.exports.CIST_FIN=256,t.exports.EXTRA_STACK=5,t.exports.lua_close=function(t){!function(t){O(t)}(t=t.l_G.mainthread)},t.exports.lua_newstate=function(){var t=new function t(){n(this,t),this.id_counter=1,this.ids=new WeakMap,this.mainthread=null,this.l_registry=new v.TValue(c,null),this.panic=null,this.atnativeerror=null,this.version=null,this.tmname=new Array(A.TMS.TM_N),this.mt=new Array(i)},e=new x(t);return t.mainthread=e,h.luaD_rawrunprotected(e,E,null)!==p&&(e=null),e},t.exports.lua_newthread=function(t){var e=t.l_G,r=new x(e);return t.stack[t.top]=new v.TValue(_,r),L.api_incr_top(t),r.hookmask=t.hookmask,r.basehookcount=t.basehookcount,r.hook=t.hook,r.hookcount=r.basehookcount,k(r),r},t.exports.luaE_extendCI=function(t){var e=new T;return t.ci.next=e,e.previous=t.ci,e.next=null,t.ci=e,e},t.exports.luaE_freeCI=b,t.exports.luaE_freethread=function(t,e){O(e)}},function(t,e,r){\"use strict\";var n=r(1).constant_types.LUA_TNIL,a=r(6);t.exports.MAXUPVAL=255,t.exports.Proto=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.id=e.l_G.id_counter++,this.k=[],this.p=[],this.code=[],this.cache=null,this.lineinfo=[],this.upvalues=[],this.numparams=0,this.is_vararg=!1,this.maxstacksize=0,this.locvars=[],this.linedefined=0,this.lastlinedefined=0,this.source=null},t.exports.luaF_findupval=function(t,e){return t.stack[e]},t.exports.luaF_close=function(t,e){for(var r=e;r<t.top;r++){var n=t.stack[r];t.stack[r]=new a.TValue(n.type,n.value)}},t.exports.luaF_getlocalname=function(t,e,r){for(var n=0;n<t.locvars.length&&t.locvars[n].startpc<=r;n++)if(r<t.locvars[n].endpc&&0==--e)return t.locvars[n].varname.getstr();return null},t.exports.luaF_initupvals=function(t,e){for(var r=0;r<e.nupvalues;r++)e.upvals[r]=new a.TValue(n,null)},t.exports.luaF_newLclosure=function(t,e){return new a.LClosure(t,e)}},function(t,e,r){\"use strict\";var n=r(1),a=n.constant_types,u=a.LUA_TTABLE,s=a.LUA_TUSERDATA,o=n.to_luastring,l=r(4).lua_assert,i=r(6),c=r(8),f=r(12),_=r(10),p=_.luaS_bless,v=_.luaS_new,h=r(9),L=r(11),d=r(15),A=[\"no value\",\"nil\",\"boolean\",\"userdata\",\"number\",\"string\",\"table\",\"function\",\"userdata\",\"thread\",\"proto\"].map(function(t){return o(t)}),g=function(t){return A[t+1]},T={TM_INDEX:0,TM_NEWINDEX:1,TM_GC:2,TM_MODE:3,TM_LEN:4,TM_EQ:5,TM_ADD:6,TM_SUB:7,TM_MUL:8,TM_MOD:9,TM_POW:10,TM_DIV:11,TM_IDIV:12,TM_BAND:13,TM_BOR:14,TM_BXOR:15,TM_SHL:16,TM_SHR:17,TM_UNM:18,TM_BNOT:19,TM_LT:20,TM_LE:21,TM_CONCAT:22,TM_CALL:23,TM_N:24},x=o(\"__name\",!0),b=function(t,e,r,n,a,u){var s=t.top;if(i.pushobj2s(t,e),i.pushobj2s(t,r),i.pushobj2s(t,n),u||i.pushobj2s(t,a),t.ci.callstatus&f.CIST_LUA?c.luaD_call(t,s,u):c.luaD_callnoyield(t,s,u),u){var o=t.stack[t.top-1];delete t.stack[--t.top],a.setfrom(o)}},k=function(t,e,r,n,a){var u=E(t,e,a);return u.ttisnil()&&(u=E(t,r,a)),!u.ttisnil()&&(b(t,u,e,r,n,1),!0)},O=function(t,e,r){var n=h.luaH_getstr(t,r);return l(e<=T.TM_EQ),n.ttisnil()?(t.flags|=1<<e,null):n},E=function(t,e,r){var n;switch(e.ttnov()){case u:case s:n=e.value.metatable;break;default:n=t.l_G.mt[e.ttnov()]}return n?h.luaH_getstr(n,t.l_G.tmname[r]):i.luaO_nilobject};t.exports.fasttm=function(t,e,r){return null===e?null:e.flags&1<<r?null:O(e,r,t.l_G.tmname[r])},t.exports.TMS=T,t.exports.luaT_callTM=b,t.exports.luaT_callbinTM=k,t.exports.luaT_trybinTM=function(t,e,r,n,a){if(!k(t,e,r,n,a))switch(a){case T.TM_CONCAT:return L.luaG_concaterror(t,e,r);case T.TM_BAND:case T.TM_BOR:case T.TM_BXOR:case T.TM_SHL:case T.TM_SHR:case T.TM_BNOT:var u=d.tonumber(e),s=d.tonumber(r);return!1!==u&&!1!==s?L.luaG_tointerror(t,e,r):L.luaG_opinterror(t,e,r,o(\"perform bitwise operation on\",!0));default:return L.luaG_opinterror(t,e,r,o(\"perform arithmetic on\",!0))}},t.exports.luaT_callorderTM=function(t,e,r,n){var a=new i.TValue;return k(t,e,r,a,n)?!a.l_isfalse():null},t.exports.luaT_gettm=O,t.exports.luaT_gettmbyobj=E,t.exports.luaT_init=function(t){t.l_G.tmname[T.TM_INDEX]=new v(t,o(\"__index\",!0)),t.l_G.tmname[T.TM_NEWINDEX]=new v(t,o(\"__newindex\",!0)),t.l_G.tmname[T.TM_GC]=new v(t,o(\"__gc\",!0)),t.l_G.tmname[T.TM_MODE]=new v(t,o(\"__mode\",!0)),t.l_G.tmname[T.TM_LEN]=new v(t,o(\"__len\",!0)),t.l_G.tmname[T.TM_EQ]=new v(t,o(\"__eq\",!0)),t.l_G.tmname[T.TM_ADD]=new v(t,o(\"__add\",!0)),t.l_G.tmname[T.TM_SUB]=new v(t,o(\"__sub\",!0)),t.l_G.tmname[T.TM_MUL]=new v(t,o(\"__mul\",!0)),t.l_G.tmname[T.TM_MOD]=new v(t,o(\"__mod\",!0)),t.l_G.tmname[T.TM_POW]=new v(t,o(\"__pow\",!0)),t.l_G.tmname[T.TM_DIV]=new v(t,o(\"__div\",!0)),t.l_G.tmname[T.TM_IDIV]=new v(t,o(\"__idiv\",!0)),t.l_G.tmname[T.TM_BAND]=new v(t,o(\"__band\",!0)),t.l_G.tmname[T.TM_BOR]=new v(t,o(\"__bor\",!0)),t.l_G.tmname[T.TM_BXOR]=new v(t,o(\"__bxor\",!0)),t.l_G.tmname[T.TM_SHL]=new v(t,o(\"__shl\",!0)),t.l_G.tmname[T.TM_SHR]=new v(t,o(\"__shr\",!0)),t.l_G.tmname[T.TM_UNM]=new v(t,o(\"__unm\",!0)),t.l_G.tmname[T.TM_BNOT]=new v(t,o(\"__bnot\",!0)),t.l_G.tmname[T.TM_LT]=new v(t,o(\"__lt\",!0)),t.l_G.tmname[T.TM_LE]=new v(t,o(\"__le\",!0)),t.l_G.tmname[T.TM_CONCAT]=new v(t,o(\"__concat\",!0)),t.l_G.tmname[T.TM_CALL]=new v(t,o(\"__call\",!0))},t.exports.luaT_objtypename=function(t,e){var r;if(e.ttistable()&&null!==(r=e.value.metatable)||e.ttisfulluserdata()&&null!==(r=e.value.metatable)){var n=h.luaH_getstr(r,p(t,x));if(n.ttisstring())return n.svalue()}return g(e.ttnov())},t.exports.ttypename=g},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_MASKLINE,u=n.LUA_MASKCOUNT,s=n.LUA_MULTRET,o=n.constant_types,l=o.LUA_TBOOLEAN,i=o.LUA_TLCF,c=o.LUA_TLIGHTUSERDATA,f=o.LUA_TLNGSTR,_=o.LUA_TNIL,p=o.LUA_TNUMBER,v=o.LUA_TNUMFLT,h=o.LUA_TNUMINT,L=o.LUA_TSHRSTR,d=o.LUA_TTABLE,A=o.LUA_TUSERDATA,g=n.to_luastring,T=r(16),x=T.INDEXK,b=T.ISK,k=T.LFIELDS_PER_FLUSH,O=T.OpCodesI,E=O.OP_ADD,m=O.OP_BAND,U=O.OP_BNOT,N=O.OP_BOR,R=O.OP_BXOR,y=O.OP_CALL,S=O.OP_CLOSURE,w=O.OP_CONCAT,I=O.OP_DIV,M=O.OP_EQ,P=O.OP_EXTRAARG,C=O.OP_FORLOOP,D=O.OP_FORPREP,V=O.OP_GETTABLE,B=O.OP_GETTABUP,G=O.OP_GETUPVAL,K=O.OP_IDIV,F=O.OP_JMP,j=O.OP_LE,H=O.OP_LEN,X=O.OP_LOADBOOL,z=O.OP_LOADK,Y=O.OP_LOADKX,J=O.OP_LOADNIL,Z=O.OP_LT,q=O.OP_MOD,W=O.OP_MOVE,Q=O.OP_MUL,$=O.OP_NEWTABLE,tt=O.OP_NOT,et=O.OP_POW,rt=O.OP_RETURN,nt=O.OP_SELF,at=O.OP_SETLIST,ut=O.OP_SETTABLE,st=O.OP_SETTABUP,ot=O.OP_SETUPVAL,lt=O.OP_SHL,it=O.OP_SHR,ct=O.OP_SUB,ft=O.OP_TAILCALL,_t=O.OP_TEST,pt=O.OP_TESTSET,vt=O.OP_TFORCALL,ht=O.OP_TFORLOOP,Lt=O.OP_UNM,dt=O.OP_VARARG,At=r(3),gt=At.LUA_MAXINTEGER,Tt=At.LUA_MININTEGER,xt=At.lua_numbertointeger,bt=r(4),kt=bt.lua_assert,Ot=bt.luai_nummod,Et=r(6),mt=r(13),Ut=r(12),Nt=r(10),Rt=Nt.luaS_bless,yt=Nt.luaS_eqlngstr,St=Nt.luaS_hashlongstr,wt=r(8),It=r(14),Mt=r(9),Pt=r(11),Ct=function(t,e,r){return e+r.A},Dt=function(t,e,r){return e+r.B},Vt=function(t,e,r,n){return b(n.B)?r[x(n.B)]:t.stack[e+n.B]},Bt=function(t,e,r,n){return b(n.C)?r[x(n.C)]:t.stack[e+n.C]},Gt=function(t,e,r,n){var a=r.A;0!==a&&mt.luaF_close(t,e.l_base+a-1),e.l_savedpc+=r.sBx+n},Kt=function(t,e){Gt(t,e,e.l_code[e.l_savedpc],1)},Ft=function(t,e,r){if(e.ttisnumber()&&r.ttisnumber())return Zt(e,r)?1:0;if(e.ttisstring()&&r.ttisstring())return Wt(e.tsvalue(),r.tsvalue())<0?1:0;var n=It.luaT_callorderTM(t,e,r,It.TMS.TM_LT);return null===n&&Pt.luaG_ordererror(t,e,r),n?1:0},jt=function(t,e,r){var n;return e.ttisnumber()&&r.ttisnumber()?qt(e,r)?1:0:e.ttisstring()&&r.ttisstring()?Wt(e.tsvalue(),r.tsvalue())<=0?1:0:null!==(n=It.luaT_callorderTM(t,e,r,It.TMS.TM_LE))?n?1:0:(t.ci.callstatus|=Ut.CIST_LEQ,n=It.luaT_callorderTM(t,r,e,It.TMS.TM_LT),t.ci.callstatus^=Ut.CIST_LEQ,null===n&&Pt.luaG_ordererror(t,e,r),n?0:1)},Ht=function(t,e,r){if(e.ttype()!==r.ttype())return e.ttnov()!==r.ttnov()||e.ttnov()!==p?0:e.value===r.value?1:0;var n;switch(e.ttype()){case _:return 1;case l:return e.value==r.value?1:0;case c:case h:case v:case i:return e.value===r.value?1:0;case L:case f:return yt(e.tsvalue(),r.tsvalue())?1:0;case A:case d:if(e.value===r.value)return 1;if(null===t)return 0;null===(n=It.fasttm(t,e.value.metatable,It.TMS.TM_EQ))&&(n=It.fasttm(t,r.value.metatable,It.TMS.TM_EQ));break;default:return e.value===r.value?1:0}if(null===n)return 0;var a=new Et.TValue;return It.luaT_callTM(t,n,e,r,a,1),a.l_isfalse()?0:1},Xt=function(t,e){var r=!1,n=zt(t,e<0?2:1);if(!1===n){var a=Jt(t);if(!1===a)return!1;0<a?(n=gt,e<0&&(r=!0)):(n=Tt,e>=0&&(r=!0))}return{stopnow:r,ilimit:n}},zt=function t(e,r){if(e.ttisfloat()){var n=e.value,a=Math.floor(n);if(n!==a){if(0===r)return!1;r>1&&(a+=1)}return xt(a)}if(e.ttisinteger())return e.value;if(se(e)){var u=new Et.TValue;if(Et.luaO_str2num(e.svalue(),u)===e.vslen()+1)return t(u,r)}return!1},Yt=function(t){return t.ttisinteger()?t.value:zt(t,0)},Jt=function(t){if(t.ttnov()===p)return t.value;if(se(t)){var e=new Et.TValue;if(Et.luaO_str2num(t.svalue(),e)===t.vslen()+1)return e.value}return!1},Zt=function(t,e){return t.value<e.value},qt=function(t,e){return t.value<=e.value},Wt=function(t,e){var r=St(t),n=St(e);return r===n?0:r<n?-1:1},Qt=function(t,e,r){var n;switch(r.ttype()){case d:var a=r.value;if(null!==(n=It.fasttm(t,a.metatable,It.TMS.TM_LEN)))break;return void e.setivalue(Mt.luaH_getn(a));case L:case f:return void e.setivalue(r.vslen());default:(n=It.luaT_gettmbyobj(t,r,It.TMS.TM_LEN)).ttisnil()&&Pt.luaG_typeerror(t,r,g(\"get length of\",!0))}It.luaT_callTM(t,n,r,r,e,1)},$t=Math.imul||function(t,e){var r=65535&t,n=65535&e;return r*n+((t>>>16&65535)*n+r*(e>>>16&65535)<<16>>>0)|0},te=function(t,e,r){return 0===r&&Pt.luaG_runerror(t,g(\"attempt to divide by zero\")),0|Math.floor(e/r)},ee=function(t,e,r){return 0===r&&Pt.luaG_runerror(t,g(\"attempt to perform 'n%%0'\")),e-Math.floor(e/r)*r|0},re=function(t,e){return e<0?e<=-32?0:t>>>-e:e>=32?0:t<<e},ne=function(t,e,r,n){var a=t.cache;if(null!==a)for(var u=t.upvalues,s=u.length,o=0;o<s;o++){var l=u[o].instack?r[n+u[o].idx]:e[u[o].idx];if(a.upvals[o]!==l)return null}return a},ae=function(t,e,r,n,a){var u=e.upvalues.length,s=e.upvalues,o=new Et.LClosure(t,u);o.p=e,t.stack[a].setclLvalue(o);for(var l=0;l<u;l++)s[l].instack?o.upvals[l]=mt.luaF_findupval(t,n+s[l].idx):o.upvals[l]=r[s[l].idx];e.cache=o},ue=function(t){return t.ttisnumber()},se=function(t){return t.ttisstring()},oe=function(t,e){var r=t.stack[e];return!!r.ttisstring()||!!ue(r)&&(Et.luaO_tostring(t,r),!0)},le=function(t){return t.ttisstring()&&0===t.vslen()},ie=function(t,e,r,n){var a=0;do{var u=t.stack[e-r],s=u.vslen(),o=u.svalue();n.set(o,a),a+=s}while(--r>0)},ce=function(t,e){kt(e>=2);do{var r=t.top,n=2;if((t.stack[r-2].ttisstring()||ue(t.stack[r-2]))&&oe(t,r-1))if(le(t.stack[r-1]))oe(t,r-2);else if(le(t.stack[r-2]))Et.setobjs2s(t,r-2,r-1);else{var a=t.stack[r-1].vslen();for(n=1;n<e&&oe(t,r-n-1);n++){a+=t.stack[r-n-1].vslen()}var u=new Uint8Array(a);ie(t,r,n,u);var s=Rt(t,u);Et.setsvalue2s(t,r-n,s)}else It.luaT_trybinTM(t,t.stack[r-2],t.stack[r-1],t.stack[r-2],It.TMS.TM_CONCAT);for(e-=n-1;t.top>r-(n-1);)delete t.stack[--t.top]}while(e>1)},fe=function(t,e,r,n){for(var a=0;a<2e3;a++){var u=void 0;if(e.ttistable()){var s=Mt.luaH_get(t,e.value,r);if(!s.ttisnil())return void Et.setobj2s(t,n,s);if(null===(u=It.fasttm(t,e.value.metatable,It.TMS.TM_INDEX)))return void t.stack[n].setnilvalue()}else(u=It.luaT_gettmbyobj(t,e,It.TMS.TM_INDEX)).ttisnil()&&Pt.luaG_typeerror(t,e,g(\"index\",!0));if(u.ttisfunction())return void It.luaT_callTM(t,u,e,r,t.stack[n],1);e=u}Pt.luaG_runerror(t,g(\"'__index' chain too long; possible loop\",!0))},_e=function(t,e,r,n){for(var a=0;a<2e3;a++){var u=void 0;if(e.ttistable()){var s=e.value;if(!Mt.luaH_get(t,s,r).ttisnil()||null===(u=It.fasttm(t,s.metatable,It.TMS.TM_NEWINDEX)))return Mt.luaH_setfrom(t,s,r,n),void Mt.invalidateTMcache(s)}else(u=It.luaT_gettmbyobj(t,e,It.TMS.TM_NEWINDEX)).ttisnil()&&Pt.luaG_typeerror(t,e,g(\"index\",!0));if(u.ttisfunction())return void It.luaT_callTM(t,u,e,r,n,0);e=u}Pt.luaG_runerror(t,g(\"'__newindex' chain too long; possible loop\",!0))};t.exports.cvt2str=ue,t.exports.cvt2num=se,t.exports.luaV_gettable=fe,t.exports.luaV_concat=ce,t.exports.luaV_div=te,t.exports.luaV_equalobj=Ht,t.exports.luaV_execute=function(t){var e=t.ci;e.callstatus|=Ut.CIST_FRESH;t:for(;;){kt(e===t.ci);var r=e.func.value,n=r.p.k,o=e.l_base,l=e.l_code[e.l_savedpc++];t.hookmask&(a|u)&&Pt.luaG_traceexec(t);var i=Ct(0,o,l);switch(l.opcode){case W:Et.setobjs2s(t,i,Dt(0,o,l));break;case z:var c=n[l.Bx];Et.setobj2s(t,i,c);break;case Y:kt(e.l_code[e.l_savedpc].opcode===P);var f=n[e.l_code[e.l_savedpc++].Ax];Et.setobj2s(t,i,f);break;case X:t.stack[i].setbvalue(0!==l.B),0!==l.C&&e.l_savedpc++;break;case J:for(var _=0;_<=l.B;_++)t.stack[i+_].setnilvalue();break;case G:var p=l.B;Et.setobj2s(t,i,r.upvals[p]);break;case B:var v=r.upvals[l.B],h=Bt(t,o,n,l);fe(t,v,h,i);break;case V:var L=t.stack[Dt(0,o,l)],d=Bt(t,o,n,l);fe(t,L,d,i);break;case st:var A=r.upvals[l.A],T=Vt(t,o,n,l),x=Bt(t,o,n,l);_e(t,A,T,x);break;case ot:r.upvals[l.B].setfrom(t.stack[i]);break;case ut:var b=t.stack[i],O=Vt(t,o,n,l),At=Bt(t,o,n,l);_e(t,b,O,At);break;case $:t.stack[i].sethvalue(Mt.luaH_new(t));break;case nt:var gt=Dt(0,o,l),Tt=Bt(t,o,n,l);Et.setobjs2s(t,i+1,gt),fe(t,t.stack[gt],Tt,i);break;case E:var xt=Vt(t,o,n,l),bt=Bt(t,o,n,l),Nt=void 0,Rt=void 0;xt.ttisinteger()&&bt.ttisinteger()?t.stack[i].setivalue(xt.value+bt.value|0):!1!==(Nt=Jt(xt))&&!1!==(Rt=Jt(bt))?t.stack[i].setfltvalue(Nt+Rt):It.luaT_trybinTM(t,xt,bt,t.stack[i],It.TMS.TM_ADD);break;case ct:var yt=Vt(t,o,n,l),St=Bt(t,o,n,l),zt=void 0,Zt=void 0;yt.ttisinteger()&&St.ttisinteger()?t.stack[i].setivalue(yt.value-St.value|0):!1!==(zt=Jt(yt))&&!1!==(Zt=Jt(St))?t.stack[i].setfltvalue(zt-Zt):It.luaT_trybinTM(t,yt,St,t.stack[i],It.TMS.TM_SUB);break;case Q:var qt=Vt(t,o,n,l),Wt=Bt(t,o,n,l),ue=void 0,se=void 0;qt.ttisinteger()&&Wt.ttisinteger()?t.stack[i].setivalue($t(qt.value,Wt.value)):!1!==(ue=Jt(qt))&&!1!==(se=Jt(Wt))?t.stack[i].setfltvalue(ue*se):It.luaT_trybinTM(t,qt,Wt,t.stack[i],It.TMS.TM_MUL);break;case q:var oe=Vt(t,o,n,l),le=Bt(t,o,n,l),ie=void 0,pe=void 0;oe.ttisinteger()&&le.ttisinteger()?t.stack[i].setivalue(ee(t,oe.value,le.value)):!1!==(ie=Jt(oe))&&!1!==(pe=Jt(le))?t.stack[i].setfltvalue(Ot(t,ie,pe)):It.luaT_trybinTM(t,oe,le,t.stack[i],It.TMS.TM_MOD);break;case et:var ve,he=Vt(t,o,n,l),Le=Bt(t,o,n,l),de=void 0;!1!==(ve=Jt(he))&&!1!==(de=Jt(Le))?t.stack[i].setfltvalue(Math.pow(ve,de)):It.luaT_trybinTM(t,he,Le,t.stack[i],It.TMS.TM_POW);break;case I:var Ae,ge=Vt(t,o,n,l),Te=Bt(t,o,n,l),xe=void 0;!1!==(Ae=Jt(ge))&&!1!==(xe=Jt(Te))?t.stack[i].setfltvalue(Ae/xe):It.luaT_trybinTM(t,ge,Te,t.stack[i],It.TMS.TM_DIV);break;case K:var be=Vt(t,o,n,l),ke=Bt(t,o,n,l),Oe=void 0,Ee=void 0;be.ttisinteger()&&ke.ttisinteger()?t.stack[i].setivalue(te(t,be.value,ke.value)):!1!==(Oe=Jt(be))&&!1!==(Ee=Jt(ke))?t.stack[i].setfltvalue(Math.floor(Oe/Ee)):It.luaT_trybinTM(t,be,ke,t.stack[i],It.TMS.TM_IDIV);break;case m:var me,Ue=Vt(t,o,n,l),Ne=Bt(t,o,n,l),Re=void 0;!1!==(me=Yt(Ue))&&!1!==(Re=Yt(Ne))?t.stack[i].setivalue(me&Re):It.luaT_trybinTM(t,Ue,Ne,t.stack[i],It.TMS.TM_BAND);break;case N:var ye,Se=Vt(t,o,n,l),we=Bt(t,o,n,l),Ie=void 0;!1!==(ye=Yt(Se))&&!1!==(Ie=Yt(we))?t.stack[i].setivalue(ye|Ie):It.luaT_trybinTM(t,Se,we,t.stack[i],It.TMS.TM_BOR);break;case R:var Me,Pe=Vt(t,o,n,l),Ce=Bt(t,o,n,l),De=void 0;!1!==(Me=Yt(Pe))&&!1!==(De=Yt(Ce))?t.stack[i].setivalue(Me^De):It.luaT_trybinTM(t,Pe,Ce,t.stack[i],It.TMS.TM_BXOR);break;case lt:var Ve,Be=Vt(t,o,n,l),Ge=Bt(t,o,n,l),Ke=void 0;!1!==(Ve=Yt(Be))&&!1!==(Ke=Yt(Ge))?t.stack[i].setivalue(re(Ve,Ke)):It.luaT_trybinTM(t,Be,Ge,t.stack[i],It.TMS.TM_SHL);break;case it:var Fe,je=Vt(t,o,n,l),He=Bt(t,o,n,l),Xe=void 0;!1!==(Fe=Yt(je))&&!1!==(Xe=Yt(He))?t.stack[i].setivalue(re(Fe,-Xe)):It.luaT_trybinTM(t,je,He,t.stack[i],It.TMS.TM_SHR);break;case Lt:var ze=t.stack[Dt(0,o,l)],Ye=void 0;ze.ttisinteger()?t.stack[i].setivalue(0|-ze.value):!1!==(Ye=Jt(ze))?t.stack[i].setfltvalue(-Ye):It.luaT_trybinTM(t,ze,ze,t.stack[i],It.TMS.TM_UNM);break;case U:var Je=t.stack[Dt(0,o,l)];Je.ttisinteger()?t.stack[i].setivalue(~Je.value):It.luaT_trybinTM(t,Je,Je,t.stack[i],It.TMS.TM_BNOT);break;case tt:var Ze=t.stack[Dt(0,o,l)];t.stack[i].setbvalue(Ze.l_isfalse());break;case H:Qt(t,t.stack[i],t.stack[Dt(0,o,l)]);break;case w:var qe=l.B,We=l.C;t.top=o+We+1,ce(t,We-qe+1);var Qe=o+qe;Et.setobjs2s(t,i,Qe),wt.adjust_top(t,e.top);break;case F:Gt(t,e,l,0);break;case M:Ht(t,Vt(t,o,n,l),Bt(t,o,n,l))!==l.A?e.l_savedpc++:Kt(t,e);break;case Z:Ft(t,Vt(t,o,n,l),Bt(t,o,n,l))!==l.A?e.l_savedpc++:Kt(t,e);break;case j:jt(t,Vt(t,o,n,l),Bt(t,o,n,l))!==l.A?e.l_savedpc++:Kt(t,e);break;case _t:(l.C?t.stack[i].l_isfalse():!t.stack[i].l_isfalse())?e.l_savedpc++:Kt(t,e);break;case pt:var $e=Dt(0,o,l),tr=t.stack[$e];(l.C?tr.l_isfalse():!tr.l_isfalse())?e.l_savedpc++:(Et.setobjs2s(t,i,$e),Kt(t,e));break;case y:var er=l.B,rr=l.C-1;if(0!==er&&wt.adjust_top(t,i+er),!wt.luaD_precall(t,i,rr)){e=t.ci;continue t}rr>=0&&wt.adjust_top(t,e.top);break;case ft:var nr=l.B;if(0!==nr&&wt.adjust_top(t,i+nr),!wt.luaD_precall(t,i,s)){var ar=t.ci,ur=ar.previous,sr=ar.func,or=ar.funcOff,lr=ur.funcOff,ir=ar.l_base+sr.value.p.numparams;r.p.p.length>0&&mt.luaF_close(t,ur.l_base);for(var cr=0;or+cr<ir;cr++)Et.setobjs2s(t,lr+cr,or+cr);ur.l_base=lr+(ar.l_base-or),ur.top=lr+(t.top-or),wt.adjust_top(t,ur.top),ur.l_code=ar.l_code,ur.l_savedpc=ar.l_savedpc,ur.callstatus|=Ut.CIST_TAIL,ur.next=null,e=t.ci=ur,kt(t.top===ur.l_base+t.stack[lr].value.p.maxstacksize);continue t}break;case rt:r.p.p.length>0&&mt.luaF_close(t,o);var fr=wt.luaD_poscall(t,e,i,0!==l.B?l.B-1:t.top-i);if(e.callstatus&Ut.CIST_FRESH)return;e=t.ci,fr&&wt.adjust_top(t,e.top),kt(e.callstatus&Ut.CIST_LUA),kt(e.l_code[e.l_savedpc-1].opcode===y);continue t;case C:if(t.stack[i].ttisinteger()){var _r=t.stack[i+2].value,pr=t.stack[i].value+_r|0,vr=t.stack[i+1].value;(0<_r?pr<=vr:vr<=pr)&&(e.l_savedpc+=l.sBx,t.stack[i].chgivalue(pr),t.stack[i+3].setivalue(pr))}else{var hr=t.stack[i+2].value,Lr=t.stack[i].value+hr,dr=t.stack[i+1].value;(0<hr?Lr<=dr:dr<=Lr)&&(e.l_savedpc+=l.sBx,t.stack[i].chgfltvalue(Lr),t.stack[i+3].setfltvalue(Lr))}break;case D:var Ar=t.stack[i],gr=t.stack[i+1],Tr=t.stack[i+2],xr=void 0;if(Ar.ttisinteger()&&Tr.ttisinteger()&&(xr=Xt(gr,Tr.value))){var br=xr.stopnow?0:Ar.value;gr.value=xr.ilimit,Ar.value=br-Tr.value|0}else{var kr,Or,Er;!1===(kr=Jt(gr))&&Pt.luaG_runerror(t,g(\"'for' limit must be a number\",!0)),t.stack[i+1].setfltvalue(kr),!1===(Or=Jt(Tr))&&Pt.luaG_runerror(t,g(\"'for' step must be a number\",!0)),t.stack[i+2].setfltvalue(Or),!1===(Er=Jt(Ar))&&Pt.luaG_runerror(t,g(\"'for' initial value must be a number\",!0)),t.stack[i].setfltvalue(Er-Or)}e.l_savedpc+=l.sBx;break;case vt:var mr=i+3;Et.setobjs2s(t,mr+2,i+2),Et.setobjs2s(t,mr+1,i+1),Et.setobjs2s(t,mr,i),wt.adjust_top(t,mr+3),wt.luaD_call(t,mr,l.C),wt.adjust_top(t,e.top),l=e.l_code[e.l_savedpc++],i=Ct(0,o,l),kt(l.opcode===ht);case ht:t.stack[i+1].ttisnil()||(Et.setobjs2s(t,i,i+1),e.l_savedpc+=l.sBx);break;case at:var Ur=l.B,Nr=l.C;0===Ur&&(Ur=t.top-i-1),0===Nr&&(kt(e.l_code[e.l_savedpc].opcode===P),Nr=e.l_code[e.l_savedpc++].Ax);for(var Rr=t.stack[i].value,yr=(Nr-1)*k+Ur;Ur>0;Ur--)Mt.luaH_setint(Rr,yr--,t.stack[i+Ur]);wt.adjust_top(t,e.top);break;case S:var Sr=r.p.p[l.Bx],wr=ne(Sr,r.upvals,t.stack,o);null===wr?ae(t,Sr,r.upvals,o,i):t.stack[i].setclLvalue(wr);break;case dt:var Ir=l.B-1,Mr=o-e.funcOff-r.p.numparams-1,Pr=void 0;for(Mr<0&&(Mr=0),Ir<0&&(Ir=Mr,wt.luaD_checkstack(t,Mr),wt.adjust_top(t,i+Mr)),Pr=0;Pr<Ir&&Pr<Mr;Pr++)Et.setobjs2s(t,i+Pr,o-Mr+Pr);for(;Pr<Ir;Pr++)t.stack[i+Pr].setnilvalue();break;case P:throw Error(\"invalid opcode\")}}},t.exports.luaV_finishOp=function(t){var e=t.ci,r=e.l_base,n=e.l_code[e.l_savedpc-1],a=n.opcode;switch(a){case E:case ct:case Q:case I:case K:case m:case N:case R:case lt:case it:case q:case et:case Lt:case U:case H:case B:case V:case nt:Et.setobjs2s(t,r+n.A,t.top-1),delete t.stack[--t.top];break;case j:case Z:case M:var u=!t.stack[t.top-1].l_isfalse();delete t.stack[--t.top],e.callstatus&Ut.CIST_LEQ&&(kt(a===j),e.callstatus^=Ut.CIST_LEQ,u=!u),kt(e.l_code[e.l_savedpc].opcode===F),u!==!!n.A&&e.l_savedpc++;break;case w:var s=t.top-1,o=s-1-(r+n.B);Et.setobjs2s(t,s-2,s),o>1&&(t.top=s-1,ce(t,o)),Et.setobjs2s(t,e.l_base+n.A,t.top-1),wt.adjust_top(t,e.top);break;case vt:kt(e.l_code[e.l_savedpc].opcode===ht),wt.adjust_top(t,e.top);break;case y:n.C-1>=0&&wt.adjust_top(t,e.top)}},t.exports.luaV_imul=$t,t.exports.luaV_lessequal=jt,t.exports.luaV_lessthan=Ft,t.exports.luaV_mod=ee,t.exports.luaV_objlen=Qt,t.exports.luaV_rawequalobj=function(t,e){return Ht(null,t,e)},t.exports.luaV_shiftl=re,t.exports.luaV_tointeger=zt,t.exports.settable=_e,t.exports.tointeger=Yt,t.exports.tonumber=Jt},function(t,e,r){\"use strict\";var n=[96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,124,124,124,124,124,124,96,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23],a=function(t,e){return~(-1<<t)<<e},u=function(t,e){return~a(t,e)},s=function(t,e,r,n){return t.code=t.code&u(n,r)|e<<r&a(n,r),l(t)},o=function(t,e){return s(t,e,14,18)},l=function(t){if(\"number\"==typeof t)return{code:t,opcode:t>>0&a(6,0),A:t>>6&a(8,0),B:t>>23&a(9,0),C:t>>14&a(9,0),Bx:t>>14&a(18,0),Ax:t>>6&a(26,0),sBx:(t>>14&a(18,0))-131071};var e=t.code;return t.opcode=e>>0&a(6,0),t.A=e>>6&a(8,0),t.B=e>>23&a(9,0),t.C=e>>14&a(9,0),t.Bx=e>>14&a(18,0),t.Ax=e>>6&a(26,0),t.sBx=(e>>14&a(18,0))-131071,t};t.exports.BITRK=256,t.exports.CREATE_ABC=function(t,e,r,n){return l(t<<0|e<<6|r<<23|n<<14)},t.exports.CREATE_ABx=function(t,e,r){return l(t<<0|e<<6|r<<14)},t.exports.CREATE_Ax=function(t,e){return l(t<<0|e<<6)},t.exports.GET_OPCODE=function(t){return t.opcode},t.exports.GETARG_A=function(t){return t.A},t.exports.GETARG_B=function(t){return t.B},t.exports.GETARG_C=function(t){return t.C},t.exports.GETARG_Bx=function(t){return t.Bx},t.exports.GETARG_Ax=function(t){return t.Ax},t.exports.GETARG_sBx=function(t){return t.sBx},t.exports.INDEXK=function(t){return-257&t},t.exports.ISK=function(t){return 256&t},t.exports.LFIELDS_PER_FLUSH=50,t.exports.MAXARG_A=255,t.exports.MAXARG_Ax=67108863,t.exports.MAXARG_B=511,t.exports.MAXARG_Bx=262143,t.exports.MAXARG_C=511,t.exports.MAXARG_sBx=131071,t.exports.MAXINDEXRK=255,t.exports.NO_REG=255,t.exports.OpArgK=3,t.exports.OpArgN=0,t.exports.OpArgR=2,t.exports.OpArgU=1,t.exports.OpCodes=[\"MOVE\",\"LOADK\",\"LOADKX\",\"LOADBOOL\",\"LOADNIL\",\"GETUPVAL\",\"GETTABUP\",\"GETTABLE\",\"SETTABUP\",\"SETUPVAL\",\"SETTABLE\",\"NEWTABLE\",\"SELF\",\"ADD\",\"SUB\",\"MUL\",\"MOD\",\"POW\",\"DIV\",\"IDIV\",\"BAND\",\"BOR\",\"BXOR\",\"SHL\",\"SHR\",\"UNM\",\"BNOT\",\"NOT\",\"LEN\",\"CONCAT\",\"JMP\",\"EQ\",\"LT\",\"LE\",\"TEST\",\"TESTSET\",\"CALL\",\"TAILCALL\",\"RETURN\",\"FORLOOP\",\"FORPREP\",\"TFORCALL\",\"TFORLOOP\",\"SETLIST\",\"CLOSURE\",\"VARARG\",\"EXTRAARG\"],t.exports.OpCodesI={OP_MOVE:0,OP_LOADK:1,OP_LOADKX:2,OP_LOADBOOL:3,OP_LOADNIL:4,OP_GETUPVAL:5,OP_GETTABUP:6,OP_GETTABLE:7,OP_SETTABUP:8,OP_SETUPVAL:9,OP_SETTABLE:10,OP_NEWTABLE:11,OP_SELF:12,OP_ADD:13,OP_SUB:14,OP_MUL:15,OP_MOD:16,OP_POW:17,OP_DIV:18,OP_IDIV:19,OP_BAND:20,OP_BOR:21,OP_BXOR:22,OP_SHL:23,OP_SHR:24,OP_UNM:25,OP_BNOT:26,OP_NOT:27,OP_LEN:28,OP_CONCAT:29,OP_JMP:30,OP_EQ:31,OP_LT:32,OP_LE:33,OP_TEST:34,OP_TESTSET:35,OP_CALL:36,OP_TAILCALL:37,OP_RETURN:38,OP_FORLOOP:39,OP_FORPREP:40,OP_TFORCALL:41,OP_TFORLOOP:42,OP_SETLIST:43,OP_CLOSURE:44,OP_VARARG:45,OP_EXTRAARG:46},t.exports.POS_A=6,t.exports.POS_Ax=6,t.exports.POS_B=23,t.exports.POS_Bx=14,t.exports.POS_C=14,t.exports.POS_OP=0,t.exports.RKASK=function(t){return 256|t},t.exports.SETARG_A=function(t,e){return s(t,e,6,8)},t.exports.SETARG_Ax=function(t,e){return s(t,e,6,26)},t.exports.SETARG_B=function(t,e){return s(t,e,23,9)},t.exports.SETARG_Bx=o,t.exports.SETARG_C=function(t,e){return s(t,e,14,9)},t.exports.SETARG_sBx=function(t,e){return o(t,e+131071)},t.exports.SET_OPCODE=function(t,e){return t.code=t.code&u(6,0)|e<<0&a(6,0),l(t)},t.exports.SIZE_A=8,t.exports.SIZE_Ax=26,t.exports.SIZE_B=9,t.exports.SIZE_Bx=18,t.exports.SIZE_C=9,t.exports.SIZE_OP=6,t.exports.fullins=l,t.exports.getBMode=function(t){return n[t]>>4&3},t.exports.getCMode=function(t){return n[t]>>2&3},t.exports.getOpMode=function(t){return 3&n[t]},t.exports.iABC=0,t.exports.iABx=1,t.exports.iAsBx=2,t.exports.iAx=3,t.exports.testAMode=function(t){return 64&n[t]},t.exports.testTMode=function(t){return 128&n[t]}},function(t,e,r){\"use strict\";var n=r(2),a=\"_\"+n.LUA_VERSION_MAJOR+\"_\"+n.LUA_VERSION_MINOR;t.exports.LUA_VERSUFFIX=a,t.exports.lua_assert=function(t){},t.exports.luaopen_base=r(24).luaopen_base;t.exports.LUA_COLIBNAME=\"coroutine\",t.exports.luaopen_coroutine=r(25).luaopen_coroutine;t.exports.LUA_TABLIBNAME=\"table\",t.exports.luaopen_table=r(26).luaopen_table;t.exports.LUA_OSLIBNAME=\"os\",t.exports.luaopen_os=r(27).luaopen_os;t.exports.LUA_STRLIBNAME=\"string\",t.exports.luaopen_string=r(28).luaopen_string;t.exports.LUA_UTF8LIBNAME=\"utf8\",t.exports.luaopen_utf8=r(29).luaopen_utf8;t.exports.LUA_BITLIBNAME=\"bit32\";t.exports.LUA_MATHLIBNAME=\"math\",t.exports.luaopen_math=r(30).luaopen_math;t.exports.LUA_DBLIBNAME=\"debug\",t.exports.luaopen_debug=r(31).luaopen_debug;t.exports.LUA_LOADLIBNAME=\"package\",t.exports.luaopen_package=r(32).luaopen_package;t.exports.LUA_FENGARILIBNAME=\"fengari\",t.exports.luaopen_fengari=r(33).luaopen_fengari;var u=r(39);t.exports.luaL_openlibs=u.luaL_openlibs},function(t,e,r){\"use strict\";function n(t){return(n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}var a=r(0),u=a.lua,s=a.lauxlib,o=a.lualib,l=a.to_luastring,i=u.LUA_MULTRET,c=u.LUA_OK,f=u.LUA_REGISTRYINDEX,_=u.LUA_RIDX_MAINTHREAD,p=u.LUA_TBOOLEAN,v=u.LUA_TFUNCTION,h=u.LUA_TLIGHTUSERDATA,L=u.LUA_TNIL,d=u.LUA_TNONE,A=u.LUA_TNUMBER,g=u.LUA_TSTRING,T=u.LUA_TTABLE,x=u.LUA_TTHREAD,b=u.LUA_TUSERDATA,k=u.lua_atnativeerror,O=u.lua_call,E=u.lua_getfield,m=u.lua_gettable,U=u.lua_gettop,N=u.lua_isnil,R=u.lua_isproxy,y=u.lua_newuserdata,S=u.lua_pcall,w=u.lua_pop,I=u.lua_pushboolean,M=u.lua_pushcfunction,P=u.lua_pushinteger,C=u.lua_pushlightuserdata,D=u.lua_pushliteral,V=u.lua_pushnil,B=u.lua_pushnumber,G=u.lua_pushstring,K=u.lua_pushvalue,F=u.lua_rawgeti,j=u.lua_rawgetp,H=u.lua_rawsetp,X=u.lua_rotate,z=u.lua_setfield,Y=u.lua_settable,J=u.lua_settop,Z=u.lua_toboolean,q=u.lua_tojsstring,W=u.lua_tonumber,Q=u.lua_toproxy,$=u.lua_tothread,tt=u.lua_touserdata,et=u.lua_type,rt=s.luaL_argerror,nt=s.luaL_checkany,at=s.luaL_checkoption,ut=s.luaL_checkstack,st=s.luaL_checkudata,ot=s.luaL_error,lt=s.luaL_getmetafield,it=s.luaL_newlib,ct=s.luaL_newmetatable,ft=s.luaL_requiref,_t=s.luaL_setfuncs,pt=s.luaL_setmetatable,vt=s.luaL_testudata,ht=s.luaL_tolstring,Lt=o.luaopen_base;var dt,At,gt,Tt=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:(0,eval)(\"this\");if(\"undefined\"!=typeof Reflect)dt=Reflect.apply,At=Reflect.construct,gt=Reflect.deleteProperty;else{var xt=Function.apply,bt=Function.bind;dt=function(t,e,r){return xt.call(t,e,r)},At=function(t,e){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(bt.apply(t,r))},gt=Function(\"t\",\"k\",\"delete t[k]\")}var kt=String.prototype.concat.bind(\"\"),Ot=function(t){return\"object\"===n(t)?null!==t:\"function\"==typeof t},Et=l(\"js object\"),mt=function(t,e){var r=vt(t,e,Et);return r?r.data:void 0},Ut=function(t,e){return st(t,e,Et).data},Nt=function(t,e){y(t).data=e,pt(t,Et)},Rt=function(t){F(t,f,_);var e=$(t,-1);return w(t,1),e},yt=new WeakMap,St=function(t,e){switch(n(e)){case\"undefined\":V(t);break;case\"number\":B(t,e);break;case\"string\":G(t,l(e));break;case\"boolean\":I(t,e);break;case\"symbol\":C(t,e);break;case\"function\":if(R(e,t)){e(t);break}case\"object\":if(null===e){if(j(t,f,null)!==b)throw Error(\"js library not loaded into lua_State\");break}default:var r=yt.get(Rt(t));if(!r)throw Error(\"js library not loaded into lua_State\");var a=r.get(e);a?a(t):(Nt(t,e),a=Q(t,-1),r.set(e,a))}},wt=function(t){var e=tt(t,1);return St(t,e),1},It=function(t,e){switch(et(t,e)){case d:case L:return;case p:return Z(t,e);case h:return tt(t,e);case A:return W(t,e);case g:return q(t,e);case b:var r=mt(t,e);if(void 0!==r)return r;case T:case v:case x:default:return jt(t,Q(t,e))}},Mt=function(t,e){var r=S(t,e,1,0),n=It(t,-1);switch(w(t,1),r){case c:return n;default:throw n}},Pt=function(t,e,r,n,a){if(!Ot(n))throw new TypeError(\"`args` argument must be an object\");var u=+n.length;u>=0||(u=0),ut(t,2+u,null);var s=U(t);e(t),St(t,r);for(var o=0;o<u;o++)St(t,n[o]);switch(S(t,1+u,a,0)){case c:for(var l=U(t)-s,i=new Array(l),f=0;f<l;f++)i[f]=It(t,s+f+1);return J(t,s),i;default:var _=It(t,-1);throw J(t,s),_}},Ct=function(t){return m(t,1),1},Dt=function(t,e,r){return ut(t,3,null),M(t,Ct),e(t),St(t,r),Mt(t,2)},Vt=function(t,e,r){switch(ut(t,3,null),M(t,Ct),e(t),St(t,r),S(t,2,1,0)){case c:var n=N(t,-1);return w(t,1),!n;default:var a=It(t,-1);throw w(t,1),a}},Bt=function(t,e,r,n){switch(ut(t,4,null),M(t,function(t){return Y(t,1),0}),e(t),St(t,r),St(t,n),S(t,3,0,0)){case c:return;default:var a=It(t,-1);throw w(t,1),a}},Gt=function(t,e,r){switch(ut(t,4,null),M(t,function(t){return Y(t,1),0}),e(t),St(t,r),V(t),S(t,3,0,0)){case c:return;default:var n=It(t,-1);throw w(t,1),n}},Kt=function(t,e){return ut(t,2,null),M(t,function(t){return ht(t,1),1}),e(t),Mt(t,1)},Ft=function(){var t=this.L;ut(t,3,null);var e=U(t);switch(this.iter(t),this.state(t),this.last(t),S(t,2,i,0)){case c:var r;if(this.last=Q(t,e+1),N(t,-1))r={done:!0,value:void 0};else{for(var n=U(t)-e,a=new Array(n),u=0;u<n;u++)a[u]=It(t,e+u+1);r={done:!1,value:a}}return J(t,e),r;default:var s=It(t,-1);throw w(t,1),s}},jt=function(t,e){var r=Rt(t),n=function(){return Pt(r,e,this,arguments,1)[0]};n.apply=function(t,n){return Pt(r,e,t,n,1)[0]},n.invoke=function(t,n){return Pt(r,e,t,n,i)},n.get=function(t){return Dt(r,e,t)},n.has=function(t){return Vt(r,e,t)},n.set=function(t,n){return Bt(r,e,t,n)},n.delete=function(t){return Gt(r,e,t)},n.toString=function(){return Kt(r,e)},\"function\"==typeof Symbol&&(n[Symbol.toStringTag]=\"Fengari object\",n[Symbol.iterator]=function(){return function(t,e){switch(ut(t,1,null),M(t,function(t){return ft(t,l(\"_G\"),Lt,0),E(t,-1,l(\"pairs\")),e(t),O(t,1,3),3}),S(t,0,3,0)){case c:var r=Q(t,-3),n=Q(t,-2),a=Q(t,-1);return w(t,3),{L:t,iter:r,state:n,last:a,next:Ft};default:var u=It(t,-1);throw w(t,1),u}}(r,e)},Symbol.toPrimitive&&(n[Symbol.toPrimitive]=function(t){if(\"string\"===t)return Kt(r,e)}));var a=yt.get(r);if(!a)throw Error(\"js library not loaded into lua_State\");return a.set(n,e),n},Ht={new:function(t){for(var e=It(t,1),r=U(t)-1,n=new Array(r),a=0;a<r;a++)n[a]=It(t,a+2);return St(t,At(e,n)),1},tonumber:function(t){var e=It(t,1);return B(t,+e),1},tostring:function(t){var e=It(t,1);return D(t,kt(e)),1},instanceof:function(t){var e=It(t,1),r=It(t,2);return I(t,e instanceof r),1},typeof:function t(e){var r=It(e,1);return D(e,t(r)),1}};if(\"function\"==typeof Symbol&&Symbol.iterator){var Xt=function(t){var e=It(t,1).next();return e.done?0:(St(t,e.value),1)};Ht.of=function(t){var e=function(t,e){var r=Ut(t,e),n=r[Symbol.iterator];n||rt(t,e,l(\"object not iterable\"));var a=dt(n,r,[]);return Ot(a)||rt(t,e,l(\"Result of the Symbol.iterator method is not an object\")),a}(t,1);return M(t,Xt),St(t,e),2}}if(\"function\"==typeof Proxy&&\"function\"==typeof Symbol){var zt=Symbol(\"lua_State\"),Yt=Symbol(\"fengari-proxy\"),Jt={apply:function(t,e,r){return Pt(t[zt],t[Yt],e,r,1)[0]},construct:function(t,e){var r=t[zt],n=t[Yt],a=e.length;ut(r,2+a,null),n(r);var u=U(r);if(lt(r,u,l(\"construct\"))===L)throw w(r,1),new TypeError(\"not a constructor\");X(r,u,1);for(var s=0;s<a;s++)St(r,e[s]);return Mt(r,1+a)},defineProperty:function(t,e,r){var n=t[zt],a=t[Yt];return ut(n,4,null),a(n),lt(n,-1,l(\"defineProperty\"))===L?(w(n,1),!1):(X(n,-2,1),St(n,e),St(n,r),Mt(n,3))},deleteProperty:function(t,e){return Gt(t[zt],t[Yt],e)},get:function(t,e){return Dt(t[zt],t[Yt],e)},getOwnPropertyDescriptor:function(t,e){var r=t[zt],n=t[Yt];if(ut(r,3,null),n(r),lt(r,-1,l(\"getOwnPropertyDescriptor\"))!==L)return X(r,-2,1),St(r,e),Mt(r,2);w(r,1)},getPrototypeOf:function(t){var e=t[zt],r=t[Yt];return ut(e,2,null),r(e),lt(e,-1,l(\"getPrototypeOf\"))===L?(w(e,1),null):(X(e,-2,1),Mt(e,1))},has:function(t,e){return Vt(t[zt],t[Yt],e)},ownKeys:function(t){var e=t[zt],r=t[Yt];if(ut(e,2,null),r(e),lt(e,-1,l(\"ownKeys\"))===L)throw w(e,1),Error(\"ownKeys unknown for fengari object\");return X(e,-2,1),Mt(e,1)},set:function(t,e,r){return Bt(t[zt],t[Yt],e,r),!0},setPrototypeOf:function(t,e){var r=t[zt],n=t[Yt];return ut(r,3,null),n(r),lt(r,-1,l(\"setPrototypeOf\"))===L?(w(r,1),!1):(X(r,-2,1),St(r,e),Mt(r,2))}},Zt=Function(\"return ()=>void 0;\"),qt=function(t,e,r){var n,a=Rt(t);switch(r){case\"function\":n=function(){var t=function(){}.bind();return delete t.length,delete t.name,t}();break;case\"arrow_function\":n=function(){var t=Zt();return delete t.length,delete t.name,t}();break;case\"object\":n={};break;default:throw TypeError(\"invalid type to createproxy\")}return n[Yt]=e,n[zt]=a,new Proxy(n,Jt)},Wt=[\"function\",\"arrow_function\",\"object\"],Qt=Wt.map(function(t){return l(t)});Ht.createproxy=function(t){nt(t,1);var e=Wt[at(t,2,Qt[0],Qt)],r=qt(t,Q(t,1),e);return St(t,r),1}}var $t={__index:function(t){var e=Ut(t,1),r=It(t,2);return St(t,e[r]),1},__newindex:function(t){var e=Ut(t,1),r=It(t,2),n=It(t,3);return void 0===n?gt(e,r):e[r]=n,0},__tostring:function(t){var e=Ut(t,1),r=kt(e);return G(t,l(r)),1},__call:function(t){var e,r=Ut(t,1),n=U(t)-1,a=new Array(Math.max(0,n-1));if(n>0&&(e=It(t,2),n-- >0))for(var u=0;u<n;u++)a[u]=It(t,u+3);return St(t,dt(r,e,a)),1},__pairs:function(t){var e,r,n,a,u=Ut(t,1);if(\"function\"!=typeof Symbol||void 0===(e=u[Symbol.for(\"__pairs\")]))r=function(t){if(!(this.index>=this.keys.length)){var e=this.keys[this.index++];return[e,this.object[e]]}},n={object:u,keys:Object.keys(u),index:0};else{var s=dt(e,u,[]);void 0===s&&ot(t,l(\"bad '__pairs' result (object with keys 'iter', 'state', 'first' expected)\")),void 0===(r=s.iter)&&ot(t,l(\"bad '__pairs' result (object.iter is missing)\")),n=s.state,a=s.first}return M(t,function(){var e=It(t,1),n=It(t,2),a=dt(r,e,[n]);if(void 0===a)return 0;Array.isArray(a)||ot(t,l(\"bad iterator result (Array or undefined expected)\")),ut(t,a.length,null);for(var u=0;u<a.length;u++)St(t,a[u]);return a.length}),St(t,n),St(t,a),3},__len:function(t){var e,r,n=Ut(t,1);return r=\"function\"!=typeof Symbol||void 0===(e=n[Symbol.for(\"__len\")])?n.length:dt(e,n,[]),St(t,r),1}};t.exports.FENGARI_INTEROP_VERSION=\"0.1\",t.exports.FENGARI_INTEROP_VERSION_NUM=1,t.exports.FENGARI_INTEROP_RELEASE=\"0.1.2\",t.exports.checkjs=Ut,t.exports.testjs=mt,t.exports.pushjs=Nt,t.exports.push=St,t.exports.tojs=It,t.exports.luaopen_js=function(t){return yt.set(Rt(t),new WeakMap),k(t,wt),it(t,Ht),D(t,\"0.1\"),z(t,-2,l(\"_VERSION\")),P(t,1),z(t,-2,l(\"_VERSION_NUM\")),D(t,\"0.1.2\"),z(t,-2,l(\"_RELEASE\")),ct(t,Et),_t(t,$t,0),w(t,1),Nt(t,null),K(t,-1),H(t,f,null),z(t,-2,l(\"null\")),St(t,Tt),z(t,-2,l(\"global\")),1}},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_MULTRET,u=n.LUA_OPBNOT,s=n.LUA_OPEQ,o=n.LUA_OPLE,l=n.LUA_OPLT,i=n.LUA_OPUNM,c=n.LUA_REGISTRYINDEX,f=n.LUA_RIDX_GLOBALS,_=n.LUA_VERSION_NUM,p=n.constant_types,v=p.LUA_NUMTAGS,h=p.LUA_TBOOLEAN,L=p.LUA_TCCL,d=p.LUA_TFUNCTION,A=p.LUA_TLCF,g=p.LUA_TLCL,T=p.LUA_TLIGHTUSERDATA,x=p.LUA_TLNGSTR,b=p.LUA_TNIL,k=p.LUA_TNONE,O=p.LUA_TNUMFLT,E=p.LUA_TNUMINT,m=p.LUA_TSHRSTR,U=p.LUA_TTABLE,N=p.LUA_TTHREAD,R=p.LUA_TUSERDATA,y=n.thread_status.LUA_OK,S=n.from_userstring,w=n.to_luastring,I=r(4).api_check,M=r(11),P=r(8),C=r(37).luaU_dump,D=r(13),V=r(6),B=r(12),G=r(10),K=G.luaS_bless,F=G.luaS_new,j=G.luaS_newliteral,H=r(14),X=r(3).LUAI_MAXSTACK,z=r(15),Y=r(9),J=r(20).ZIO,Z=V.TValue,q=V.CClosure,W=function(t){t.top++,I(t,t.top<=t.ci.top,\"stack overflow\")},Q=function(t,e){I(t,e<t.top-t.ci.funcOff,\"not enough elements in the stack\")},$=function(t){if(!t)throw TypeError(\"invalid argument\")},tt=function(t){$(\"number\"==typeof t&&(0|t)===t)},et=function(t){return t!==V.luaO_nilobject},rt=function(t,e){var r=t.ci;if(e>0){var n=r.funcOff+e;return I(t,e<=r.top-(r.funcOff+1),\"unacceptable index\"),n>=t.top?V.luaO_nilobject:t.stack[n]}return e>c?(I(t,0!==e&&-e<=t.top,\"invalid index\"),t.stack[t.top+e]):e===c?t.l_G.l_registry:(I(t,(e=c-e)<=D.MAXUPVAL+1,\"upvalue index too large\"),r.func.ttislcf()?V.luaO_nilobject:e<=r.func.value.nupvalues?r.func.value.upvalue[e-1]:V.luaO_nilobject)},nt=function(t,e){var r=t.ci;if(e>0){var n=r.funcOff+e;return I(t,e<=r.top-(r.funcOff+1),\"unacceptable index\"),n>=t.top?null:n}if(e>c)return I(t,0!==e&&-e<=t.top,\"invalid index\"),t.top+e;throw Error(\"attempt to use pseudo-index\")},at=function(t,e){var r,n=t.ci.funcOff;e>=0?(I(t,e<=t.stack_last-(n+1),\"new top too large\"),r=n+1+e):(I(t,-(e+1)<=t.top-(n+1),\"invalid new top\"),r=t.top+e+1),P.adjust_top(t,r)},ut=function(t,e){at(t,-e-1)},st=function(t,e,r){for(;e<r;e++,r--){var n=t.stack[e],a=new Z(n.type,n.value);V.setobjs2s(t,e,r),V.setobj2s(t,r,a)}},ot=function(t,e,r){var n=t.top-1,a=nt(t,e),u=t.stack[a];I(t,et(u)&&e>c,\"index not in the stack\"),I(t,(r>=0?r:-r)<=n-a+1,\"invalid 'n'\");var s=r>=0?n-r:a-r-1;st(t,a,s),st(t,s+1,t.top-1),st(t,a,t.top-1)},lt=function(t,e,r){var n=rt(t,e);rt(t,r).setfrom(n)},it=function(t,e,r){if($(\"function\"==typeof e),tt(r),0===r)t.stack[t.top]=new Z(A,e);else{Q(t,r),I(t,r<=D.MAXUPVAL,\"upvalue index too large\");for(var n=new q(t,e,r),a=0;a<r;a++)n.upvalue[a].setfrom(t.stack[t.top-r+a]);for(var u=1;u<r;u++)delete t.stack[--t.top];r>0&&--t.top,t.stack[t.top].setclCvalue(n)}W(t)},ct=it,ft=function(t,e){it(t,e,0)},_t=ft,pt=function(t,e,r){var n=F(t,S(r));Q(t,1),V.pushsvalue2s(t,n),I(t,t.top<=t.ci.top,\"stack overflow\"),z.settable(t,e,t.stack[t.top-1],t.stack[t.top-2]),delete t.stack[--t.top],delete t.stack[--t.top]},vt=function(t,e){pt(t,Y.luaH_getint(t.l_G.l_registry.value,f),e)},ht=function(t,e,r){var n=F(t,S(r));return V.pushsvalue2s(t,n),I(t,t.top<=t.ci.top,\"stack overflow\"),z.luaV_gettable(t,e,t.stack[t.top-1],t.top-1),t.stack[t.top-1].ttnov()},Lt=function(t,e,r){var n=rt(t,e);return tt(r),I(t,n.ttistable(),\"table expected\"),V.pushobj2s(t,Y.luaH_getint(n.value,r)),I(t,t.top<=t.ci.top,\"stack overflow\"),t.stack[t.top-1].ttnov()},dt=function(t,e,r){var n=new V.TValue(U,Y.luaH_new(t));t.stack[t.top]=n,W(t)},At=function(t,e,r){switch(tt(r),e.ttype()){case L:var n=e.value;return 1<=r&&r<=n.nupvalues?{name:w(\"\",!0),val:n.upvalue[r-1]}:null;case g:var a=e.value,u=a.p;if(!(1<=r&&r<=u.upvalues.length))return null;var s=u.upvalues[r-1].name;return{name:s?s.getstr():w(\"(*no name)\",!0),val:a.upvals[r-1]};default:return null}},gt=function(t,e){var r=rt(t,e);if(!r.ttisstring()){if(!z.cvt2str(r))return null;V.luaO_tostring(t,r)}return r.svalue()},Tt=gt,xt=function(t,e){return z.tointeger(rt(t,e))},bt=function(t,e){return z.tonumber(rt(t,e))},kt=new WeakMap,Ot=function(t,e){P.luaD_callnoyield(t,e.funcOff,e.nresults)},Et=function(t,e){var r=rt(t,e);return et(r)?r.ttnov():k},mt=w(\"?\"),Ut=function(t,e,r){I(t,r===a||t.ci.top-t.top>=r-e,\"results from function overflow current stack size\")},Nt=function(t,e,r,n,u){I(t,null===u||!(t.ci.callstatus&B.CIST_LUA),\"cannot use continuations inside hooks\"),Q(t,e+1),I(t,t.status===y,\"cannot do calls on non-normal thread\"),Ut(t,e,r);var s=t.top-(e+1);null!==u&&0===t.nny?(t.ci.c_k=u,t.ci.c_ctx=n,P.luaD_call(t,s,r)):P.luaD_callnoyield(t,s,r),r===a&&t.ci.top<t.top&&(t.ci.top=t.top)},Rt=function(t,e,r,n,u,s){var o,l;I(t,null===s||!(t.ci.callstatus&B.CIST_LUA),\"cannot use continuations inside hooks\"),Q(t,e+1),I(t,t.status===y,\"cannot do calls on non-normal thread\"),Ut(t,e,r),l=0===n?0:nt(t,n);var i=t.top-(e+1);if(null===s||t.nny>0){var c={funcOff:i,nresults:r};o=P.luaD_pcall(t,Ot,c,i,l)}else{var f=t.ci;f.c_k=s,f.c_ctx=u,f.extra=i,f.c_old_errfunc=t.errfunc,t.errfunc=l,f.callstatus&=~B.CIST_OAH|t.allowhook,f.callstatus|=B.CIST_YPCALL,P.luaD_call(t,i,r),f.callstatus&=~B.CIST_YPCALL,t.errfunc=f.c_old_errfunc,o=y}return r===a&&t.ci.top<t.top&&(t.ci.top=t.top),o},yt=function(t,e,r){var n=rt(t,e);I(t,n.ttisLclosure(),\"Lua function expected\");var a=n.value;return tt(r),I(t,1<=r&&r<=a.p.upvalues.length,\"invalid upvalue index\"),{f:a,i:r-1}};t.exports.api_incr_top=W,t.exports.api_checknelems=Q,t.exports.lua_absindex=function(t,e){return e>0||e<=c?e:t.top-t.ci.funcOff+e},t.exports.lua_arith=function(t,e){e!==i&&e!==u?Q(t,2):(Q(t,1),V.pushobj2s(t,t.stack[t.top-1]),I(t,t.top<=t.ci.top,\"stack overflow\")),V.luaO_arith(t,e,t.stack[t.top-2],t.stack[t.top-1],t.stack[t.top-2]),delete t.stack[--t.top]},t.exports.lua_atpanic=function(t,e){var r=t.l_G.panic;return t.l_G.panic=e,r},t.exports.lua_atnativeerror=function(t,e){var r=t.l_G.atnativeerror;return t.l_G.atnativeerror=e,r},t.exports.lua_call=function(t,e,r){Nt(t,e,r,0,null)},t.exports.lua_callk=Nt,t.exports.lua_checkstack=function(t,e){var r,n=t.ci;I(t,e>=0,\"negative 'n'\"),t.stack_last-t.top>e?r=!0:t.top+B.EXTRA_STACK>X-e?r=!1:(P.luaD_growstack(t,e),r=!0);return r&&n.top<t.top+e&&(n.top=t.top+e),r},t.exports.lua_compare=function(t,e,r,n){var a=rt(t,e),u=rt(t,r),i=0;if(et(a)&&et(u))switch(n){case s:i=z.luaV_equalobj(t,a,u);break;case l:i=z.luaV_lessthan(t,a,u);break;case o:i=z.luaV_lessequal(t,a,u);break;default:I(t,!1,\"invalid option\")}return i},t.exports.lua_concat=function(t,e){Q(t,e),e>=2?z.luaV_concat(t,e):0===e&&(V.pushsvalue2s(t,K(t,w(\"\",!0))),I(t,t.top<=t.ci.top,\"stack overflow\"))},t.exports.lua_copy=lt,t.exports.lua_createtable=dt,t.exports.lua_dump=function(t,e,r,n){Q(t,1);var a=t.stack[t.top-1];return a.ttisLclosure()?C(t,a.value.p,e,r,n):1},t.exports.lua_error=function(t){Q(t,1),M.luaG_errormsg(t)},t.exports.lua_gc=function(){},t.exports.lua_getallocf=function(){return console.warn(\"lua_getallocf is not available\"),0},t.exports.lua_getextraspace=function(){return console.warn(\"lua_getextraspace is not available\"),0},t.exports.lua_getfield=function(t,e,r){return ht(t,rt(t,e),r)},t.exports.lua_getglobal=function(t,e){return ht(t,Y.luaH_getint(t.l_G.l_registry.value,f),e)},t.exports.lua_geti=function(t,e,r){var n=rt(t,e);return tt(r),t.stack[t.top]=new Z(E,r),W(t),z.luaV_gettable(t,n,t.stack[t.top-1],t.top-1),t.stack[t.top-1].ttnov()},t.exports.lua_getmetatable=function(t,e){var r,n=rt(t,e),a=!1;switch(n.ttnov()){case U:case R:r=n.value.metatable;break;default:r=t.l_G.mt[n.ttnov()]}return null!==r&&void 0!==r&&(t.stack[t.top]=new Z(U,r),W(t),a=!0),a},t.exports.lua_gettable=function(t,e){var r=rt(t,e);return z.luaV_gettable(t,r,t.stack[t.top-1],t.top-1),t.stack[t.top-1].ttnov()},t.exports.lua_gettop=function(t){return t.top-(t.ci.funcOff+1)},t.exports.lua_getupvalue=function(t,e,r){var n=At(0,rt(t,e),r);if(n){var a=n.name,u=n.val;return V.pushobj2s(t,u),I(t,t.top<=t.ci.top,\"stack overflow\"),a}return null},t.exports.lua_getuservalue=function(t,e){var r=rt(t,e);I(t,r.ttisfulluserdata(),\"full userdata expected\");var n=r.value.uservalue;return t.stack[t.top]=new Z(n.type,n.value),W(t),t.stack[t.top-1].ttnov()},t.exports.lua_insert=function(t,e){ot(t,e,1)},t.exports.lua_isboolean=function(t,e){return Et(t,e)===h},t.exports.lua_iscfunction=function(t,e){var r=rt(t,e);return r.ttislcf(r)||r.ttisCclosure()},t.exports.lua_isfunction=function(t,e){return Et(t,e)===d},t.exports.lua_isinteger=function(t,e){return rt(t,e).ttisinteger()},t.exports.lua_islightuserdata=function(t,e){return Et(t,e)===T},t.exports.lua_isnil=function(t,e){return Et(t,e)===b},t.exports.lua_isnone=function(t,e){return Et(t,e)===k},t.exports.lua_isnoneornil=function(t,e){return Et(t,e)<=0},t.exports.lua_isnumber=function(t,e){return!1!==z.tonumber(rt(t,e))},t.exports.lua_isproxy=function(t,e){var r=kt.get(t);return!!r&&(null===e||e.l_G===r)},t.exports.lua_isstring=function(t,e){var r=rt(t,e);return r.ttisstring()||z.cvt2str(r)},t.exports.lua_istable=function(t,e){return rt(t,e).ttistable()},t.exports.lua_isthread=function(t,e){return Et(t,e)===N},t.exports.lua_isuserdata=function(t,e){var r=rt(t,e);return r.ttisfulluserdata(r)||r.ttislightuserdata()},t.exports.lua_len=function(t,e){var r=rt(t,e),n=new Z;z.luaV_objlen(t,n,r),t.stack[t.top]=n,W(t)},t.exports.lua_load=function(t,e,r,n,a){n=n?S(n):mt,null!==a&&(a=S(a));var u=new J(t,e,r),s=P.luaD_protectedparser(t,u,n,a);if(s===y){var o=t.stack[t.top-1].value;if(o.nupvalues>=1){var l=Y.luaH_getint(t.l_G.l_registry.value,f);o.upvals[0].setfrom(l)}}return s},t.exports.lua_newtable=function(t){dt(t)},t.exports.lua_newuserdata=function(t,e){var r=function(t,e){return new V.Udata(t,e)}(t,e);return t.stack[t.top]=new V.TValue(R,r),W(t),r.data},t.exports.lua_next=function(t,e){var r=rt(t,e);return I(t,r.ttistable(),\"table expected\"),t.stack[t.top]=new Z,Y.luaH_next(t,r.value,t.top-1)?(W(t),1):(delete t.stack[t.top],delete t.stack[--t.top],0)},t.exports.lua_pcall=function(t,e,r,n){return Rt(t,e,r,n,0,null)},t.exports.lua_pcallk=Rt,t.exports.lua_pop=ut,t.exports.lua_pushboolean=function(t,e){t.stack[t.top]=new Z(h,!!e),W(t)},t.exports.lua_pushcclosure=it,t.exports.lua_pushcfunction=ft,t.exports.lua_pushfstring=function(t,e){e=S(e);for(var r=arguments.length,n=new Array(r>2?r-2:0),a=2;a<r;a++)n[a-2]=arguments[a];return V.luaO_pushvfstring(t,e,n)},t.exports.lua_pushglobaltable=function(t){Lt(t,c,f)},t.exports.lua_pushinteger=function(t,e){tt(e),t.stack[t.top]=new Z(E,e),W(t)},t.exports.lua_pushjsclosure=ct,t.exports.lua_pushjsfunction=_t,t.exports.lua_pushlightuserdata=function(t,e){t.stack[t.top]=new Z(T,e),W(t)},t.exports.lua_pushliteral=function(t,e){if(void 0===e||null===e)t.stack[t.top]=new Z(b,null),t.top++;else{$(\"string\"==typeof e);var r=j(t,e);V.pushsvalue2s(t,r),e=r.getstr()}return I(t,t.top<=t.ci.top,\"stack overflow\"),e},t.exports.lua_pushlstring=function(t,e,r){var n;return tt(r),0===r?(e=w(\"\",!0),n=K(t,e)):(e=S(e),I(t,e.length>=r,\"invalid length to lua_pushlstring\"),n=F(t,e.subarray(0,r))),V.pushsvalue2s(t,n),I(t,t.top<=t.ci.top,\"stack overflow\"),n.value},t.exports.lua_pushnil=function(t){t.stack[t.top]=new Z(b,null),W(t)},t.exports.lua_pushnumber=function(t,e){$(\"number\"==typeof e),t.stack[t.top]=new Z(O,e),W(t)},t.exports.lua_pushstring=function(t,e){if(void 0===e||null===e)t.stack[t.top]=new Z(b,null),t.top++;else{var r=F(t,S(e));V.pushsvalue2s(t,r),e=r.getstr()}return I(t,t.top<=t.ci.top,\"stack overflow\"),e},t.exports.lua_pushthread=function(t){return t.stack[t.top]=new Z(N,t),W(t),t.l_G.mainthread===t},t.exports.lua_pushvalue=function(t,e){V.pushobj2s(t,rt(t,e)),I(t,t.top<=t.ci.top,\"stack overflow\")},t.exports.lua_pushvfstring=function(t,e,r){return e=S(e),V.luaO_pushvfstring(t,e,r)},t.exports.lua_rawequal=function(t,e,r){var n=rt(t,e),a=rt(t,r);return et(n)&&et(a)?z.luaV_equalobj(null,n,a):0},t.exports.lua_rawget=function(t,e){var r=rt(t,e);return I(t,r.ttistable(r),\"table expected\"),V.setobj2s(t,t.top-1,Y.luaH_get(t,r.value,t.stack[t.top-1])),t.stack[t.top-1].ttnov()},t.exports.lua_rawgeti=Lt,t.exports.lua_rawgetp=function(t,e,r){var n=rt(t,e);I(t,n.ttistable(),\"table expected\");var a=new Z(T,r);return V.pushobj2s(t,Y.luaH_get(t,n.value,a)),I(t,t.top<=t.ci.top,\"stack overflow\"),t.stack[t.top-1].ttnov()},t.exports.lua_rawlen=function(t,e){var r=rt(t,e);switch(r.ttype()){case m:case x:return r.vslen();case R:return r.value.len;case U:return Y.luaH_getn(r.value);default:return 0}},t.exports.lua_rawset=function(t,e){Q(t,2);var r=rt(t,e);I(t,r.ttistable(),\"table expected\");var n=t.stack[t.top-2],a=t.stack[t.top-1];Y.luaH_setfrom(t,r.value,n,a),Y.invalidateTMcache(r.value),delete t.stack[--t.top],delete t.stack[--t.top]},t.exports.lua_rawseti=function(t,e,r){tt(r),Q(t,1);var n=rt(t,e);I(t,n.ttistable(),\"table expected\"),Y.luaH_setint(n.value,r,t.stack[t.top-1]),delete t.stack[--t.top]},t.exports.lua_rawsetp=function(t,e,r){Q(t,1);var n=rt(t,e);I(t,n.ttistable(),\"table expected\");var a=new Z(T,r),u=t.stack[t.top-1];Y.luaH_setfrom(t,n.value,a,u),delete t.stack[--t.top]},t.exports.lua_register=function(t,e,r){ft(t,r),vt(t,e)},t.exports.lua_remove=function(t,e){ot(t,e,-1),ut(t,1)},t.exports.lua_replace=function(t,e){lt(t,-1,e),ut(t,1)},t.exports.lua_rotate=ot,t.exports.lua_setallocf=function(){return console.warn(\"lua_setallocf is not available\"),0},t.exports.lua_setfield=function(t,e,r){pt(t,rt(t,e),r)},t.exports.lua_setglobal=vt,t.exports.lua_seti=function(t,e,r){tt(r),Q(t,1);var n=rt(t,e);t.stack[t.top]=new Z(E,r),W(t),z.settable(t,n,t.stack[t.top-1],t.stack[t.top-2]),delete t.stack[--t.top],delete t.stack[--t.top]},t.exports.lua_setmetatable=function(t,e){var r;Q(t,1);var n=rt(t,e);switch(t.stack[t.top-1].ttisnil()?r=null:(I(t,t.stack[t.top-1].ttistable(),\"table expected\"),r=t.stack[t.top-1].value),n.ttnov()){case R:case U:n.value.metatable=r;break;default:t.l_G.mt[n.ttnov()]=r}return delete t.stack[--t.top],!0},t.exports.lua_settable=function(t,e){Q(t,2);var r=rt(t,e);z.settable(t,r,t.stack[t.top-2],t.stack[t.top-1]),delete t.stack[--t.top],delete t.stack[--t.top]},t.exports.lua_settop=at,t.exports.lua_setupvalue=function(t,e,r){var n=rt(t,e);Q(t,1);var a=At(0,n,r);if(a){var u=a.name;return a.val.setfrom(t.stack[t.top-1]),delete t.stack[--t.top],u}return null},t.exports.lua_setuservalue=function(t,e){Q(t,1);var r=rt(t,e);I(t,r.ttisfulluserdata(),\"full userdata expected\"),r.value.uservalue.setfrom(t.stack[t.top-1]),delete t.stack[--t.top]},t.exports.lua_status=function(t){return t.status},t.exports.lua_stringtonumber=function(t,e){var r=new Z,n=V.luaO_str2num(e,r);return 0!==n&&(t.stack[t.top]=r,W(t)),n},t.exports.lua_toboolean=function(t,e){return!rt(t,e).l_isfalse()},t.exports.lua_tocfunction=function(t,e){var r=rt(t,e);return r.ttislcf()||r.ttisCclosure()?r.value:null},t.exports.lua_todataview=function(t,e){var r=gt(t,e);return new DataView(r.buffer,r.byteOffset,r.byteLength)},t.exports.lua_tointeger=function(t,e){var r=xt(t,e);return!1===r?0:r},t.exports.lua_tointegerx=xt,t.exports.lua_tojsstring=function(t,e){var r=rt(t,e);if(!r.ttisstring()){if(!z.cvt2str(r))return null;V.luaO_tostring(t,r)}return r.jsstring()},t.exports.lua_tolstring=gt,t.exports.lua_tonumber=function(t,e){var r=bt(t,e);return!1===r?0:r},t.exports.lua_tonumberx=bt,t.exports.lua_topointer=function(t,e){var r=rt(t,e);switch(r.ttype()){case U:case g:case L:case A:case N:case R:case T:return r.value;default:return null}},t.exports.lua_toproxy=function(t,e){var r=rt(t,e);return function(t,e,r){var n=function(n){I(n,n instanceof B.lua_State&&t===n.l_G,\"must be from same global state\"),n.stack[n.top]=new Z(e,r),W(n)};return kt.set(n,t),n}(t.l_G,r.type,r.value)},t.exports.lua_tostring=Tt,t.exports.lua_tothread=function(t,e){var r=rt(t,e);return r.ttisthread()?r.value:null},t.exports.lua_touserdata=function(t,e){var r=rt(t,e);switch(r.ttnov()){case R:return r.value.data;case T:return r.value;default:return null}},t.exports.lua_type=Et,t.exports.lua_typename=function(t,e){return I(t,k<=e&&e<v,\"invalid tag\"),H.ttypename(e)},t.exports.lua_upvalueid=function(t,e,r){var n=rt(t,e);switch(n.ttype()){case g:var a=yt(t,e,r);return a.f.upvals[a.i];case L:var u=n.value;return I(t,(0|r)===r&&r>0&&r<=u.nupvalues,\"invalid upvalue index\"),u.upvalue[r-1];default:return I(t,!1,\"closure expected\"),null}},t.exports.lua_upvaluejoin=function(t,e,r,n,a){var u=yt(t,e,r),s=yt(t,n,a),o=s.f.upvals[s.i];u.f.upvals[u.i]=o},t.exports.lua_version=function(t){return null===t?_:t.l_G.version},t.exports.lua_xmove=function(t,e,r){if(t!==e){Q(t,r),I(t,t.l_G===e.l_G,\"moving among independent states\"),I(t,e.ci.top-e.top>=r,\"stack overflow\"),t.top-=r;for(var n=0;n<r;n++)e.stack[e.top]=new V.TValue,V.setobj2s(e,e.top,t.stack[t.top+n]),delete t.stack[t.top+n],e.top++}}},function(t,e,r){\"use strict\";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var u=r(4).lua_assert,s=function(){function t(e,r,n){a(this,t),this.L=e,u(\"function\"==typeof r,\"ZIO requires a reader\"),this.reader=r,this.data=n,this.n=0,this.buffer=null,this.off=0}return function(t,e,r){e&&n(t.prototype,e),r&&n(t,r)}(t,[{key:\"zgetc\",value:function(){return this.n-- >0?this.buffer[this.off++]:o(this)}}]),t}(),o=function(t){var e=t.reader(t.L,t.data);if(null===e)return-1;u(e instanceof Uint8Array,\"Should only load binary of array of bytes\");var r=e.length;return 0===r?-1:(t.buffer=e,t.off=0,t.n=r-1,t.buffer[t.off++])};t.exports.EOZ=-1,t.exports.luaZ_buffer=function(t){return t.buffer.subarray(0,t.n)},t.exports.luaZ_buffremove=function(t,e){t.n-=e},t.exports.luaZ_fill=o,t.exports.luaZ_read=function(t,e,r,n){for(;n;){if(0===t.n){if(-1===o(t))return n;t.n++,t.off--}for(var a=n<=t.n?n:t.n,u=0;u<a;u++)e[r++]=t.buffer[t.off++];t.n-=a,0===t.n&&(t.buffer=null),n-=a}return 0},t.exports.luaZ_resetbuffer=function(t){t.n=0},t.exports.luaZ_resizebuffer=function(t,e,r){var n=new Uint8Array(r);e.buffer&&n.set(e.buffer),e.buffer=n},t.exports.MBuffer=function t(){a(this,t),this.buffer=null,this.n=0},t.exports.ZIO=s},function(t,e,r){\"use strict\";function n(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var a=r(1),u=a.constant_types,s=u.LUA_TBOOLEAN,o=u.LUA_TLNGSTR,l=a.thread_status.LUA_ERRSYNTAX,i=a.to_luastring,c=r(4),f=c.LUA_MINBUFFER,_=c.MAX_INT,p=c.lua_assert,v=r(11),h=r(8),L=r(22),d=L.lisdigit,A=L.lislalnum,g=L.lislalpha,T=L.lisspace,x=L.lisxdigit,b=r(6),k=r(10),O=k.luaS_bless,E=k.luaS_hash,m=k.luaS_hashlongstr,U=k.luaS_new,N=r(9),R=r(20),y=R.EOZ,S=R.luaZ_buffer,w=R.luaZ_buffremove,I=R.luaZ_resetbuffer,M=R.luaZ_resizebuffer,P=i(\"_ENV\",!0),C={TK_AND:257,TK_BREAK:258,TK_DO:259,TK_ELSE:260,TK_ELSEIF:261,TK_END:262,TK_FALSE:263,TK_FOR:264,TK_FUNCTION:265,TK_GOTO:266,TK_IF:267,TK_IN:268,TK_LOCAL:269,TK_NIL:270,TK_NOT:271,TK_OR:272,TK_REPEAT:273,TK_RETURN:274,TK_THEN:275,TK_TRUE:276,TK_UNTIL:277,TK_WHILE:278,TK_IDIV:279,TK_CONCAT:280,TK_DOTS:281,TK_EQ:282,TK_GE:283,TK_LE:284,TK_NE:285,TK_SHL:286,TK_SHR:287,TK_DBCOLON:288,TK_EOS:289,TK_FLT:290,TK_INT:291,TK_NAME:292,TK_STRING:293},D=[\"and\",\"break\",\"do\",\"else\",\"elseif\",\"end\",\"false\",\"for\",\"function\",\"goto\",\"if\",\"in\",\"local\",\"nil\",\"not\",\"or\",\"repeat\",\"return\",\"then\",\"true\",\"until\",\"while\",\"//\",\"..\",\"...\",\"==\",\">=\",\"<=\",\"~=\",\"<<\",\">>\",\"::\",\"<eof>\",\"<number>\",\"<integer>\",\"<name>\",\"<string>\"].map(function(t,e){return i(t)}),V=function t(){n(this,t),this.r=NaN,this.i=NaN,this.ts=null},B=function t(){n(this,t),this.token=NaN,this.seminfo=new V},G=function(t,e){var r=t.buff;if(r.n+1>r.buffer.length){r.buffer.length>=_/2&&W(t,i(\"lexical element too long\",!0),0);var n=2*r.buffer.length;M(t.L,r,n)}r.buffer[r.n++]=e<0?255+e+1:e},K=function(t,e){if(e<257)return b.luaO_pushfstring(t.L,i(\"'%c'\",!0),e);var r=D[e-257];return e<289?b.luaO_pushfstring(t.L,i(\"'%s'\",!0),r):r},F=function(t){return 10===t.current||13===t.current},j=function(t){t.current=t.z.zgetc()},H=function(t){G(t,t.current),j(t)},X=new b.TValue(s,!0),z=function(t,e){var r=t.L,n=U(r,e),a=t.h.strong.get(m(n));if(a)n=a.key.tsvalue();else{var u=new b.TValue(o,n);N.luaH_setfrom(r,t.h,u,X)}return n},Y=function(t){var e=t.current;p(F(t)),j(t),F(t)&&t.current!==e&&j(t),++t.linenumber>=_&&W(t,i(\"chunk has too many lines\",!0),0)},J=function(t,e){return t.current===e&&(j(t),!0)},Z=function(t,e){return(t.current===e[0].charCodeAt(0)||t.current===e[1].charCodeAt(0))&&(H(t),!0)},q=function(t,e){var r=\"Ee\",n=t.current;for(p(d(t.current)),H(t),48===n&&Z(t,\"xX\")&&(r=\"Pp\");;)if(Z(t,r)&&Z(t,\"-+\"),x(t.current))H(t);else{if(46!==t.current)break;H(t)}var a=new b.TValue;return 0===b.luaO_str2num(S(t.buff),a)&&W(t,i(\"malformed number\",!0),290),a.ttisinteger()?(e.i=a.value,291):(p(a.ttisfloat()),e.r=a.value,290)},W=function(t,e,r){e=v.luaG_addinfo(t.L,e,t.source,t.linenumber),r&&b.luaO_pushfstring(t.L,i(\"%s near %s\"),e,function(t,e){switch(e){case 292:case 293:case 290:case 291:return b.luaO_pushfstring(t.L,i(\"'%s'\",!0),S(t.buff));default:return K(t,e)}}(t,r)),h.luaD_throw(t.L,l)},Q=function(t){var e=0,r=t.current;for(p(91===r||93===r),H(t);61===t.current;)H(t),e++;return t.current===r?e:-e-1},$=function(t,e,r){var n=t.linenumber;H(t),F(t)&&Y(t);for(var a=!1;!a;)switch(t.current){case y:var u=\"unfinished long \".concat(e?\"string\":\"comment\",\" (starting at line \").concat(n,\")\");W(t,i(u),289);break;case 93:Q(t)===r&&(H(t),a=!0);break;case 10:case 13:G(t,10),Y(t),e||I(t.buff);break;default:e?H(t):j(t)}e&&(e.ts=z(t,t.buff.buffer.subarray(2+r,t.buff.n-(2+r))))},tt=function(t,e,r){e||(t.current!==y&&H(t),W(t,r,293))},et=function(t){return H(t),tt(t,x(t.current),i(\"hexadecimal digit expected\",!0)),b.luaO_hexavalue(t.current)},rt=function(t){var e=et(t);return e=(e<<4)+et(t),w(t.buff,2),e},nt=function(t){for(var e=new Uint8Array(b.UTF8BUFFSZ),r=b.luaO_utf8esc(e,function(t){var e=4;H(t),tt(t,123===t.current,i(\"missing '{'\",!0));var r=et(t);for(H(t);x(t.current);)e++,r=(r<<4)+b.luaO_hexavalue(t.current),tt(t,r<=1114111,i(\"UTF-8 value too large\",!0)),H(t);return tt(t,125===t.current,i(\"missing '}'\",!0)),j(t),w(t.buff,e),r}(t));r>0;r--)G(t,e[b.UTF8BUFFSZ-r])},at=function(t){var e,r=0;for(e=0;e<3&&d(t.current);e++)r=10*r+t.current-48,H(t);return tt(t,r<=255,i(\"decimal escape too large\",!0)),w(t.buff,e),r},ut=function(t,e,r){for(H(t);t.current!==e;)switch(t.current){case y:W(t,i(\"unfinished string\",!0),289);break;case 10:case 13:W(t,i(\"unfinished string\",!0),293);break;case 92:H(t);var n=void 0,a=void 0;switch(t.current){case 97:a=7,n=\"read_save\";break;case 98:a=8,n=\"read_save\";break;case 102:a=12,n=\"read_save\";break;case 110:a=10,n=\"read_save\";break;case 114:a=13,n=\"read_save\";break;case 116:a=9,n=\"read_save\";break;case 118:a=11,n=\"read_save\";break;case 120:a=rt(t),n=\"read_save\";break;case 117:nt(t),n=\"no_save\";break;case 10:case 13:Y(t),a=10,n=\"only_save\";break;case 92:case 34:case 39:a=t.current,n=\"read_save\";break;case y:n=\"no_save\";break;case 122:for(w(t.buff,1),j(t);T(t.current);)F(t)?Y(t):j(t);n=\"no_save\";break;default:tt(t,d(t.current),i(\"invalid escape sequence\",!0)),a=at(t),n=\"only_save\"}\"read_save\"===n&&j(t),\"read_save\"!==n&&\"only_save\"!==n||(w(t.buff,1),G(t,a));break;default:H(t)}H(t),r.ts=z(t,t.buff.buffer.subarray(1,t.buff.n-1))},st=Object.create(null);D.forEach(function(t,e){return st[E(t)]=e});var ot=function(t,e){for(I(t.buff);;)switch(p(\"number\"==typeof t.current),t.current){case 10:case 13:Y(t);break;case 32:case 12:case 9:case 11:j(t);break;case 45:if(j(t),45!==t.current)return 45;if(j(t),91===t.current){var r=Q(t);if(I(t.buff),r>=0){$(t,null,r),I(t.buff);break}}for(;!F(t)&&t.current!==y;)j(t);break;case 91:var n=Q(t);return n>=0?($(t,e,n),293):(-1!==n&&W(t,i(\"invalid long string delimiter\",!0),293),91);case 61:return j(t),J(t,61)?282:61;case 60:return j(t),J(t,61)?284:J(t,60)?286:60;case 62:return j(t),J(t,61)?283:J(t,62)?287:62;case 47:return j(t),J(t,47)?279:47;case 126:return j(t),J(t,61)?285:126;case 58:return j(t),J(t,58)?288:58;case 34:case 39:return ut(t,t.current,e),293;case 46:return H(t),J(t,46)?J(t,46)?281:280:d(t.current)?q(t,e):46;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return q(t,e);case y:return 289;default:if(g(t.current)){do{H(t)}while(A(t.current));var a=z(t,S(t.buff));e.ts=a;var u=st[m(a)];return void 0!==u&&u<=22?u+257:292}var s=t.current;return j(t),s}};t.exports.FIRST_RESERVED=257,t.exports.LUA_ENV=P,t.exports.LexState=function t(){n(this,t),this.current=NaN,this.linenumber=NaN,this.lastline=NaN,this.t=new B,this.lookahead=new B,this.fs=null,this.L=null,this.z=null,this.buff=null,this.h=null,this.dyd=null,this.source=null,this.envn=null},t.exports.RESERVED=C,t.exports.isreserved=function(t){var e=st[m(t)];return void 0!==e&&e<=22},t.exports.luaX_lookahead=function(t){return p(289===t.lookahead.token),t.lookahead.token=ot(t,t.lookahead.seminfo),t.lookahead.token},t.exports.luaX_newstring=z,t.exports.luaX_next=function(t){t.lastline=t.linenumber,289!==t.lookahead.token?(t.t.token=t.lookahead.token,t.t.seminfo.i=t.lookahead.seminfo.i,t.t.seminfo.r=t.lookahead.seminfo.r,t.t.seminfo.ts=t.lookahead.seminfo.ts,t.lookahead.token=289):t.t.token=ot(t,t.t.seminfo)},t.exports.luaX_setinput=function(t,e,r,n,a){e.t={token:0,seminfo:new V},e.L=t,e.current=a,e.lookahead={token:289,seminfo:new V},e.z=r,e.fs=null,e.linenumber=1,e.lastline=1,e.source=n,e.envn=O(t,P),M(t,e.buff,f)},t.exports.luaX_syntaxerror=function(t,e){W(t,e,t.t.token)},t.exports.luaX_token2str=K,t.exports.luaX_tokens=D},function(t,e,r){\"use strict\";var n=(0,r(1).luastring_of)(0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);t.exports.lisdigit=function(t){return 0!=(2&n[t+1])},t.exports.lislalnum=function(t){return 0!=(3&n[t+1])},t.exports.lislalpha=function(t){return 0!=(1&n[t+1])},t.exports.lisprint=function(t){return 0!=(4&n[t+1])},t.exports.lisspace=function(t){return 0!=(8&n[t+1])},t.exports.lisxdigit=function(t){return 0!=(16&n[t+1])}},function(t,e,r){\"use strict\";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var u=r(1),s=u.LUA_MULTRET,o=u.to_luastring,l=r(35),i=l.BinOpr,c=i.OPR_ADD,f=i.OPR_AND,_=i.OPR_BAND,p=i.OPR_BOR,v=i.OPR_BXOR,h=i.OPR_CONCAT,L=i.OPR_DIV,d=i.OPR_EQ,A=i.OPR_GE,g=i.OPR_GT,T=i.OPR_IDIV,x=i.OPR_LE,b=i.OPR_LT,k=i.OPR_MOD,O=i.OPR_MUL,E=i.OPR_NE,m=i.OPR_NOBINOPR,U=i.OPR_OR,N=i.OPR_POW,R=i.OPR_SHL,y=i.OPR_SHR,S=i.OPR_SUB,w=l.UnOpr,I=w.OPR_BNOT,M=w.OPR_LEN,P=w.OPR_MINUS,C=w.OPR_NOT,D=w.OPR_NOUNOPR,V=l.NO_JUMP,B=l.getinstruction,G=l.luaK_checkstack,K=l.luaK_codeABC,F=l.luaK_codeABx,j=l.luaK_codeAsBx,H=l.luaK_codek,X=l.luaK_concat,z=l.luaK_dischargevars,Y=l.luaK_exp2RK,J=l.luaK_exp2anyreg,Z=l.luaK_exp2anyregup,q=l.luaK_exp2nextreg,W=l.luaK_exp2val,Q=l.luaK_fixline,$=l.luaK_getlabel,tt=l.luaK_goiffalse,et=l.luaK_goiftrue,rt=l.luaK_indexed,nt=l.luaK_infix,at=l.luaK_intK,ut=l.luaK_jump,st=l.luaK_jumpto,ot=l.luaK_nil,lt=l.luaK_patchclose,it=l.luaK_patchlist,ct=l.luaK_patchtohere,ft=l.luaK_posfix,_t=l.luaK_prefix,pt=l.luaK_reserveregs,vt=l.luaK_ret,ht=l.luaK_self,Lt=l.luaK_setlist,dt=l.luaK_setmultret,At=l.luaK_setoneret,gt=l.luaK_setreturns,Tt=l.luaK_storevar,xt=l.luaK_stringK,bt=r(8),kt=r(13),Ot=r(21),Et=r(4),mt=Et.LUAI_MAXCCALLS,Ut=Et.MAX_INT,Nt=Et.lua_assert,Rt=r(6),yt=r(16),St=yt.OpCodesI,wt=St.OP_CALL,It=St.OP_CLOSURE,Mt=St.OP_FORLOOP,Pt=St.OP_FORPREP,Ct=St.OP_GETUPVAL,Dt=St.OP_MOVE,Vt=St.OP_NEWTABLE,Bt=St.OP_SETTABLE,Gt=St.OP_TAILCALL,Kt=St.OP_TFORCALL,Ft=St.OP_TFORLOOP,jt=St.OP_VARARG,Ht=yt.LFIELDS_PER_FLUSH,Xt=yt.SETARG_B,zt=yt.SETARG_C,Yt=yt.SET_OPCODE,Jt=r(10),Zt=Jt.luaS_eqlngstr,qt=Jt.luaS_new,Wt=Jt.luaS_newliteral,Qt=r(9),$t=kt.Proto,te=Ot.RESERVED,ee=function(t){return t===ae.VCALL||t===ae.VVARARG},re=function(t,e){return Zt(t,e)},ne=function t(){a(this,t),this.previous=null,this.firstlabel=NaN,this.firstgoto=NaN,this.nactvar=NaN,this.upval=NaN,this.isloop=NaN},ae={VVOID:0,VNIL:1,VTRUE:2,VFALSE:3,VK:4,VKFLT:5,VKINT:6,VNONRELOC:7,VLOCAL:8,VUPVAL:9,VINDEXED:10,VJMP:11,VRELOCABLE:12,VCALL:13,VVARARG:14},ue=function(){function t(){a(this,t),this.k=NaN,this.u={ival:NaN,nval:NaN,info:NaN,ind:{idx:NaN,t:NaN,vt:NaN}},this.t=NaN,this.f=NaN}return function(t,e,r){e&&n(t.prototype,e),r&&n(t,r)}(t,[{key:\"to\",value:function(t){this.k=t.k,this.u=t.u,this.t=t.t,this.f=t.f}}]),t}(),se=function t(){a(this,t),this.f=null,this.prev=null,this.ls=null,this.bl=null,this.pc=NaN,this.lasttarget=NaN,this.jpc=NaN,this.nk=NaN,this.np=NaN,this.firstlocal=NaN,this.nlocvars=NaN,this.nactvar=NaN,this.nups=NaN,this.freereg=NaN},oe=function t(){a(this,t),this.arr=[],this.n=NaN,this.size=NaN},le=function(t,e){t.t.token=0,Ot.luaX_syntaxerror(t,e)},ie=function(t,e){Ot.luaX_syntaxerror(t,Rt.luaO_pushfstring(t.L,o(\"%s expected\",!0),Ot.luaX_token2str(t,e)))},ce=function(t,e,r,n){e>r&&function(t,e,r){var n=t.ls.L,a=t.f.linedefined,u=0===a?o(\"main function\",!0):Rt.luaO_pushfstring(n,o(\"function at line %d\",!0),a),s=Rt.luaO_pushfstring(n,o(\"too many %s (limit is %d) in %s\",!0),r,e,u);Ot.luaX_syntaxerror(t.ls,s)}(t,r,n)},fe=function(t,e){return t.t.token===e&&(Ot.luaX_next(t),!0)},_e=function(t,e){t.t.token!==e&&ie(t,e)},pe=function(t,e){_e(t,e),Ot.luaX_next(t)},ve=function(t,e,r){e||Ot.luaX_syntaxerror(t,r)},he=function(t,e,r,n){fe(t,e)||(n===t.linenumber?ie(t,e):Ot.luaX_syntaxerror(t,Rt.luaO_pushfstring(t.L,o(\"%s expected (to close %s at line %d)\"),Ot.luaX_token2str(t,e),Ot.luaX_token2str(t,r),n)))},Le=function(t){_e(t,te.TK_NAME);var e=t.t.seminfo.ts;return Ot.luaX_next(t),e},de=function(t,e,r){t.f=t.t=V,t.k=e,t.u.info=r},Ae=function(t,e,r){de(e,ae.VK,xt(t.fs,r))},ge=function(t,e){Ae(t,e,Le(t))},Te=function(t,e){var r=t.fs,n=t.dyd,u=function(t,e){var r=t.fs,n=r.f;return n.locvars[r.nlocvars]=new Rt.LocVar,n.locvars[r.nlocvars].varname=e,r.nlocvars++}(t,e);ce(r,n.actvar.n+1-r.firstlocal,200,o(\"local variables\",!0)),n.actvar.arr[n.actvar.n]=new function t(){a(this,t),this.idx=NaN},n.actvar.arr[n.actvar.n].idx=u,n.actvar.n++},xe=function(t,e){Te(t,Ot.luaX_newstring(t,o(e,!0)))},be=function(t,e){var r=t.ls.dyd.actvar.arr[t.firstlocal+e].idx;return Nt(r<t.nlocvars),t.f.locvars[r]},ke=function(t,e){var r=t.fs;for(r.nactvar=r.nactvar+e;e;e--)be(r,r.nactvar-e).startpc=r.pc},Oe=function(t,e,r){var n=t.f;return ce(t,t.nups+1,kt.MAXUPVAL,o(\"upvalues\",!0)),n.upvalues[t.nups]={instack:r.k===ae.VLOCAL,idx:r.u.info,name:e},t.nups++},Ee=function t(e,r,n,a){if(null===e)de(n,ae.VVOID,0);else{var u=function(t,e){for(var r=t.nactvar-1;r>=0;r--)if(re(e,be(t,r).varname))return r;return-1}(e,r);if(u>=0)de(n,ae.VLOCAL,u),a||function(t,e){for(var r=t.bl;r.nactvar>e;)r=r.previous;r.upval=1}(e,u);else{var s=function(t,e){for(var r=t.f.upvalues,n=0;n<t.nups;n++)if(re(r[n].name,e))return n;return-1}(e,r);if(s<0){if(t(e.prev,r,n,0),n.k===ae.VVOID)return;s=Oe(e,r,n)}de(n,ae.VUPVAL,s)}}},me=function(t,e){var r=Le(t),n=t.fs;if(Ee(n,r,e,1),e.k===ae.VVOID){var a=new ue;Ee(n,t.envn,e,1),Nt(e.k!==ae.VVOID),Ae(t,a,r),rt(n,e,a)}},Ue=function(t,e,r,n){var a=t.fs,u=e-r;if(ee(n.k))++u<0&&(u=0),gt(a,n,u),u>1&&pt(a,u-1);else if(n.k!==ae.VVOID&&q(a,n),u>0){var s=a.freereg;pt(a,u),ot(a,s,u)}r>e&&(t.fs.freereg-=r-e)},Ne=function(t){var e=t.L;++e.nCcalls,ce(t.fs,e.nCcalls,mt,o(\"JS levels\",!0))},Re=function(t){return t.L.nCcalls--},ye=function(t,e,r){var n=t.fs,a=t.dyd.gt,u=a.arr[e];if(Nt(re(u.name,r.name)),u.nactvar<r.nactvar){var s=be(n,u.nactvar).varname,l=Rt.luaO_pushfstring(t.L,o(\"<goto %s> at line %d jumps into the scope of local '%s'\"),u.name.getstr(),u.line,s.getstr());le(t,l)}it(n,u.pc,r.pc);for(var i=e;i<a.n-1;i++)a.arr[i]=a.arr[i+1];a.n--},Se=function(t,e){for(var r=t.fs.bl,n=t.dyd,a=n.gt.arr[e],u=r.firstlabel;u<n.label.n;u++){var s=n.label.arr[u];if(re(s.name,a.name))return a.nactvar>s.nactvar&&(r.upval||n.label.n>r.firstlabel)&&lt(t.fs,a.pc,s.nactvar),ye(t,e,s),!0}return!1},we=function(t,e,r,n,u){var s=e.n;return e.arr[s]=new function t(){a(this,t),this.name=null,this.pc=NaN,this.line=NaN,this.nactvar=NaN},e.arr[s].name=r,e.arr[s].line=n,e.arr[s].nactvar=t.fs.nactvar,e.arr[s].pc=u,e.n=s+1,s},Ie=function(t,e){for(var r=t.dyd.gt,n=t.fs.bl.firstgoto;n<r.n;)re(r.arr[n].name,e.name)?ye(t,n,e):n++},Me=function(t,e,r){e.isloop=r,e.nactvar=t.nactvar,e.firstlabel=t.ls.dyd.label.n,e.firstgoto=t.ls.dyd.gt.n,e.upval=0,e.previous=t.bl,t.bl=e,Nt(t.freereg===t.nactvar)},Pe=function(t,e,r){e.prev=t.fs,e.ls=t,t.fs=e,e.pc=0,e.lasttarget=0,e.jpc=V,e.freereg=0,e.nk=0,e.np=0,e.nups=0,e.nlocvars=0,e.nactvar=0,e.firstlocal=t.dyd.actvar.n,e.bl=null;var n=e.f;n.source=t.source,n.maxstacksize=2,Me(e,r,!1)},Ce=function(t){var e=t.bl,r=t.ls;if(e.previous&&e.upval){var n=ut(t);lt(t,n,e.nactvar),ct(t,n)}e.isloop&&function(t){var e=Wt(t.L,\"break\"),r=we(t,t.dyd.label,e,0,t.fs.pc);Ie(t,t.dyd.label.arr[r])}(r),t.bl=e.previous,function(t,e){for(t.ls.dyd.actvar.n-=t.nactvar-e;t.nactvar>e;)be(t,--t.nactvar).endpc=t.pc}(t,e.nactvar),Nt(e.nactvar===t.nactvar),t.freereg=t.nactvar,r.dyd.label.n=e.firstlabel,e.previous?function(t,e){for(var r=e.firstgoto,n=t.ls.dyd.gt;r<n.n;){var a=n.arr[r];a.nactvar>e.nactvar&&(e.upval&&lt(t,a.pc,e.nactvar),a.nactvar=e.nactvar),Se(t.ls,r)||r++}}(t,e):e.firstgoto<r.dyd.gt.n&&function(t,e){var r=Ot.isreserved(e.name)?\"<%s> at line %d not inside a loop\":\"no visible label '%s' for <goto> at line %d\";r=Rt.luaO_pushfstring(t.L,o(r),e.name.getstr(),e.line),le(t,r)}(r,r.dyd.gt.arr[e.firstgoto])},De=function(t){var e=t.fs;vt(e,0,0),Ce(e),Nt(null===e.bl),t.fs=e.prev},Ve=function(t,e){switch(t.t.token){case te.TK_ELSE:case te.TK_ELSEIF:case te.TK_END:case te.TK_EOS:return!0;case te.TK_UNTIL:return e;default:return!1}},Be=function(t){for(;!Ve(t,1);){if(t.t.token===te.TK_RETURN)return void fr(t);fr(t)}},Ge=function(t,e){var r=t.fs,n=new ue;Z(r,e),Ot.luaX_next(t),ge(t,n),rt(r,e,n)},Ke=function(t,e){Ot.luaX_next(t),$e(t,e),W(t.fs,e),pe(t,93)},Fe=function(t,e){var r=t.fs,n=t.fs.freereg,a=new ue,u=new ue;t.t.token===te.TK_NAME?(ce(r,e.nh,Ut,o(\"items in a constructor\",!0)),ge(t,a)):Ke(t,a),e.nh++,pe(t,61);var s=Y(r,a);$e(t,u),K(r,Bt,e.t.u.info,s,Y(r,u)),r.freereg=n},je=function(t,e){e.v.k!==ae.VVOID&&(q(t,e.v),e.v.k=ae.VVOID,e.tostore===Ht&&(Lt(t,e.t.u.info,e.na,e.tostore),e.tostore=0))},He=function(t,e){$e(t,e.v),ce(t.fs,e.na,Ut,o(\"items in a constructor\",!0)),e.na++,e.tostore++},Xe=function(t,e){switch(t.t.token){case te.TK_NAME:61!==Ot.luaX_lookahead(t)?He(t,e):Fe(t,e);break;case 91:Fe(t,e);break;default:He(t,e)}},ze=function(t,e){var r=t.fs,n=t.linenumber,u=K(r,Vt,0,0,0),o=new function t(){a(this,t),this.v=new ue,this.t=new ue,this.nh=NaN,this.na=NaN,this.tostore=NaN};o.na=o.nh=o.tostore=0,o.t=e,de(e,ae.VRELOCABLE,u),de(o.v,ae.VVOID,0),q(t.fs,e),pe(t,123);do{if(Nt(o.v.k===ae.VVOID||o.tostore>0),125===t.t.token)break;je(r,o),Xe(t,o)}while(fe(t,44)||fe(t,59));he(t,125,123,n),function(t,e){0!==e.tostore&&(ee(e.v.k)?(dt(t,e.v),Lt(t,e.t.u.info,e.na,s),e.na--):(e.v.k!==ae.VVOID&&q(t,e.v),Lt(t,e.t.u.info,e.na,e.tostore)))}(r,o),Xt(r.f.code[u],Rt.luaO_int2fb(o.na)),zt(r.f.code[u],Rt.luaO_int2fb(o.nh))},Ye=function(t,e,r,n){var a=new se,u=new ne;a.f=function(t){var e=t.L,r=new $t(e),n=t.fs;return n.f.p[n.np++]=r,r}(t),a.f.linedefined=n,Pe(t,a,u),pe(t,40),r&&(xe(t,\"self\"),ke(t,1)),function(t){var e=t.fs,r=e.f,n=0;if(r.is_vararg=!1,41!==t.t.token)do{switch(t.t.token){case te.TK_NAME:Te(t,Le(t)),n++;break;case te.TK_DOTS:Ot.luaX_next(t),r.is_vararg=!0;break;default:Ot.luaX_syntaxerror(t,o(\"<name> or '...' expected\",!0))}}while(!r.is_vararg&&fe(t,44));ke(t,n),r.numparams=e.nactvar,pt(e,e.nactvar)}(t),pe(t,41),Be(t),a.f.lastlinedefined=t.linenumber,he(t,te.TK_END,te.TK_FUNCTION,n),function(t,e){var r=t.fs.prev;de(e,ae.VRELOCABLE,F(r,It,0,r.np-1)),q(r,e)}(t,e),De(t)},Je=function(t,e){var r=1;for($e(t,e);fe(t,44);)q(t.fs,e),$e(t,e),r++;return r},Ze=function(t,e,r){var n,a=t.fs,u=new ue;switch(t.t.token){case 40:Ot.luaX_next(t),41===t.t.token?u.k=ae.VVOID:(Je(t,u),dt(a,u)),he(t,41,40,r);break;case 123:ze(t,u);break;case te.TK_STRING:Ae(t,u,t.t.seminfo.ts),Ot.luaX_next(t);break;default:Ot.luaX_syntaxerror(t,o(\"function arguments expected\",!0))}Nt(e.k===ae.VNONRELOC);var l=e.u.info;ee(u.k)?n=s:(u.k!==ae.VVOID&&q(a,u),n=a.freereg-(l+1)),de(e,ae.VCALL,K(a,wt,l,n+1,2)),Q(a,r),a.freereg=l+1},qe=function(t,e){var r=t.fs,n=t.linenumber;for(!function(t,e){switch(t.t.token){case 40:var r=t.linenumber;return Ot.luaX_next(t),$e(t,e),he(t,41,40,r),void z(t.fs,e);case te.TK_NAME:return void me(t,e);default:Ot.luaX_syntaxerror(t,o(\"unexpected symbol\",!0))}}(t,e);;)switch(t.t.token){case 46:Ge(t,e);break;case 91:var a=new ue;Z(r,e),Ke(t,a),rt(r,e,a);break;case 58:var u=new ue;Ot.luaX_next(t),ge(t,u),ht(r,e,u),Ze(t,e,n);break;case 40:case te.TK_STRING:case 123:q(r,e),Ze(t,e,n);break;default:return}},We=[{left:10,right:10},{left:10,right:10},{left:11,right:11},{left:11,right:11},{left:14,right:13},{left:11,right:11},{left:11,right:11},{left:6,right:6},{left:4,right:4},{left:5,right:5},{left:7,right:7},{left:7,right:7},{left:9,right:8},{left:3,right:3},{left:3,right:3},{left:3,right:3},{left:3,right:3},{left:3,right:3},{left:3,right:3},{left:2,right:2},{left:1,right:1}],Qe=function t(e,r,n){Ne(e);var a=function(t){switch(t){case te.TK_NOT:return C;case 45:return P;case 126:return I;case 35:return M;default:return D}}(e.t.token);if(a!==D){var u=e.linenumber;Ot.luaX_next(e),t(e,r,12),_t(e.fs,a,r,u)}else!function(t,e){switch(t.t.token){case te.TK_FLT:de(e,ae.VKFLT,0),e.u.nval=t.t.seminfo.r;break;case te.TK_INT:de(e,ae.VKINT,0),e.u.ival=t.t.seminfo.i;break;case te.TK_STRING:Ae(t,e,t.t.seminfo.ts);break;case te.TK_NIL:de(e,ae.VNIL,0);break;case te.TK_TRUE:de(e,ae.VTRUE,0);break;case te.TK_FALSE:de(e,ae.VFALSE,0);break;case te.TK_DOTS:var r=t.fs;ve(t,r.f.is_vararg,o(\"cannot use '...' outside a vararg function\",!0)),de(e,ae.VVARARG,K(r,jt,0,1,0));break;case 123:return void ze(t,e);case te.TK_FUNCTION:return Ot.luaX_next(t),void Ye(t,e,0,t.linenumber);default:return void qe(t,e)}Ot.luaX_next(t)}(e,r);for(var s=function(t){switch(t){case 43:return c;case 45:return S;case 42:return O;case 37:return k;case 94:return N;case 47:return L;case te.TK_IDIV:return T;case 38:return _;case 124:return p;case 126:return v;case te.TK_SHL:return R;case te.TK_SHR:return y;case te.TK_CONCAT:return h;case te.TK_NE:return E;case te.TK_EQ:return d;case 60:return b;case te.TK_LE:return x;case 62:return g;case te.TK_GE:return A;case te.TK_AND:return f;case te.TK_OR:return U;default:return m}}(e.t.token);s!==m&&We[s].left>n;){var l=new ue,i=e.linenumber;Ot.luaX_next(e),nt(e.fs,s,r);var w=t(e,l,We[s].right);ft(e.fs,s,r,l,i),s=w}return Re(e),s},$e=function(t,e){Qe(t,e,0)},tr=function(t){var e=t.fs,r=new ne;Me(e,r,0),Be(t),Ce(e)},er=function t(){a(this,t),this.prev=null,this.v=new ue},rr=function t(e,r,n){var a=new ue;if(ve(e,function(t){return ae.VLOCAL<=t&&t<=ae.VINDEXED}(r.v.k),o(\"syntax error\",!0)),fe(e,44)){var u=new er;u.prev=r,qe(e,u.v),u.v.k!==ae.VINDEXED&&function(t,e,r){for(var n=t.fs,a=n.freereg,u=!1;e;e=e.prev)e.v.k===ae.VINDEXED&&(e.v.u.ind.vt===r.k&&e.v.u.ind.t===r.u.info&&(u=!0,e.v.u.ind.vt=ae.VLOCAL,e.v.u.ind.t=a),r.k===ae.VLOCAL&&e.v.u.ind.idx===r.u.info&&(u=!0,e.v.u.ind.idx=a));if(u){var s=r.k===ae.VLOCAL?Dt:Ct;K(n,s,a,r.u.info,0),pt(n,1)}}(e,r,u.v),ce(e.fs,n+e.L.nCcalls,mt,o(\"JS levels\",!0)),t(e,u,n+1)}else{pe(e,61);var s=Je(e,a);if(s===n)return At(e.fs,a),void Tt(e.fs,r.v,a);Ue(e,n,s,a)}de(a,ae.VNONRELOC,e.fs.freereg-1),Tt(e.fs,r.v,a)},nr=function(t){var e=new ue;return $e(t,e),e.k===ae.VNIL&&(e.k=ae.VFALSE),et(t.fs,e),e.f},ar=function(t,e){var r,n=t.linenumber;fe(t,te.TK_GOTO)?r=Le(t):(Ot.luaX_next(t),r=Wt(t.L,\"break\"));var a=we(t,t.dyd.gt,r,n,e);Se(t,a)},ur=function(t,e,r){var n,a=t.fs,u=t.dyd.label;!function(t,e,r){for(var n=t.bl.firstlabel;n<e.n;n++)if(re(r,e.arr[n].name)){var a=Rt.luaO_pushfstring(t.ls.L,o(\"label '%s' already defined on line %d\",!0),r.getstr(),e.arr[n].line);le(t.ls,a)}}(a,u,e),pe(t,te.TK_DBCOLON),n=we(t,u,e,r,$(a)),function(t){for(;59===t.t.token||t.t.token===te.TK_DBCOLON;)fr(t)}(t),Ve(t,0)&&(u.arr[n].nactvar=a.bl.nactvar),Ie(t,u.arr[n])},sr=function(t){var e=new ue;return $e(t,e),q(t.fs,e),Nt(e.k===ae.VNONRELOC),e.u.info},or=function(t,e,r,n,a){var u,s=new ne,o=t.fs;ke(t,3),pe(t,te.TK_DO);var l=a?j(o,Pt,e,V):ut(o);Me(o,s,0),ke(t,n),pt(o,n),tr(t),Ce(o),ct(o,l),a?u=j(o,Mt,e,V):(K(o,Kt,e,0,n),Q(o,r),u=j(o,Ft,e+2,V)),it(o,u,l+1),Q(o,r)},lr=function(t,e){var r=t.fs,n=new ne;Me(r,n,1),Ot.luaX_next(t);var a=Le(t);switch(t.t.token){case 61:!function(t,e,r){var n=t.fs,a=n.freereg;xe(t,\"(for index)\"),xe(t,\"(for limit)\"),xe(t,\"(for step)\"),Te(t,e),pe(t,61),sr(t),pe(t,44),sr(t),fe(t,44)?sr(t):(H(n,n.freereg,at(n,1)),pt(n,1)),or(t,a,r,1,1)}(t,a,e);break;case 44:case te.TK_IN:!function(t,e){var r=t.fs,n=new ue,a=4,u=r.freereg;for(xe(t,\"(for generator)\"),xe(t,\"(for state)\"),xe(t,\"(for control)\"),Te(t,e);fe(t,44);)Te(t,Le(t)),a++;pe(t,te.TK_IN);var s=t.linenumber;Ue(t,3,Je(t,n),n),G(r,3),or(t,u,s,a-3,0)}(t,a);break;default:Ot.luaX_syntaxerror(t,o(\"'=' or 'in' expected\",!0))}he(t,te.TK_END,te.TK_FOR,e),Ce(r)},ir=function(t,e){var r,n=new ne,a=t.fs,u=new ue;if(Ot.luaX_next(t),$e(t,u),pe(t,te.TK_THEN),t.t.token===te.TK_GOTO||t.t.token===te.TK_BREAK){for(tt(t.fs,u),Me(a,n,!1),ar(t,u.t);fe(t,59););if(Ve(t,0))return Ce(a),e;r=ut(a)}else et(t.fs,u),Me(a,n,!1),r=u.f;return Be(t),Ce(a),t.t.token!==te.TK_ELSE&&t.t.token!==te.TK_ELSEIF||(e=X(a,e,ut(a))),ct(a,r),e},cr=function(t,e){var r=new ue,n=new ue;Ot.luaX_next(t);var a=function(t,e){var r=0;for(me(t,e);46===t.t.token;)Ge(t,e);return 58===t.t.token&&(r=1,Ge(t,e)),r}(t,r);Ye(t,n,a,e),Tt(t.fs,r,n),Q(t.fs,e)},fr=function(t){var e=t.linenumber;switch(Ne(t),t.t.token){case 59:Ot.luaX_next(t);break;case te.TK_IF:!function(t,e){var r=t.fs,n=V;for(n=ir(t,n);t.t.token===te.TK_ELSEIF;)n=ir(t,n);fe(t,te.TK_ELSE)&&tr(t),he(t,te.TK_END,te.TK_IF,e),ct(r,n)}(t,e);break;case te.TK_WHILE:!function(t,e){var r=t.fs,n=new ne;Ot.luaX_next(t);var a=$(r),u=nr(t);Me(r,n,1),pe(t,te.TK_DO),tr(t),st(r,a),he(t,te.TK_END,te.TK_WHILE,e),Ce(r),ct(r,u)}(t,e);break;case te.TK_DO:Ot.luaX_next(t),tr(t),he(t,te.TK_END,te.TK_DO,e);break;case te.TK_FOR:lr(t,e);break;case te.TK_REPEAT:!function(t,e){var r=t.fs,n=$(r),a=new ne,u=new ne;Me(r,a,1),Me(r,u,0),Ot.luaX_next(t),Be(t),he(t,te.TK_UNTIL,te.TK_REPEAT,e);var s=nr(t);u.upval&&lt(r,s,u.nactvar),Ce(r),it(r,s,n),Ce(r)}(t,e);break;case te.TK_FUNCTION:cr(t,e);break;case te.TK_LOCAL:Ot.luaX_next(t),fe(t,te.TK_FUNCTION)?function(t){var e=new ue,r=t.fs;Te(t,Le(t)),ke(t,1),Ye(t,e,0,t.linenumber),be(r,e.u.info).startpc=r.pc}(t):function(t){var e,r=0,n=new ue;do{Te(t,Le(t)),r++}while(fe(t,44));fe(t,61)?e=Je(t,n):(n.k=ae.VVOID,e=0),Ue(t,r,e,n),ke(t,r)}(t);break;case te.TK_DBCOLON:Ot.luaX_next(t),ur(t,Le(t),e);break;case te.TK_RETURN:Ot.luaX_next(t),function(t){var e,r,n=t.fs,a=new ue;Ve(t,1)||59===t.t.token?e=r=0:(r=Je(t,a),ee(a.k)?(dt(n,a),a.k===ae.VCALL&&1===r&&(Yt(B(n,a),Gt),Nt(B(n,a).A===n.nactvar)),e=n.nactvar,r=s):1===r?e=J(n,a):(q(n,a),e=n.nactvar,Nt(r===n.freereg-e))),vt(n,e,r),fe(t,59)}(t);break;case te.TK_BREAK:case te.TK_GOTO:ar(t,ut(t.fs));break;default:!function(t){var e=t.fs,r=new er;qe(t,r.v),61===t.t.token||44===t.t.token?(r.prev=null,rr(t,r,1)):(ve(t,r.v.k===ae.VCALL,o(\"syntax error\",!0)),zt(B(e,r.v),1))}(t)}Nt(t.fs.f.maxstacksize>=t.fs.freereg&&t.fs.freereg>=t.fs.nactvar),t.fs.freereg=t.fs.nactvar,Re(t)};t.exports.Dyndata=function t(){a(this,t),this.actvar={arr:[],n:NaN,size:NaN},this.gt=new oe,this.label=new oe},t.exports.expkind=ae,t.exports.expdesc=ue,t.exports.luaY_parser=function(t,e,r,n,a,u){var s=new Ot.LexState,o=new se,l=kt.luaF_newLclosure(t,1);return bt.luaD_inctop(t),t.stack[t.top-1].setclLvalue(l),s.h=Qt.luaH_new(t),bt.luaD_inctop(t),t.stack[t.top-1].sethvalue(s.h),o.f=l.p=new $t(t),o.f.source=qt(t,a),s.buff=r,s.dyd=n,n.actvar.n=n.gt.n=n.label.n=0,Ot.luaX_setinput(t,s,e,o.f.source,u),function(t,e){var r=new ne,n=new ue;Pe(t,e,r),e.f.is_vararg=!0,de(n,ae.VLOCAL,0),Oe(e,t.envn,n),Ot.luaX_next(t),Be(t),_e(t,te.TK_EOS),De(t)}(s,o),Nt(!o.prev&&1===o.nups&&!s.fs),Nt(0===n.actvar.n&&0===n.gt.n&&0===n.label.n),delete t.stack[--t.top],l},t.exports.vkisinreg=function(t){return t===ae.VNONRELOC||t===ae.VLOCAL}},function(t,e,r){\"use strict\";var n,a,u=r(2),s=u.LUA_MULTRET,o=u.LUA_OK,l=u.LUA_TFUNCTION,i=u.LUA_TNIL,c=u.LUA_TNONE,f=u.LUA_TNUMBER,_=u.LUA_TSTRING,p=u.LUA_TTABLE,v=u.LUA_VERSION,h=u.LUA_YIELD,L=u.lua_call,d=u.lua_callk,A=u.lua_concat,g=u.lua_error,T=u.lua_getglobal,x=u.lua_geti,b=u.lua_getmetatable,k=u.lua_gettop,O=u.lua_insert,E=u.lua_isnil,m=u.lua_isnone,U=u.lua_isstring,N=u.lua_load,R=u.lua_next,y=u.lua_pcallk,S=u.lua_pop,w=u.lua_pushboolean,I=u.lua_pushcfunction,M=u.lua_pushglobaltable,P=u.lua_pushinteger,C=u.lua_pushliteral,D=u.lua_pushnil,V=u.lua_pushstring,B=u.lua_pushvalue,G=u.lua_rawequal,K=u.lua_rawget,F=u.lua_rawlen,j=u.lua_rawset,H=u.lua_remove,X=u.lua_replace,z=u.lua_rotate,Y=u.lua_setfield,J=u.lua_setmetatable,Z=u.lua_settop,q=u.lua_setupvalue,W=u.lua_stringtonumber,Q=u.lua_toboolean,$=u.lua_tolstring,tt=u.lua_tostring,et=u.lua_type,rt=u.lua_typename,nt=r(7),at=nt.luaL_argcheck,ut=nt.luaL_checkany,st=nt.luaL_checkinteger,ot=nt.luaL_checkoption,lt=nt.luaL_checkstack,it=nt.luaL_checktype,ct=nt.luaL_error,ft=nt.luaL_getmetafield,_t=nt.luaL_loadbufferx,pt=nt.luaL_loadfile,vt=nt.luaL_loadfilex,ht=nt.luaL_optinteger,Lt=nt.luaL_optstring,dt=nt.luaL_setfuncs,At=nt.luaL_tolstring,gt=nt.luaL_where,Tt=r(5),xt=Tt.to_jsstring,bt=Tt.to_luastring;if(\"function\"==typeof TextDecoder){var kt=\"\",Ot=new TextDecoder(\"utf-8\");n=function(t){kt+=Ot.decode(t,{stream:!0})};var Et=new Uint8Array(0);a=function(){kt+=Ot.decode(Et),console.log(kt),kt=\"\"}}else{var mt=[];n=function(t){try{t=xt(t)}catch(r){var e=new Uint8Array(t.length);e.set(t),t=e}mt.push(t)},a=function(){console.log.apply(console.log,mt),mt=[]}}var Ut=[\"stop\",\"restart\",\"collect\",\"count\",\"step\",\"setpause\",\"setstepmul\",\"isrunning\"].map(function(t){return bt(t)}),Nt=function(t){return it(t,1,p),Z(t,2),R(t,1)?2:(D(t),1)},Rt=function(t){var e=st(t,2)+1;return P(t,e),x(t,1,e)===i?1:2},yt=function(t){var e=ht(t,2,1);return Z(t,1),et(t,1)===_&&e>0&&(gt(t,e),B(t,1),A(t,2)),g(t)},St=function(t,e,r){return e!==o&&e!==h?(w(t,0),B(t,-2),2):k(t)-r},wt=function(t,e,r){return e===o?(0!==r&&(B(t,r),q(t,-2,1)||S(t,1)),1):(D(t),O(t,-2),2)},It=function(t,e){return lt(t,2,\"too many nested functions\"),B(t,1),L(t,0,1),E(t,-1)?(S(t,1),null):(U(t,-1)||ct(t,bt(\"reader function must return a string\")),X(t,5),tt(t,5))},Mt=function(t,e,r){return k(t)-1},Pt={assert:function(t){return Q(t,1)?k(t):(ut(t,1),H(t,1),C(t,\"assertion failed!\"),Z(t,1),yt(t))},collectgarbage:function(t){ot(t,1,\"collect\",Ut),ht(t,2,0),ct(t,bt(\"lua_gc not implemented\"))},dofile:function(t){var e=Lt(t,1,null);return Z(t,1),pt(t,e)!==o?g(t):(d(t,0,s,0,Mt),Mt(t))},error:yt,getmetatable:function(t){return ut(t,1),b(t,1)?(ft(t,1,bt(\"__metatable\",!0)),1):(D(t),1)},ipairs:function(t){return ut(t,1),I(t,Rt),B(t,1),P(t,0),3},load:function(t){var e,r=tt(t,1),n=Lt(t,3,\"bt\"),a=m(t,4)?0:4;if(null!==r){var u=Lt(t,2,r);e=_t(t,r,r.length,u,n)}else{var s=Lt(t,2,\"=(load)\");it(t,1,l),Z(t,5),e=N(t,It,null,s,n)}return wt(t,e,a)},loadfile:function(t){var e=Lt(t,1,null),r=Lt(t,2,null),n=m(t,3)?0:3,a=vt(t,e,r);return wt(t,a,n)},next:Nt,pairs:function(t){return function(t,e,r,n){return ut(t,1),ft(t,1,e)===i?(I(t,n),B(t,1),r?P(t,0):D(t)):(B(t,1),L(t,1,3)),3}(t,bt(\"__pairs\",!0),0,Nt)},pcall:function(t){ut(t,1),w(t,1),O(t,1);var e=y(t,k(t)-2,s,0,0,St);return St(t,e,0)},print:function(t){var e=k(t);T(t,bt(\"tostring\",!0));for(var r=1;r<=e;r++){B(t,-1),B(t,r),L(t,1,1);var u=$(t,-1);if(null===u)return ct(t,bt(\"'tostring' must return a string to 'print'\"));r>1&&n(bt(\"\\t\")),n(u),S(t,1)}return a(),0},rawequal:function(t){return ut(t,1),ut(t,2),w(t,G(t,1,2)),1},rawget:function(t){return it(t,1,p),ut(t,2),Z(t,2),K(t,1),1},rawlen:function(t){var e=et(t,1);return at(t,e===p||e===_,1,\"table or string expected\"),P(t,F(t,1)),1},rawset:function(t){return it(t,1,p),ut(t,2),ut(t,3),Z(t,3),j(t,1),1},select:function(t){var e=k(t);if(et(t,1)===_&&35===tt(t,1)[0])return P(t,e-1),1;var r=st(t,1);return r<0?r=e+r:r>e&&(r=e),at(t,1<=r,1,\"index out of range\"),e-r},setmetatable:function(t){var e=et(t,2);return it(t,1,p),at(t,e===i||e===p,2,\"nil or table expected\"),ft(t,1,bt(\"__metatable\",!0))!==i?ct(t,bt(\"cannot change a protected metatable\")):(Z(t,2),J(t,1),1)},tonumber:function(t){if(et(t,2)<=0){if(ut(t,1),et(t,1)===f)return Z(t,1),1;var e=tt(t,1);if(null!==e&&W(t,e)===e.length+1)return 1}else{var r=st(t,2);it(t,1,_);var n=tt(t,1);at(t,2<=r&&r<=36,2,\"base out of range\");var a=function(t,e){try{t=xt(t)}catch(t){return null}var r=/^[\\t\\v\\f \\n\\r]*([+-]?)0*([0-9A-Za-z]+)[\\t\\v\\f \\n\\r]*$/.exec(t);if(!r)return null;var n=parseInt(r[1]+r[2],e);return isNaN(n)?null:0|n}(n,r);if(null!==a)return P(t,a),1}return D(t),1},tostring:function(t){return ut(t,1),At(t,1),1},type:function(t){var e=et(t,1);return at(t,e!==c,1,\"value expected\"),V(t,rt(t,e)),1},xpcall:function(t){var e=k(t);it(t,2,l),w(t,1),B(t,1),z(t,3,2);var r=y(t,e-2,s,2,2,St);return St(t,r,2)}};t.exports.luaopen_base=function(t){return M(t),dt(t,Pt,0),B(t,-1),Y(t,-2,bt(\"_G\")),C(t,v),Y(t,-2,bt(\"_VERSION\")),1}},function(t,e,r){\"use strict\";var n=r(2),a=n.LUA_OK,u=n.LUA_TFUNCTION,s=n.LUA_TSTRING,o=n.LUA_YIELD,l=n.lua_Debug,i=n.lua_checkstack,c=n.lua_concat,f=n.lua_error,_=n.lua_getstack,p=n.lua_gettop,v=n.lua_insert,h=n.lua_isyieldable,L=n.lua_newthread,d=n.lua_pop,A=n.lua_pushboolean,g=n.lua_pushcclosure,T=n.lua_pushliteral,x=n.lua_pushthread,b=n.lua_pushvalue,k=n.lua_resume,O=n.lua_status,E=n.lua_tothread,m=n.lua_type,U=n.lua_upvalueindex,N=n.lua_xmove,R=n.lua_yield,y=r(7),S=y.luaL_argcheck,w=y.luaL_checktype,I=y.luaL_newlib,M=y.luaL_where,P=function(t){var e=E(t,1);return S(t,e,1,\"thread expected\"),e},C=function(t,e,r){if(!i(e,r))return T(t,\"too many arguments to resume\"),-1;if(O(e)===a&&0===p(e))return T(t,\"cannot resume dead coroutine\"),-1;N(t,e,r);var n=k(e,t,r);if(n===a||n===o){var u=p(e);return i(t,u+1)?(N(e,t,u),u):(d(e,u),T(t,\"too many results to resume\"),-1)}return N(e,t,1),-1},D=function(t){var e=E(t,U(1)),r=C(t,e,p(t));return r<0?(m(t,-1)===s&&(M(t,1),v(t,-2),c(t,2)),f(t)):r},V=function(t){w(t,1,u);var e=L(t);return b(t,1),N(t,e,1),1},B={create:V,isyieldable:function(t){return A(t,h(t)),1},resume:function(t){var e=P(t),r=C(t,e,p(t)-1);return r<0?(A(t,0),v(t,-2),2):(A(t,1),v(t,-(r+1)),r+1)},running:function(t){return A(t,x(t)),2},status:function(t){var e=P(t);if(t===e)T(t,\"running\");else switch(O(e)){case o:T(t,\"suspended\");break;case a:var r=new l;_(e,0,r)>0?T(t,\"normal\"):0===p(e)?T(t,\"dead\"):T(t,\"suspended\");break;default:T(t,\"dead\")}return 1},wrap:function(t){return V(t),g(t,D,1),1},yield:function(t){return R(t,p(t))}};t.exports.luaopen_coroutine=function(t){return I(t,B),1}},function(t,e,r){\"use strict\";var n=r(3).LUA_MAXINTEGER,a=r(2),u=a.LUA_OPEQ,s=a.LUA_OPLT,o=a.LUA_TFUNCTION,l=a.LUA_TNIL,i=a.LUA_TTABLE,c=a.lua_call,f=a.lua_checkstack,_=a.lua_compare,p=a.lua_createtable,v=a.lua_geti,h=a.lua_getmetatable,L=a.lua_gettop,d=a.lua_insert,A=a.lua_isnil,g=a.lua_isnoneornil,T=a.lua_isstring,x=a.lua_pop,b=a.lua_pushinteger,k=a.lua_pushnil,O=a.lua_pushstring,E=a.lua_pushvalue,m=a.lua_rawget,U=a.lua_setfield,N=a.lua_seti,R=a.lua_settop,y=a.lua_toboolean,S=a.lua_type,w=r(7),I=w.luaL_Buffer,M=w.luaL_addlstring,P=w.luaL_addvalue,C=w.luaL_argcheck,D=w.luaL_buffinit,V=w.luaL_checkinteger,B=w.luaL_checktype,G=w.luaL_error,K=w.luaL_len,F=w.luaL_newlib,j=w.luaL_opt,H=w.luaL_optinteger,X=w.luaL_optlstring,z=w.luaL_pushresult,Y=w.luaL_typename,J=r(17),Z=r(5).to_luastring,q=function(t,e,r){return O(t,e),m(t,-r)!==l},W=function(t,e,r){if(S(t,e)!==i){var n=1;!h(t,e)||1&r&&!q(t,Z(\"__index\",!0),++n)||2&r&&!q(t,Z(\"__newindex\",!0),++n)||4&r&&!q(t,Z(\"__len\",!0),++n)?B(t,e,i):x(t,n)}},Q=function(t,e,r){return W(t,e,4|r),K(t,e)},$=function(t,e,r){v(t,1,r),T(t,-1)||G(t,Z(\"invalid value (%s) at index %d in table for 'concat'\"),Y(t,-1),r),P(e)},tt=function(t,e,r){N(t,1,e),N(t,1,r)},et=function(t,e,r){if(A(t,2))return _(t,e,r,s);E(t,2),E(t,e-1),E(t,r-2),c(t,2,1);var n=y(t,-1);return x(t,1),n},rt=function(t,e,r){for(var n=e,a=r-1;;){for(;v(t,1,++n),et(t,-1,-2);)n==r-1&&G(t,Z(\"invalid order function for sorting\")),x(t,1);for(;v(t,1,--a),et(t,-3,-1);)a<n&&G(t,Z(\"invalid order function for sorting\")),x(t,1);if(a<n)return x(t,1),tt(t,r-1,n),n;tt(t,n,a)}},nt=function(t,e,r){var n=Math.floor((e-t)/4),a=r%(2*n)+(t+n);return J.lua_assert(t+n<=a&&a<=e-n),a},at={concat:function(t){var e=Q(t,1,1),r=X(t,2,\"\"),n=r.length,a=H(t,3,1);e=H(t,4,e);var u=new I;for(D(t,u);a<e;a++)$(t,u,a),M(u,r,n);return a===e&&$(t,u,a),z(u),1},insert:function(t){var e,r=Q(t,1,3)+1;switch(L(t)){case 2:e=r;break;case 3:e=V(t,2),C(t,1<=e&&e<=r,2,\"position out of bounds\");for(var n=r;n>e;n--)v(t,1,n-1),N(t,1,n);break;default:return G(t,\"wrong number of arguments to 'insert'\")}return N(t,1,e),0},move:function(t){var e=V(t,2),r=V(t,3),a=V(t,4),s=g(t,5)?1:5;if(W(t,1,1),W(t,s,2),r>=e){C(t,e>0||r<n+e,3,\"too many elements to move\");var o=r-e+1;if(C(t,a<=n-o+1,4,\"destination wrap around\"),a>r||a<=e||1!==s&&1!==_(t,1,s,u))for(var l=0;l<o;l++)v(t,1,e+l),N(t,s,a+l);else for(var i=o-1;i>=0;i--)v(t,1,e+i),N(t,s,a+i)}return E(t,s),1},pack:function(t){var e=L(t);p(t,e,1),d(t,1);for(var r=e;r>=1;r--)N(t,1,r);return b(t,e),U(t,1,Z(\"n\")),1},remove:function(t){var e=Q(t,1,3),r=H(t,2,e);for(r!==e&&C(t,1<=r&&r<=e+1,1,\"position out of bounds\"),v(t,1,r);r<e;r++)v(t,1,r+1),N(t,1,r);return k(t),N(t,1,r),1},sort:function(t){var e=Q(t,1,3);return e>1&&(C(t,e<n,1,\"array too big\"),g(t,2)||B(t,2,o),R(t,2),function t(e,r,n,a){for(;r<n;){if(v(e,1,r),v(e,1,n),et(e,-1,-2)?tt(e,r,n):x(e,2),n-r==1)return;var u=void 0;if(u=n-r<100||0===a?Math.floor((r+n)/2):nt(r,n,a),v(e,1,u),v(e,1,r),et(e,-2,-1)?tt(e,u,r):(x(e,1),v(e,1,n),et(e,-1,-2)?tt(e,u,n):x(e,2)),n-r==2)return;v(e,1,u),E(e,-1),v(e,1,n-1),tt(e,u,n-1);var s=void 0;(u=rt(e,r,n))-r<n-u?(t(e,r,u-1,a),s=u-r,r=u+1):(t(e,u+1,n,a),s=n-u,n=u-1),(n-r)/128>s&&(a=Math.floor(4294967296*Math.random()))}}(t,1,e,0)),0},unpack:function(t){var e=H(t,2,1),r=j(t,V,3,K(t,1));if(e>r)return 0;var n=r-e;if(n>=Number.MAX_SAFE_INTEGER||!f(t,++n))return G(t,Z(\"too many results to unpack\"));for(;e<r;e++)v(t,1,e);return v(t,1,r),n}};t.exports.luaopen_table=function(t){return F(t,at),1}},function(t,e,r){\"use strict\";var n=r(2),a=n.LUA_TNIL,u=n.LUA_TTABLE,s=(n.lua_close,n.lua_createtable),o=n.lua_getfield,l=(n.lua_isboolean,n.lua_isnoneornil),i=n.lua_pop,c=(n.lua_pushboolean,n.lua_pushfstring),f=n.lua_pushinteger,_=(n.lua_pushliteral,n.lua_pushnil,n.lua_pushnumber),p=(n.lua_pushstring,n.lua_setfield),v=n.lua_settop,h=(n.lua_toboolean,n.lua_tointegerx),L=r(7),d=L.luaL_Buffer,A=L.luaL_addchar,g=L.luaL_addstring,T=L.luaL_argerror,x=L.luaL_buffinit,b=L.luaL_checkinteger,k=(L.luaL_checkstring,L.luaL_checktype),O=L.luaL_error,E=(L.luaL_execresult,L.luaL_fileresult,L.luaL_newlib),m=(L.luaL_optinteger,L.luaL_optlstring),U=(L.luaL_optstring,L.luaL_pushresult),N=r(5),R=N.luastring_eq,y=(N.to_jsstring,N.to_luastring),S=y(\"aAbBcCdDeFhHIjklmMnpPrRStTuUwWxXyYzZ%\"),w=function(t,e,r){f(t,r),p(t,-2,y(e,!0))},I=function(t,e,r){w(t,\"sec\",r?e.getUTCSeconds():e.getSeconds()),w(t,\"min\",r?e.getUTCMinutes():e.getMinutes()),w(t,\"hour\",r?e.getUTCHours():e.getHours()),w(t,\"day\",r?e.getUTCDate():e.getDate()),w(t,\"month\",(r?e.getUTCMonth():e.getMonth())+1),w(t,\"year\",r?e.getUTCFullYear():e.getFullYear()),w(t,\"wday\",(r?e.getUTCDay():e.getDay())+1),w(t,\"yday\",Math.floor((e-new Date(e.getFullYear(),0,0))/864e5))},M=Number.MAX_SAFE_INTEGER/2,P=function(t,e,r,n){var u=o(t,-1,y(e,!0)),s=h(t,-1);if(!1===s){if(u!==a)return O(t,y(\"field '%s' is not an integer\"),e);if(r<0)return O(t,y(\"field '%s' missing in date table\"),e);s=r}else{if(!(-M<=s&&s<=M))return O(t,y(\"field '%s' is out-of-bound\"),e);s-=n}return i(t,1),s},C={days:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"].map(function(t){return y(t)}),shortDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"].map(function(t){return y(t)}),months:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"].map(function(t){return y(t)}),shortMonths:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].map(function(t){return y(t)}),AM:y(\"AM\"),PM:y(\"PM\"),am:y(\"am\"),pm:y(\"pm\"),formats:{c:y(\"%a %b %e %H:%M:%S %Y\"),D:y(\"%m/%d/%y\"),F:y(\"%Y-%m-%d\"),R:y(\"%H:%M\"),r:y(\"%I:%M:%S %p\"),T:y(\"%H:%M:%S\"),X:y(\"%T\"),x:y(\"%D\")}},D=function(t,e){var r=t.getDay();\"monday\"===e&&(0===r?r=6:r--);var n=(t-new Date(t.getFullYear(),0,1))/864e5;return Math.floor((n+7-r)/7)},V=function(t,e,r){e<10&&A(t,r),g(t,y(String(e)))},B=function(t,e,r){for(var n=S,a=0,u=1;a<n.length&&u<=e.length-r;a+=u)if(n[a]===\"|\".charCodeAt(0))u++;else if(R(e.subarray(r,r+u),n.subarray(a,a+u)))return u;T(t,1,c(t,y(\"invalid conversion specifier '%%%s'\"),e))},G=function(t,e){return b(t,e)},K={date:function(t){var e=m(t,1,\"%c\"),r=l(t,2)?new Date:new Date(1e3*G(t,2)),n=!1,a=0;if(e[a]===\"!\".charCodeAt(0)&&(n=!0,a++),e[a]===\"*\".charCodeAt(0)&&e[a+1]===\"t\".charCodeAt(0))s(t,0,9),I(t,r,n);else{new Uint8Array(4)[0]=\"%\".charCodeAt(0);var u=new d;x(t,u),function t(e,r,n,a){for(var u=0;u<n.length;)if(37!==n[u])A(r,n[u++]);else{var s=B(e,n,++u);switch(n[u]){case 37:A(r,37);break;case 65:g(r,C.days[a.getDay()]);break;case 66:g(r,C.months[a.getMonth()]);break;case 67:V(r,Math.floor(a.getFullYear()/100),48);break;case 68:t(e,r,C.formats.D,a);break;case 70:t(e,r,C.formats.F,a);break;case 72:V(r,a.getHours(),48);break;case 73:V(r,(a.getHours()+11)%12+1,48);break;case 77:V(r,a.getMinutes(),48);break;case 80:g(r,a.getHours()<12?C.am:C.pm);break;case 82:t(e,r,C.formats.R,a);break;case 83:V(r,a.getSeconds(),48);break;case 84:t(e,r,C.formats.T,a);break;case 85:V(r,D(a,\"sunday\"),48);break;case 87:V(r,D(a,\"monday\"),48);break;case 88:t(e,r,C.formats.X,a);break;case 89:g(r,y(String(a.getFullYear())));break;case 90:var o=a.toString().match(/\\(([\\w\\s]+)\\)/);o&&g(r,y(o[1]));break;case 97:g(r,C.shortDays[a.getDay()]);break;case 98:case 104:g(r,C.shortMonths[a.getMonth()]);break;case 99:t(e,r,C.formats.c,a);break;case 100:V(r,a.getDate(),48);break;case 101:V(r,a.getDate(),32);break;case 106:var l=Math.floor((a-new Date(a.getFullYear(),0,1))/864e5);l<100&&(l<10&&A(r,48),A(r,48)),g(r,y(String(l)));break;case 107:V(r,a.getHours(),32);break;case 108:V(r,(a.getHours()+11)%12+1,32);break;case 109:V(r,a.getMonth()+1,48);break;case 110:A(r,10);break;case 112:g(r,a.getHours()<12?C.AM:C.PM);break;case 114:t(e,r,C.formats.r,a);break;case 115:g(r,y(String(Math.floor(a/1e3))));break;case 116:A(r,8);break;case 117:var i=a.getDay();g(r,y(String(0===i?7:i)));break;case 119:g(r,y(String(a.getDay())));break;case 120:t(e,r,C.formats.x,a);break;case 121:V(r,a.getFullYear()%100,48);break;case 122:var c=a.getTimezoneOffset();c>0?A(r,45):(c=-c,A(r,43)),V(r,Math.floor(c/60),48),V(r,c%60,48)}u+=s}}(t,u,e,r),U(u)}return 1},difftime:function(t){var e=G(t,1),r=G(t,2);return _(t,e-r),1},time:function(t){var e;return l(t,1)?e=new Date:(k(t,1,u),v(t,1),e=new Date(P(t,\"year\",-1,0),P(t,\"month\",-1,1),P(t,\"day\",-1,0),P(t,\"hour\",12,0),P(t,\"min\",0,0),P(t,\"sec\",0,0)),I(t,e)),f(t,Math.floor(e/1e3)),1}};K.clock=function(t){return _(t,performance.now()/1e3),1};t.exports.luaopen_os=function(t){return E(t,K),1}},function(t,e,r){\"use strict\";function n(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}var a=r(38).sprintf,u=r(3),s=u.LUA_INTEGER_FMT,o=u.LUA_INTEGER_FRMLEN,l=u.LUA_MININTEGER,i=u.LUA_NUMBER_FMT,c=u.LUA_NUMBER_FRMLEN,f=u.frexp,_=u.lua_getlocaledecpoint,p=r(2),v=p.LUA_TBOOLEAN,h=p.LUA_TFUNCTION,L=p.LUA_TNIL,d=p.LUA_TNUMBER,A=p.LUA_TSTRING,g=p.LUA_TTABLE,T=p.lua_call,x=p.lua_createtable,b=p.lua_dump,k=p.lua_gettable,O=p.lua_gettop,E=p.lua_isinteger,m=p.lua_isstring,U=p.lua_pop,N=p.lua_pushcclosure,R=p.lua_pushinteger,y=p.lua_pushlightuserdata,S=p.lua_pushliteral,w=p.lua_pushlstring,I=p.lua_pushnil,M=p.lua_pushnumber,P=p.lua_pushstring,C=p.lua_pushvalue,D=p.lua_remove,V=p.lua_setfield,B=p.lua_setmetatable,G=p.lua_settop,K=p.lua_toboolean,F=p.lua_tointeger,j=p.lua_tonumber,H=p.lua_tostring,X=p.lua_touserdata,z=p.lua_type,Y=p.lua_upvalueindex,J=r(7),Z=J.luaL_Buffer,q=J.luaL_addchar,W=J.luaL_addlstring,Q=J.luaL_addsize,$=J.luaL_addstring,tt=J.luaL_addvalue,et=J.luaL_argcheck,rt=J.luaL_argerror,nt=J.luaL_buffinit,at=J.luaL_buffinitsize,ut=J.luaL_checkinteger,st=J.luaL_checknumber,ot=J.luaL_checkstack,lt=J.luaL_checkstring,it=J.luaL_checktype,ct=J.luaL_error,ft=J.luaL_newlib,_t=J.luaL_optinteger,pt=J.luaL_optstring,vt=J.luaL_prepbuffsize,ht=J.luaL_pushresult,Lt=J.luaL_pushresultsize,dt=J.luaL_tolstring,At=J.luaL_typename,gt=r(17),Tt=r(5),xt=Tt.luastring_eq,bt=Tt.luastring_indexOf,kt=Tt.to_jsstring,Ot=Tt.to_luastring,Et=\"%\".charCodeAt(0),mt=function(t){var e=bt(t,0);return e>-1?e:t.length},Ut=function(t,e){return t>=0?t:0-t>e?0:e+t+1},Nt=function(t,e,r,n){return W(n,e,r),0},Rt=c.length+1,yt=function(t,e,r){var n=function(t){if(Object.is(t,1/0))return Ot(\"inf\");if(Object.is(t,-1/0))return Ot(\"-inf\");if(Number.isNaN(t))return Ot(\"nan\");if(0===t){var e=a(i+\"x0p+0\",t);return Object.is(t,-0)&&(e=\"-\"+e),Ot(e)}var r=\"\",n=f(t),u=n[0],s=n[1];return u<0&&(r+=\"-\",u=-u),r+=\"0x\",r+=(2*u).toString(16),r+=a(\"p%+d\",s-=1),Ot(r)}(r);if(65===e[Rt])for(var u=0;u<n.length;u++){var s=n[u];s>=97&&(n[u]=223&s)}else 97!==e[Rt]&&ct(t,Ot(\"modifiers for format '%%a'/'%%A' not implemented\"));return n},St=Ot(\"-+ #0\"),wt=function(t){return 97<=t&&t<=122||65<=t&&t<=90},It=function(t){return 48<=t&&t<=57},Mt=function(t){return 0<=t&&t<=31||127===t},Pt=function(t){return 33<=t&&t<=126},Ct=function(t){return 97<=t&&t<=122},Dt=function(t){return 65<=t&&t<=90},Vt=function(t){return 97<=t&&t<=122||65<=t&&t<=90||48<=t&&t<=57},Bt=function(t){return Pt(t)&&!Vt(t)},Gt=function(t){return 32===t||t>=9&&t<=13},Kt=function(t){return 48<=t&&t<=57||65<=t&&t<=70||97<=t&&t<=102},Ft=function(t,e,r){switch(z(t,r)){case A:var n=H(t,r);!function(t,e,r){q(t,34);for(var n=0;r--;){if(34===e[n]||92===e[n]||10===e[n])q(t,92),q(t,e[n]);else if(Mt(e[n])){var a=\"\"+e[n];It(e[n+1])&&(a=\"0\".repeat(3-a.length)+a),$(t,Ot(\"\\\\\"+a))}else q(t,e[n]);n++}q(t,34)}(e,n,n.length);break;case d:var u;if(E(t,r)){var i=F(t,r);u=Ot(a(i===l?\"0x%\"+o+\"x\":s,i))}else{var c=j(t,r);(function(t){if(bt(t,46)<0){var e=_(),r=bt(t,e);r&&(t[r]=46)}})(u=yt(t,Ot(\"%\".concat(o,\"a\")),c))}$(e,u);break;case L:case v:dt(t,r),tt(e);break;default:rt(t,r,Ot(\"value has no literal form\"))}},jt=function(t,e,r,n){for(var a=r;0!==e[a]&&bt(St,e[a])>=0;)a++;a-r>=St.length&&ct(t,Ot(\"invalid format (repeated flags)\")),It(e[a])&&a++,It(e[a])&&a++,46===e[a]&&(It(e[++a])&&a++,It(e[a])&&a++),It(e[a])&&ct(t,Ot(\"invalid format (width or precision too long)\")),n[0]=37;for(var u=0;u<a-r+1;u++)n[u+1]=e[r+u];return a},Ht=function(t,e){for(var r=t.length,n=e.length,a=t[r-1],u=0;u<n;u++)t[u+r-1]=e[u];t[r+n-1]=a},Xt=function t(e){n(this,t),this.L=e,this.islittle=!0,this.maxalign=1},zt=It,Yt=function(t,e){if(t.off>=t.s.length||!zt(t.s[t.off]))return e;var r=0;do{r=10*r+(t.s[t.off++]-48)}while(t.off<t.s.length&&zt(t.s[t.off])&&r<=214748363.8);return r},Jt=function(t,e,r){var n=Yt(e,r);return(n>16||n<=0)&&ct(t.L,Ot(\"integral size (%d) out of limits [1,%d]\"),n,16),n},Zt=function(t,e){var r={opt:e.s[e.off++],size:0};switch(r.opt){case 98:return r.size=1,r.opt=0,r;case 66:return r.size=1,r.opt=1,r;case 104:return r.size=2,r.opt=0,r;case 72:return r.size=2,r.opt=1,r;case 108:return r.size=4,r.opt=0,r;case 76:return r.size=4,r.opt=1,r;case 106:return r.size=4,r.opt=0,r;case 74:case 84:return r.size=4,r.opt=1,r;case 102:return r.size=4,r.opt=2,r;case 100:case 110:return r.size=8,r.opt=2,r;case 105:return r.size=Jt(t,e,4),r.opt=0,r;case 73:return r.size=Jt(t,e,4),r.opt=1,r;case 115:return r.size=Jt(t,e,4),r.opt=4,r;case 99:return r.size=Yt(e,-1),-1===r.size&&ct(t.L,Ot(\"missing size for format option 'c'\")),r.opt=3,r;case 122:return r.opt=5,r;case 120:return r.size=1,r.opt=6,r;case 88:return r.opt=7,r;case 32:break;case 60:t.islittle=!0;break;case 62:t.islittle=!1;break;case 61:t.islittle=!0;break;case 33:t.maxalign=Jt(t,e,8);break;default:ct(t.L,Ot(\"invalid format option '%c'\"),r.opt)}return r.opt=8,r},qt=function(t,e,r){var n={opt:NaN,size:NaN,ntoalign:NaN},a=Zt(t,r);n.size=a.size,n.opt=a.opt;var u=n.size;if(7===n.opt)if(r.off>=r.s.length||0===r.s[r.off])rt(t.L,1,Ot(\"invalid next option for option 'X'\"));else{var s=Zt(t,r);u=s.size,3!==(s=s.opt)&&0!==u||rt(t.L,1,Ot(\"invalid next option for option 'X'\"))}return u<=1||3===n.opt?n.ntoalign=0:(u>t.maxalign&&(u=t.maxalign),0!=(u&u-1)&&rt(t.L,1,Ot(\"format asks for alignment not power of 2\")),n.ntoalign=u-(e&u-1)&u-1),n},Wt=function(t,e,r,n,a){var u=vt(t,n);u[r?0:n-1]=255&e;for(var s=1;s<n;s++)e>>=8,u[r?s:n-1-s]=255&e;if(a&&n>4)for(var o=4;o<n;o++)u[r?o:n-1-o]=255;Q(t,n)},Qt=function(t,e,r,n,a){for(var u=0,s=n<=4?n:4,o=s-1;o>=0;o--)u<<=8,u|=e[r?o:n-1-o];if(n<4){if(a){var l=1<<8*n-1;u=(u^l)-l}}else if(n>4)for(var i=!a||u>=0?0:255,c=s;c<n;c++)e[r?c:n-1-c]!==i&&ct(t,Ot(\"%d-byte integer does not fit into Lua Integer\"),n);return u},$t=function(t,e,r,n){gt.lua_assert(e.length>=n);for(var a=new DataView(new ArrayBuffer(n)),u=0;u<n;u++)a.setUint8(u,e[u],r);return 4==n?a.getFloat32(0,r):a.getFloat64(0,r)},te=Ot(\"^$*+?.([%-\"),ee=function t(e){n(this,t),this.src=null,this.src_init=null,this.src_end=null,this.p=null,this.p_end=null,this.L=e,this.matchdepth=NaN,this.level=NaN,this.capture=[]},re=function(t,e){switch(t.p[e++]){case Et:return e===t.p_end&&ct(t.L,Ot(\"malformed pattern (ends with '%%')\")),e+1;case 91:94===t.p[e]&&e++;do{e===t.p_end&&ct(t.L,Ot(\"malformed pattern (missing ']')\")),t.p[e++]===Et&&e<t.p_end&&e++}while(93!==t.p[e]);return e+1;default:return e}},ne=function(t,e){switch(e){case 97:return wt(t);case 65:return!wt(t);case 99:return Mt(t);case 67:return!Mt(t);case 100:return It(t);case 68:return!It(t);case 103:return Pt(t);case 71:return!Pt(t);case 108:return Ct(t);case 76:return!Ct(t);case 112:return Bt(t);case 80:return!Bt(t);case 115:return Gt(t);case 83:return!Gt(t);case 117:return Dt(t);case 85:return!Dt(t);case 119:return Vt(t);case 87:return!Vt(t);case 120:return Kt(t);case 88:return!Kt(t);case 122:return 0===t;case 90:return 0!==t;default:return e===t}},ae=function(t,e,r,n){var a=!0;for(94===t.p[r+1]&&(a=!1,r++);++r<n;)if(t.p[r]===Et){if(r++,ne(e,t.p[r]))return a}else if(45===t.p[r+1]&&r+2<n){if(r+=2,t.p[r-2]<=e&&e<=t.p[r])return a}else if(t.p[r]===e)return a;return!a},ue=function(t,e,r,n){if(e>=t.src_end)return!1;var a=t.src[e];switch(t.p[r]){case 46:return!0;case Et:return ne(a,t.p[r+1]);case 91:return ae(t,a,r,n-1);default:return t.p[r]===a}},se=function(t,e,r){if(r>=t.p_end-1&&ct(t.L,Ot(\"malformed pattern (missing arguments to '%%b'\")),t.src[e]!==t.p[r])return null;for(var n=t.p[r],a=t.p[r+1],u=1;++e<t.src_end;)if(t.src[e]===a){if(0==--u)return e+1}else t.src[e]===n&&u++;return null},oe=function(t,e,r,n){for(var a=0;ue(t,e+a,r,n);)a++;for(;a>=0;){var u=_e(t,e+a,n+1);if(u)return u;a--}return null},le=function(t,e,r,n){for(;;){var a=_e(t,e,n+1);if(null!==a)return a;if(!ue(t,e,r,n))return null;e++}},ie=function(t,e,r,n){var a,u=t.level;return u>=32&&ct(t.L,Ot(\"too many captures\")),t.capture[u]=t.capture[u]?t.capture[u]:{},t.capture[u].init=e,t.capture[u].len=n,t.level=u+1,null===(a=_e(t,e,r))&&t.level--,a},ce=function(t,e,r){var n,a=function(t){var e=t.level;for(e--;e>=0;e--)if(-1===t.capture[e].len)return e;return ct(t.L,Ot(\"invalid pattern capture\"))}(t);return t.capture[a].len=e-t.capture[a].init,null===(n=_e(t,e,r))&&(t.capture[a].len=-1),n},fe=function(t,e,r){r=function(t,e){return(e-=49)<0||e>=t.level||-1===t.capture[e].len?ct(t.L,Ot(\"invalid capture index %%%d\"),e+1):e}(t,r);var n=t.capture[r].len;return t.src_end-e>=n&&function(t,e,r,n,a){return xt(t.subarray(e,e+a),r.subarray(n,n+a))}(t.src,t.capture[r].init,t.src,e,n)?e+n:null},_e=function t(e,r,n){var a=!1,u=!0;for(0==e.matchdepth--&&ct(e.L,Ot(\"pattern too complex\"));u||a;)if(u=!1,n!==e.p_end)switch(a?void 0:e.p[n]){case 40:r=41===e.p[n+1]?ie(e,r,n+2,-2):ie(e,r,n+1,-1);break;case 41:r=ce(e,r,n+1);break;case 36:if(n+1!==e.p_end){a=!0;break}r=e.src.length-r==0?r:null;break;case Et:switch(e.p[n+1]){case 98:null!==(r=se(e,r,n+2))&&(n+=4,u=!0);break;case 102:n+=2,91!==e.p[n]&&ct(e.L,Ot(\"missing '[' after '%%f' in pattern\"));var s=re(e,n),o=r===e.src_init?0:e.src[r-1];if(!ae(e,o,n,s-1)&&ae(e,r===e.src_end?0:e.src[r],n,s-1)){n=s,u=!0;break}r=null;break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:null!==(r=fe(e,r,e.p[n+1]))&&(n+=2,u=!0);break;default:a=!0}break;default:a=!1;var l=re(e,n);if(ue(e,r,n,l))switch(e.p[l]){case 63:var i;null!==(i=t(e,r+1,l+1))?r=i:(n=l+1,u=!0);break;case 43:r++;case 42:r=oe(e,r,n,l);break;case 45:r=le(e,r,n,l);break;default:r++,n=l,u=!0}else{if(42===e.p[l]||63===e.p[l]||45===e.p[l]){n=l+1,u=!0;break}r=null}}return e.matchdepth++,r},pe=function(t,e,r,n){if(e>=t.level)0===e?w(t.L,t.src.subarray(r,n),n-r):ct(t.L,Ot(\"invalid capture index %%%d\"),e+1);else{var a=t.capture[e].len;-1===a&&ct(t.L,Ot(\"unfinished capture\")),-2===a?R(t.L,t.capture[e].init-t.src_init+1):w(t.L,t.src.subarray(t.capture[e].init),a)}},ve=function(t,e,r){var n=0===t.level&&t.src.subarray(e)?1:t.level;ot(t.L,n,\"too many captures\");for(var a=0;a<n;a++)pe(t,a,e,r);return n},he=function(t,e,r,n,a,u){t.L=e,t.matchdepth=200,t.src=r,t.src_init=0,t.src_end=n,t.p=a,t.p_end=u},Le=function(t){t.level=0,gt.lua_assert(200===t.matchdepth)},de=function(t,e){var r=lt(t,1),n=lt(t,2),a=r.length,u=n.length,s=Ut(_t(t,3,1),a);if(s<1)s=1;else if(s>a+1)return I(t),1;if(e&&(K(t,4)||function(t,e){for(var r=0;r<e;r++)if(-1!==bt(te,t[r]))return!1;return!0}(n,u))){var o=function(t,e,r){var n=r>>>0,a=e.length;if(0===a)return n;for(;-1!==(n=t.indexOf(e[0],n));n++)if(xt(t.subarray(n,n+a),e))return n;return-1}(r.subarray(s-1),n,0);if(o>-1)return R(t,s+o),R(t,s+o+u-1),2}else{var l=new ee(t),i=s-1,c=94===n[0];c&&(n=n.subarray(1),u--),he(l,t,r,a,n,u);do{var f;if(Le(l),null!==(f=_e(l,i,0)))return e?(R(t,i+1),R(t,f),ve(l,null,0)+2):ve(l,i,f)}while(i++<l.src_end&&!c)}return I(t),1},Ae=function(t){var e=X(t,Y(3));e.ms.L=t;for(var r=e.src;r<=e.ms.src_end;r++){Le(e.ms);var n;if(null!==(n=_e(e.ms,r,e.p))&&n!==e.lastmatch)return e.src=e.lastmatch=n,ve(e.ms,r,n)}return 0},ge=function(t,e,r,n,a){var u=t.L;switch(a){case h:C(u,3);var s=ve(t,r,n);T(u,s,1);break;case g:pe(t,0,r,n),k(u,3);break;default:return void function(t,e,r,n){for(var a=t.L,u=H(a,3),s=u.length,o=0;o<s;o++)u[o]!==Et?q(e,u[o]):It(u[++o])?48===u[o]?W(e,t.src.subarray(r,n),n-r):(pe(t,u[o]-49,r,n),dt(a,-1),D(a,-2),tt(e)):(u[o]!==Et&&ct(a,Ot(\"invalid use of '%c' in replacement string\"),Et),q(e,u[o]))}(t,e,r,n)}K(u,-1)?m(u,-1)||ct(u,Ot(\"invalid replacement value (a %s)\"),At(u,-1)):(U(u,1),w(u,t.src.subarray(r,n),n-r)),tt(e)},Te={byte:function(t){var e=lt(t,1),r=e.length,n=Ut(_t(t,2,1),r),a=Ut(_t(t,3,n),r);if(n<1&&(n=1),a>r&&(a=r),n>a)return 0;if(a-n>=Number.MAX_SAFE_INTEGER)return ct(t,\"string slice too long\");var u=a-n+1;ot(t,u,\"string slice too long\");for(var s=0;s<u;s++)R(t,e[n+s-1]);return u},char:function(t){for(var e=O(t),r=new Z,n=at(t,r,e),a=1;a<=e;a++){var u=ut(t,a);et(t,u>=0&&u<=255,\"value out of range\"),n[a-1]=u}return Lt(r,e),1},dump:function(t){var e=new Z,r=K(t,2);return it(t,1,h),G(t,1),nt(t,e),0!==b(t,Nt,e,r)?ct(t,Ot(\"unable to dump given function\")):(ht(e),1)},find:function(t){return de(t,1)},format:function(t){var e=O(t),r=1,n=lt(t,r),u=0,s=new Z;for(nt(t,s);u<n.length;)if(n[u]!==Et)q(s,n[u++]);else if(n[++u]===Et)q(s,n[u++]);else{var l=[];switch(++r>e&&rt(t,r,Ot(\"no value\")),u=jt(t,n,u,l),String.fromCharCode(n[u++])){case\"c\":q(s,ut(t,r));break;case\"d\":case\"i\":case\"o\":case\"u\":case\"x\":case\"X\":var i=ut(t,r);Ht(l,Ot(o,!0)),$(s,Ot(a(String.fromCharCode.apply(String,l),i)));break;case\"a\":case\"A\":Ht(l,Ot(o,!0)),$(s,yt(t,l,st(t,r)));break;case\"e\":case\"E\":case\"f\":case\"g\":case\"G\":var c=st(t,r);Ht(l,Ot(o,!0)),$(s,Ot(a(String.fromCharCode.apply(String,l),c)));break;case\"q\":Ft(t,s,r);break;case\"s\":var f=dt(t,r);l.length<=2||0===l[2]?tt(s):(et(t,f.length===mt(f),r,\"string contains zeros\"),bt(l,46)<0&&f.length>=100?tt(s):($(s,Ot(a(String.fromCharCode.apply(String,l),kt(f)))),U(t,1)));break;default:return ct(t,Ot(\"invalid option '%%%c' to 'format'\"),n[u-1])}}return ht(s),1},gmatch:function(t){var e=lt(t,1),r=lt(t,2),a=e.length,u=r.length;G(t,2);var s=new function t(){n(this,t),this.src=NaN,this.p=NaN,this.lastmatch=NaN,this.ms=new ee};return y(t,s),he(s.ms,t,e,a,r,u),s.src=0,s.p=0,s.lastmatch=null,N(t,Ae,3),1},gsub:function(t){var e=lt(t,1),r=e.length,n=lt(t,2),a=n.length,u=null,s=z(t,3),o=_t(t,4,r+1),l=94===n[0],i=0,c=new ee(t),f=new Z;for(et(t,s===d||s===A||s===h||s===g,3,\"string/function/table expected\"),nt(t,f),l&&(n=n.subarray(1),a--),he(c,t,e,r,n,a),e=0,n=0;i<o;){var _;if(Le(c),null!==(_=_e(c,e,n))&&_!==u)i++,ge(c,f,e,_,s),e=u=_;else{if(!(e<c.src_end))break;q(f,c.src[e++])}if(l)break}return W(f,c.src.subarray(e,c.src_end),c.src_end-e),ht(f),R(t,i),2},len:function(t){return R(t,lt(t,1).length),1},lower:function(t){for(var e=lt(t,1),r=e.length,n=new Uint8Array(r),a=0;a<r;a++){var u=e[a];Dt(u)&&(u|=32),n[a]=u}return P(t,n),1},match:function(t){return de(t,0)},pack:function(t){var e=new Z,r=new Xt(t),n={s:lt(t,1),off:0},a=1,u=0;for(I(t),nt(t,e);n.off<n.s.length;){var s=qt(r,u,n),o=s.opt,l=s.size,i=s.ntoalign;for(u+=i+l;i-- >0;)q(e,0);switch(a++,o){case 0:var c=ut(t,a);if(l<4){var f=1<<8*l-1;et(t,-f<=c&&c<f,a,\"integer overflow\")}Wt(e,c,r.islittle,l,c<0);break;case 1:var _=ut(t,a);l<4&&et(t,_>>>0<1<<8*l,a,\"unsigned overflow\"),Wt(e,_>>>0,r.islittle,l,!1);break;case 2:var p=vt(e,l),v=st(t,a),h=new DataView(p.buffer,p.byteOffset,p.byteLength);4===l?h.setFloat32(0,v,r.islittle):h.setFloat64(0,v,r.islittle),Q(e,l);break;case 3:var L=lt(t,a),d=L.length;for(et(t,d<=l,a,\"string longer than given size\"),W(e,L,d);d++<l;)q(e,0);break;case 4:var A=lt(t,a),g=A.length;et(t,l>=4||g<1<<8*l,a,\"string length does not fit in given size\"),Wt(e,g,r.islittle,l,0),W(e,A,g),u+=g;break;case 5:var T=lt(t,a),x=T.length;et(t,bt(T,0)<0,a,\"strings contains zeros\"),W(e,T,x),q(e,0),u+=x+1;break;case 6:q(e,0);case 7:case 8:a--}}return ht(e),1},packsize:function(t){for(var e=new Xt(t),r={s:lt(t,1),off:0},n=0;r.off<r.s.length;){var a=qt(e,n,r),u=a.opt,s=a.size,o=a.ntoalign;switch(et(t,n<=2147483647-(s+=o),1,\"format result too large\"),n+=s,u){case 4:case 5:rt(t,1,\"variable-length format\")}}return R(t,n),1},rep:function(t){var e=lt(t,1),r=e.length,n=ut(t,2),a=pt(t,3,\"\"),u=a.length;if(n<=0)S(t,\"\");else{if(r+u<r||r+u>2147483647/n)return ct(t,Ot(\"resulting string too large\"));for(var s=n*r+(n-1)*u,o=new Z,l=at(t,o,s),i=0;n-- >1;)l.set(e,i),i+=r,u>0&&(l.set(a,i),i+=u);l.set(e,i),Lt(o,s)}return 1},reverse:function(t){for(var e=lt(t,1),r=e.length,n=new Uint8Array(r),a=0;a<r;a++)n[a]=e[r-1-a];return P(t,n),1},sub:function(t){var e=lt(t,1),r=e.length,n=Ut(ut(t,2),r),a=Ut(_t(t,3,-1),r);return n<1&&(n=1),a>r&&(a=r),n<=a?P(t,e.subarray(n-1,n-1+(a-n+1))):S(t,\"\"),1},unpack:function(t){var e=new Xt(t),r={s:lt(t,1),off:0},n=lt(t,2),a=n.length,u=Ut(_t(t,3,1),a)-1,s=0;for(et(t,u<=a&&u>=0,3,\"initial position out of string\");r.off<r.s.length;){var o=qt(e,u,r),l=o.opt,i=o.size,c=o.ntoalign;switch(u+c+i>a&&rt(t,2,Ot(\"data string too short\")),u+=c,ot(t,2,\"too many results\"),s++,l){case 0:case 1:var f=Qt(t,n.subarray(u),e.islittle,i,0===l);R(t,f);break;case 2:var _=$t(0,n.subarray(u),e.islittle,i);M(t,_);break;case 3:P(t,n.subarray(u,u+i));break;case 4:var p=Qt(t,n.subarray(u),e.islittle,i,0);et(t,u+p+i<=a,2,\"data string too short\"),P(t,n.subarray(u+i,u+i+p)),u+=p;break;case 5:var v=bt(n,0,u);-1===v&&(v=n.length-u),P(t,n.subarray(u,v)),u=v+1;break;case 7:case 6:case 8:s--}u+=i}return R(t,u+1),s+1},upper:function(t){for(var e=lt(t,1),r=e.length,n=new Uint8Array(r),a=0;a<r;a++){var u=e[a];Ct(u)&&(u&=223),n[a]=u}return P(t,n),1}};t.exports.luaopen_string=function(t){return ft(t,Te),function(t){x(t,0,1),S(t,\"\"),C(t,-2),B(t,-2),U(t,1),C(t,-2),V(t,-2,Ot(\"__index\",!0)),U(t,1)}(t),1}},function(t,e,r){\"use strict\";var n=r(2),a=n.lua_gettop,u=n.lua_pushcfunction,s=n.lua_pushfstring,o=n.lua_pushinteger,l=n.lua_pushnil,i=n.lua_pushstring,c=n.lua_pushvalue,f=n.lua_setfield,_=n.lua_tointeger,p=r(7),v=p.luaL_Buffer,h=p.luaL_addvalue,L=p.luaL_argcheck,d=p.luaL_buffinit,A=p.luaL_checkinteger,g=p.luaL_checkstack,T=p.luaL_checkstring,x=p.luaL_error,b=p.luaL_newlib,k=p.luaL_optinteger,O=p.luaL_pushresult,E=r(5),m=E.luastring_of,U=E.to_luastring,N=function(t){return 128===(192&t)},R=function(t,e){return t>=0?t:0-t>e?0:e+t+1},y=[255,127,2047,65535],S=function(t,e){var r=t[e],n=0;if(r<128)n=r;else{for(var a=0;64&r;){var u=t[e+ ++a];if(128!=(192&u))return null;n=n<<6|63&u,r<<=1}if(n|=(127&r)<<5*a,a>3||n>1114111||n<=y[a])return null;e+=a}return{code:n,pos:e+1}},w=U(\"%U\"),I=function(t,e){var r=A(t,e);L(t,0<=r&&r<=1114111,e,\"value out of range\"),s(t,w,r)},M=function(t){var e=T(t,1),r=e.length,n=_(t,2)-1;if(n<0)n=0;else if(n<r)for(n++;N(e[n]);)n++;if(n>=r)return 0;var a=S(e,n);return null===a||N(e[a.pos])?x(t,U(\"invalid UTF-8 code\")):(o(t,n+1),o(t,a.code),2)},P={char:function(t){var e=a(t);if(1===e)I(t,1);else{var r=new v;d(t,r);for(var n=1;n<=e;n++)I(t,n),h(r);O(r)}return 1},codepoint:function(t){var e=T(t,1),r=R(k(t,2,1),e.length),n=R(k(t,3,r),e.length);if(L(t,r>=1,2,\"out of range\"),L(t,n<=e.length,3,\"out of range\"),r>n)return 0;if(n-r>=Number.MAX_SAFE_INTEGER)return x(t,\"string slice too long\");var a=n-r+1;for(g(t,a,\"string slice too long\"),a=0,r-=1;r<n;){var u=S(e,r);if(null===u)return x(t,\"invalid UTF-8 code\");o(t,u.code),r=u.pos,a++}return a},codes:function(t){return T(t,1),u(t,M),c(t,1),o(t,0),3},len:function(t){var e=0,r=T(t,1),n=r.length,a=R(k(t,2,1),n),u=R(k(t,3,-1),n);for(L(t,1<=a&&--a<=n,2,\"initial position out of string\"),L(t,--u<n,3,\"final position out of string\");a<=u;){var s=S(r,a);if(null===s)return l(t),o(t,a+1),2;a=s.pos,e++}return o(t,e),1},offset:function(t){var e=T(t,1),r=A(t,2),n=r>=0?1:e.length+1;if(n=R(k(t,3,n),e.length),L(t,1<=n&&--n<=e.length,3,\"position out of range\"),0===r)for(;n>0&&N(e[n]);)n--;else if(N(e[n])&&x(t,\"initial position is a continuation byte\"),r<0)for(;r<0&&n>0;){do{n--}while(n>0&&N(e[n]));r++}else for(r--;r>0&&n<e.length;){do{n++}while(N(e[n]));r--}return 0===r?o(t,n+1):l(t),1}},C=m(91,0,45,127,194,45,244,93,91,128,45,191,93,42);t.exports.luaopen_utf8=function(t){return b(t,P),i(t,C),f(t,-2,U(\"charpattern\",!0)),1}},function(t,e,r){\"use strict\";var n,a=r(2),u=a.LUA_OPLT,s=a.LUA_TNUMBER,o=a.lua_compare,l=a.lua_gettop,i=a.lua_isinteger,c=a.lua_isnoneornil,f=a.lua_pushboolean,_=a.lua_pushinteger,p=a.lua_pushliteral,v=a.lua_pushnil,h=a.lua_pushnumber,L=a.lua_pushvalue,d=a.lua_setfield,A=a.lua_settop,g=a.lua_tointeger,T=a.lua_tointegerx,x=a.lua_type,b=r(7),k=b.luaL_argcheck,O=b.luaL_argerror,E=b.luaL_checkany,m=b.luaL_checkinteger,U=b.luaL_checknumber,N=b.luaL_error,R=b.luaL_newlib,y=b.luaL_optnumber,S=r(3),w=S.LUA_MAXINTEGER,I=S.LUA_MININTEGER,M=S.lua_numbertointeger,P=r(5).to_luastring,C=function(){return n=1103515245*n+12345&2147483647},D=function(t,e){var r=M(e);!1!==r?_(t,r):h(t,e)},V={abs:function(t){if(i(t,1)){var e=g(t,1);e<0&&(e=0|-e),_(t,e)}else h(t,Math.abs(U(t,1)));return 1},acos:function(t){return h(t,Math.acos(U(t,1))),1},asin:function(t){return h(t,Math.asin(U(t,1))),1},atan:function(t){var e=U(t,1),r=y(t,2,1);return h(t,Math.atan2(e,r)),1},ceil:function(t){return i(t,1)?A(t,1):D(t,Math.ceil(U(t,1))),1},cos:function(t){return h(t,Math.cos(U(t,1))),1},deg:function(t){return h(t,U(t,1)*(180/Math.PI)),1},exp:function(t){return h(t,Math.exp(U(t,1))),1},floor:function(t){return i(t,1)?A(t,1):D(t,Math.floor(U(t,1))),1},fmod:function(t){if(i(t,1)&&i(t,2)){var e=g(t,2);0===e?O(t,2,\"zero\"):_(t,g(t,1)%e|0)}else{var r=U(t,1),n=U(t,2);h(t,r%n)}return 1},log:function(t){var e,r=U(t,1);if(c(t,2))e=Math.log(r);else{var n=U(t,2);e=2===n?Math.log2(r):10===n?Math.log10(r):Math.log(r)/Math.log(n)}return h(t,e),1},max:function(t){var e=l(t),r=1;k(t,e>=1,1,\"value expected\");for(var n=2;n<=e;n++)o(t,r,n,u)&&(r=n);return L(t,r),1},min:function(t){var e=l(t),r=1;k(t,e>=1,1,\"value expected\");for(var n=2;n<=e;n++)o(t,n,r,u)&&(r=n);return L(t,r),1},modf:function(t){if(i(t,1))A(t,1),h(t,0);else{var e=U(t,1),r=e<0?Math.ceil(e):Math.floor(e);D(t,r),h(t,e===r?0:e-r)}return 2},rad:function(t){return h(t,U(t,1)*(Math.PI/180)),1},random:function(t){var e,r,a=void 0===n?Math.random():C()/2147483648;switch(l(t)){case 0:return h(t,a),1;case 1:e=1,r=m(t,1);break;case 2:e=m(t,1),r=m(t,2);break;default:return N(t,\"wrong number of arguments\")}return k(t,e<=r,1,\"interval is empty\"),k(t,e>=0||r<=w+e,1,\"interval too large\"),a*=r-e+1,_(t,Math.floor(a)+e),1},randomseed:function(t){return function(t){0==(n=0|t)&&(n=1)}(U(t,1)),C(),0},sin:function(t){return h(t,Math.sin(U(t,1))),1},sqrt:function(t){return h(t,Math.sqrt(U(t,1))),1},tan:function(t){return h(t,Math.tan(U(t,1))),1},tointeger:function(t){var e=T(t,1);return!1!==e?_(t,e):(E(t,1),v(t)),1},type:function(t){return x(t,1)===s?i(t,1)?p(t,\"integer\"):p(t,\"float\"):(E(t,1),v(t)),1},ult:function(t){var e=m(t,1),r=m(t,2);return f(t,e>=0?r<0||e<r:r<0&&e<r),1}};t.exports.luaopen_math=function(t){return R(t,V),h(t,Math.PI),d(t,-2,P(\"pi\",!0)),h(t,1/0),d(t,-2,P(\"huge\",!0)),_(t,w),d(t,-2,P(\"maxinteger\",!0)),_(t,I),d(t,-2,P(\"mininteger\",!0)),1}},function(t,e,r){\"use strict\";var n,a=r(2),u=a.LUA_MASKCALL,s=a.LUA_MASKCOUNT,o=a.LUA_MASKLINE,l=a.LUA_MASKRET,i=a.LUA_REGISTRYINDEX,c=a.LUA_TFUNCTION,f=a.LUA_TNIL,_=a.LUA_TTABLE,p=a.LUA_TUSERDATA,v=a.lua_Debug,h=a.lua_call,L=a.lua_checkstack,d=a.lua_gethook,A=a.lua_gethookcount,g=a.lua_gethookmask,T=a.lua_getinfo,x=a.lua_getlocal,b=a.lua_getmetatable,k=a.lua_getstack,O=a.lua_getupvalue,E=a.lua_getuservalue,m=a.lua_insert,U=a.lua_iscfunction,N=a.lua_isfunction,R=a.lua_isnoneornil,y=a.lua_isthread,S=a.lua_newtable,w=a.lua_pcall,I=a.lua_pop,M=a.lua_pushboolean,P=a.lua_pushfstring,C=a.lua_pushinteger,D=a.lua_pushlightuserdata,V=a.lua_pushliteral,B=a.lua_pushnil,G=a.lua_pushstring,K=a.lua_pushvalue,F=a.lua_rawgetp,j=a.lua_rawsetp,H=a.lua_rotate,X=a.lua_setfield,z=a.lua_sethook,Y=a.lua_setlocal,J=a.lua_setmetatable,Z=a.lua_settop,q=a.lua_setupvalue,W=a.lua_setuservalue,Q=a.lua_tojsstring,$=a.lua_toproxy,tt=a.lua_tostring,et=a.lua_tothread,rt=a.lua_touserdata,nt=a.lua_type,at=a.lua_upvalueid,ut=a.lua_upvaluejoin,st=a.lua_xmove,ot=r(7),lt=ot.luaL_argcheck,it=ot.luaL_argerror,ct=ot.luaL_checkany,ft=ot.luaL_checkinteger,_t=ot.luaL_checkstring,pt=ot.luaL_checktype,vt=ot.luaL_error,ht=ot.luaL_loadbuffer,Lt=ot.luaL_newlib,dt=ot.luaL_optinteger,At=ot.luaL_optstring,gt=ot.luaL_traceback,Tt=ot.lua_writestringerror,xt=r(17),bt=r(5),kt=bt.luastring_indexOf,Ot=bt.to_luastring,Et=function(t,e,r){t===e||L(e,r)||vt(t,Ot(\"stack overflow\",!0))},mt=function(t){return y(t,1)?{arg:1,thread:et(t,1)}:{arg:0,thread:t}},Ut=function(t,e,r){G(t,r),X(t,-2,e)},Nt=function(t,e,r){C(t,r),X(t,-2,e)},Rt=function(t,e,r){M(t,r),X(t,-2,e)},yt=function(t,e,r){t==e?H(t,-2,1):st(e,t,1),X(t,-2,r)},St=function(t,e){var r=ft(t,2);pt(t,1,c);var n=e?O(t,1,r):q(t,1,r);return null===n?0:(G(t,n),m(t,-(e+1)),e+1)},wt=function(t,e,r){var n=ft(t,r);return pt(t,e,c),lt(t,null!==O(t,e,n),r,\"invalid upvalue index\"),n},It=Ot(\"__hooks__\",!0),Mt=[\"call\",\"return\",\"line\",\"count\",\"tail call\"].map(function(t){return Ot(t)}),Pt=function(t,e){F(t,i,It);var r=rt(t,-1).get(t);r&&(r(t),G(t,Mt[e.event]),e.currentline>=0?C(t,e.currentline):B(t),xt.lua_assert(T(t,Ot(\"lS\"),e)),h(t,2,0))},Ct={gethook:function(t){var e=mt(t).thread,r=new Uint8Array(5),n=g(e),a=d(e);null===a?B(t):a!==Pt?V(t,\"external hook\"):(F(t,i,It),rt(t,-1).get(e)(t));return G(t,function(t,e){var r=0;return t&u&&(e[r++]=99),t&l&&(e[r++]=114),t&o&&(e[r++]=108),e.subarray(0,r)}(n,r)),C(t,A(e)),3},getinfo:function(t){var e=new v,r=mt(t),n=r.arg,a=r.thread,u=At(t,n+2,\"flnStu\");if(Et(t,a,3),N(t,n+1))u=P(t,Ot(\">%s\"),u),K(t,n+1),st(t,a,1);else if(!k(a,ft(t,n+1),e))return B(t),1;return T(a,u,e)||it(t,n+2,\"invalid option\"),S(t),kt(u,83)>-1&&(Ut(t,Ot(\"source\",!0),e.source),Ut(t,Ot(\"short_src\",!0),e.short_src),Nt(t,Ot(\"linedefined\",!0),e.linedefined),Nt(t,Ot(\"lastlinedefined\",!0),e.lastlinedefined),Ut(t,Ot(\"what\",!0),e.what)),kt(u,108)>-1&&Nt(t,Ot(\"currentline\",!0),e.currentline),kt(u,117)>-1&&(Nt(t,Ot(\"nups\",!0),e.nups),Nt(t,Ot(\"nparams\",!0),e.nparams),Rt(t,Ot(\"isvararg\",!0),e.isvararg)),kt(u,110)>-1&&(Ut(t,Ot(\"name\",!0),e.name),Ut(t,Ot(\"namewhat\",!0),e.namewhat)),kt(u,116)>-1&&Rt(t,Ot(\"istailcall\",!0),e.istailcall),kt(u,76)>-1&&yt(t,a,Ot(\"activelines\",!0)),kt(u,102)>-1&&yt(t,a,Ot(\"func\",!0)),1},getlocal:function(t){var e=mt(t),r=e.thread,n=e.arg,a=new v,u=ft(t,n+2);if(N(t,n+1))return K(t,n+1),G(t,x(t,null,u)),1;var s=ft(t,n+1);if(!k(r,s,a))return it(t,n+1,\"level out of range\");Et(t,r,1);var o=x(r,a,u);return o?(st(r,t,1),G(t,o),H(t,-2,1),2):(B(t),1)},getmetatable:function(t){return ct(t,1),b(t,1)||B(t),1},getregistry:function(t){return K(t,i),1},getupvalue:function(t){return St(t,1)},getuservalue:function(t){return nt(t,1)!==p?B(t):E(t,1),1},sethook:function(t){var e,r,n,a,_=mt(t),p=_.thread,v=_.arg;if(R(t,v+1))Z(t,v+1),n=null,e=0,r=0;else{var h=_t(t,v+2);pt(t,v+1,c),r=dt(t,v+3,0),n=Pt,e=function(t,e){var r=0;return kt(t,99)>-1&&(r|=u),kt(t,114)>-1&&(r|=l),kt(t,108)>-1&&(r|=o),e>0&&(r|=s),r}(h,r)}F(t,i,It)===f?(a=new WeakMap,D(t,a),j(t,i,It)):a=rt(t,-1);var L=$(t,v+1);return a.set(p,L),z(p,n,e,r),0},setlocal:function(t){var e=mt(t),r=e.thread,n=e.arg,a=new v,u=ft(t,n+1),s=ft(t,n+2);if(!k(r,u,a))return it(t,n+1,\"level out of range\");ct(t,n+3),Z(t,n+3),Et(t,r,1),st(t,r,1);var o=Y(r,a,s);return null===o&&I(r,1),G(t,o),1},setmetatable:function(t){var e=nt(t,2);return lt(t,e==f||e==_,2,\"nil or table expected\"),Z(t,2),J(t,1),1},setupvalue:function(t){return ct(t,3),St(t,0)},setuservalue:function(t){return pt(t,1,p),ct(t,2),Z(t,2),W(t,1),1},traceback:function(t){var e=mt(t),r=e.thread,n=e.arg,a=tt(t,n+1);if(null!==a||R(t,n+1)){var u=dt(t,n+2,t===r?1:0);gt(t,r,a,u)}else K(t,n+1);return 1},upvalueid:function(t){var e=wt(t,1,2);return D(t,at(t,1,e)),1},upvaluejoin:function(t){var e=wt(t,1,2),r=wt(t,3,4);return lt(t,!U(t,1),1,\"Lua function expected\"),lt(t,!U(t,3),3,\"Lua function expected\"),ut(t,1,e,3,r),0}};\"undefined\"!=typeof window&&(n=function(){var t=prompt(\"lua_debug>\",\"\");return null!==t?t:\"\"}),n&&(Ct.debug=function(t){for(;;){var e=n();if(\"cont\"===e)return 0;if(0!==e.length){var r=Ot(e);(ht(t,r,r.length,Ot(\"=(debug command)\",!0))||w(t,0,0,0))&&Tt(Q(t,-1),\"\\n\"),Z(t,0)}}});t.exports.luaopen_debug=function(t){return Lt(t,Ct),1}},function(t,e,r){\"use strict\";function n(t){return(n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}var a,u=r(3),s=u.LUA_DIRSEP,o=u.LUA_EXEC_DIR,l=u.LUA_JSPATH_DEFAULT,i=u.LUA_PATH_DEFAULT,c=u.LUA_PATH_MARK,f=u.LUA_PATH_SEP,_=r(2),p=_.LUA_OK,v=_.LUA_REGISTRYINDEX,h=_.LUA_TNIL,L=_.LUA_TTABLE,d=_.lua_callk,A=_.lua_createtable,g=_.lua_getfield,T=_.lua_insert,x=_.lua_isfunction,b=_.lua_isnil,k=_.lua_isstring,O=_.lua_newtable,E=_.lua_pop,m=_.lua_pushboolean,U=_.lua_pushcclosure,N=_.lua_pushcfunction,R=_.lua_pushfstring,y=_.lua_pushglobaltable,S=_.lua_pushlightuserdata,w=_.lua_pushliteral,I=_.lua_pushlstring,M=_.lua_pushnil,P=_.lua_pushstring,C=_.lua_pushvalue,D=_.lua_rawgeti,V=_.lua_rawgetp,B=_.lua_rawseti,G=_.lua_rawsetp,K=_.lua_remove,F=_.lua_setfield,j=_.lua_setmetatable,H=_.lua_settop,X=_.lua_toboolean,z=_.lua_tostring,Y=_.lua_touserdata,J=_.lua_upvalueindex,Z=r(7),q=Z.LUA_LOADED_TABLE,W=Z.LUA_PRELOAD_TABLE,Q=Z.luaL_Buffer,$=Z.luaL_addvalue,tt=Z.luaL_buffinit,et=Z.luaL_checkstring,rt=Z.luaL_error,nt=Z.luaL_getsubtable,at=Z.luaL_gsub,ut=Z.luaL_len,st=Z.luaL_loadfile,ot=Z.luaL_newlib,lt=Z.luaL_optstring,it=Z.luaL_pushresult,ct=Z.luaL_setfuncs,ft=r(17),_t=r(5),pt=_t.luastring_indexOf,vt=_t.to_jsstring,ht=_t.to_luastring,Lt=_t.to_uristring,dt=r(0),At=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:(0,eval)(\"this\"),gt=ht(\"__JSLIBS__\"),Tt=s,xt=s,bt=ht(\"luaopen_\"),kt=ht(\"_\"),Ot=ht(\"\1\");a=function(t,e,r){e=Lt(e);var a=new XMLHttpRequest;if(a.open(\"GET\",e,!1),a.send(),a.status<200||a.status>=300)return P(t,ht(\"\".concat(a.status,\": \").concat(a.statusText))),null;var u,s=a.response;/\\/\\/[#@] sourceURL=/.test(s)||(s+=\" //# sourceURL=\"+e);try{u=Function(\"fengari\",s)}catch(e){return P(t,ht(\"\".concat(e.name,\": \").concat(e.message))),null}var o=u(dt);return\"function\"==typeof o||\"object\"===n(o)&&null!==o?o:void 0===o?At:(P(t,ht(\"library returned unexpected type (\".concat(n(o),\")\"))),null)};var Et;Et=function(t){t=Lt(t);var e=new XMLHttpRequest;return e.open(\"GET\",t,!1),e.send(),e.status>=200&&e.status<=299};var mt=function(t,e,r){var n=Rt(t,e);if(null===n){if(null===(n=a(t,e,r[0]===\"*\".charCodeAt(0))))return 1;yt(t,e,n)}if(r[0]===\"*\".charCodeAt(0))return m(t,1),0;var u=function(t,e,r){var n=e[vt(r)];return n&&\"function\"==typeof n?n:(R(t,ht(\"undefined symbol: %s\"),r),null)}(t,n,r);return null===u?2:(N(t,u),0)},Ut=At,Nt=function(t,e,r,n){var a=\"\".concat(r).concat(ft.LUA_VERSUFFIX);P(t,ht(a));var u=Ut[a];void 0===u&&(u=Ut[r]),void 0===u||function(t){g(t,v,ht(\"LUA_NOENV\"));var e=X(t,-1);return E(t,1),e}(t)?P(t,n):(u=at(t,ht(u),ht(f+f,!0),ht(f+vt(Ot)+f,!0)),at(t,u,Ot,n),K(t,-2)),F(t,-3,e),E(t,1)},Rt=function(t,e){V(t,v,gt),g(t,-1,e);var r=Y(t,-1);return E(t,2),r},yt=function(t,e,r){V(t,v,gt),S(t,r),C(t,-1),F(t,-3,e),B(t,-2,ut(t,-2)+1),E(t,1)},St=function(t,e){for(;e[0]===f.charCodeAt(0);)e=e.subarray(1);if(0===e.length)return null;var r=pt(e,f.charCodeAt(0));return r<0&&(r=e.length),I(t,e,r),e.subarray(r)},wt=function(t,e,r,n,a){var u=new Q;for(tt(t,u),0!==n[0]&&(e=at(t,e,n,a));null!==(r=St(t,r));){var s=at(t,z(t,-1),ht(c,!0),e);if(K(t,-2),Et(s))return s;R(t,ht(\"\\n\\tno file '%s'\"),s),K(t,-2),$(u)}return it(u),null},It=function(t,e,r,n){g(t,J(1),r);var a=z(t,-1);return null===a&&rt(t,ht(\"'package.%s' must be a string\"),r),wt(t,e,a,ht(\".\"),n)},Mt=function(t,e,r){return e?(P(t,r),2):rt(t,ht(\"error loading module '%s' from file '%s':\\n\\t%s\"),z(t,1),r,z(t,-1))},Pt=function(t){var e=et(t,1),r=It(t,e,ht(\"path\",!0),ht(xt,!0));return null===r?1:Mt(t,st(t,r)===p,r)},Ct=function(t,e,r){var n;r=at(t,r,ht(\".\"),kt);var a=pt(r,\"-\".charCodeAt(0));if(a>=0){n=I(t,r,a),n=R(t,ht(\"%s%s\"),bt,n);var u=mt(t,e,n);if(2!==u)return u;r=a+1}return n=R(t,ht(\"%s%s\"),bt,r),mt(t,e,n)},Dt=function(t){var e=et(t,1),r=It(t,e,ht(\"jspath\",!0),ht(Tt,!0));return null===r?1:Mt(t,0===Ct(t,r,e),r)},Vt=function(t){var e,r=et(t,1),n=pt(r,\".\".charCodeAt(0));if(n<0)return 0;I(t,r,n);var a=It(t,z(t,-1),ht(\"jspath\",!0),ht(Tt,!0));return null===a?1:0!==(e=Ct(t,a,r))?2!=e?Mt(t,0,a):(P(t,ht(\"\\n\\tno module '%s' in file '%s'\"),r,a),1):(P(t,a),2)},Bt=function(t){var e=et(t,1);return g(t,v,W),g(t,-1,e)===h&&R(t,ht(\"\\n\\tno field package.preload['%s']\"),e),1},Gt=function t(e,r,n){for(;r===p?(D(e,3,n.i)===h&&(E(e,1),it(n.msg),rt(e,ht(\"module '%s' not found:%s\"),n.name,z(e,-1))),P(e,n.name),d(e,1,2,n,t)):r=p,!x(e,-2);n.i++)k(e,-2)?(E(e,1),$(n.msg)):E(e,2);return n.k(e,p,n.ctx)},Kt=function(t,e,r){return P(t,r),T(t,-2),d(t,2,1,r,Ft),Ft(t,p,r)},Ft=function(t,e,r){var n=r;return b(t,-1)||F(t,2,n),g(t,2,n)==h&&(m(t,1),C(t,-1),F(t,2,n)),1},jt={loadlib:function(t){var e=et(t,1),r=et(t,2),n=mt(t,e,r);return 0===n?1:(M(t),T(t,-2),w(t,1===n?\"open\":\"init\"),3)},searchpath:function(t){return null!==wt(t,et(t,1),et(t,2),lt(t,3,\".\"),lt(t,4,s))?1:(M(t),T(t,-2),2)}},Ht={require:function(t){var e=et(t,1);return H(t,1),g(t,v,q),g(t,2,e),X(t,-1)?1:(E(t,1),function(t,e,r,n){var a=new Q;return tt(t,a),g(t,J(1),ht(\"searchers\",!0))!==L&&rt(t,ht(\"'package.searchers' must be a table\")),Gt(t,p,{name:e,i:1,msg:a,ctx:r,k:n})}(t,e,e,Kt))}};t.exports.luaopen_package=function(t){return function(t){O(t),A(t,0,1),j(t,-2),G(t,v,gt)}(t),ot(t,jt),function(t){var e=[Bt,Pt,Dt,Vt,null];A(t);for(var r=0;e[r];r++)C(t,-2),U(t,e[r],1),B(t,-2,r+1);F(t,-2,ht(\"searchers\",!0))}(t),Nt(t,ht(\"path\",!0),\"LUA_PATH\",i),Nt(t,ht(\"jspath\",!0),\"LUA_JSPATH\",l),w(t,s+\"\\n\"+f+\"\\n\"+c+\"\\n\"+o+\"\\n-\\n\"),F(t,-2,ht(\"config\",!0)),nt(t,v,q),F(t,-2,ht(\"loaded\",!0)),nt(t,v,W),F(t,-2,ht(\"preload\",!0)),y(t),C(t,-2),ct(t,Ht,1),E(t,1),1}},function(t,e,r){var n=r(2),a=n.lua_pushinteger,u=n.lua_pushliteral,s=n.lua_setfield,o=r(7).luaL_newlib,l=r(5),i=l.FENGARI_AUTHORS,c=l.FENGARI_COPYRIGHT,f=l.FENGARI_RELEASE,_=l.FENGARI_VERSION,p=l.FENGARI_VERSION_MAJOR,v=l.FENGARI_VERSION_MINOR,h=l.FENGARI_VERSION_NUM,L=l.FENGARI_VERSION_RELEASE,d=l.to_luastring;t.exports.luaopen_fengari=function(t){return o(t,{}),u(t,i),s(t,-2,d(\"AUTHORS\")),u(t,c),s(t,-2,d(\"COPYRIGHT\")),u(t,f),s(t,-2,d(\"RELEASE\")),u(t,_),s(t,-2,d(\"VERSION\")),u(t,p),s(t,-2,d(\"VERSION_MAJOR\")),u(t,v),s(t,-2,d(\"VERSION_MINOR\")),a(t,h),s(t,-2,d(\"VERSION_NUM\")),u(t,L),s(t,-2,d(\"VERSION_RELEASE\")),1}},function(t,e,r){\"use strict\";r.r(e),r.d(e,\"L\",function(){return R}),r.d(e,\"load\",function(){return y});var n=r(0);r.d(e,\"FENGARI_AUTHORS\",function(){return n.FENGARI_AUTHORS}),r.d(e,\"FENGARI_COPYRIGHT\",function(){return n.FENGARI_COPYRIGHT}),r.d(e,\"FENGARI_RELEASE\",function(){return n.FENGARI_RELEASE}),r.d(e,\"FENGARI_VERSION\",function(){return n.FENGARI_VERSION}),r.d(e,\"FENGARI_VERSION_MAJOR\",function(){return n.FENGARI_VERSION_MAJOR}),r.d(e,\"FENGARI_VERSION_MINOR\",function(){return n.FENGARI_VERSION_MINOR}),r.d(e,\"FENGARI_VERSION_NUM\",function(){return n.FENGARI_VERSION_NUM}),r.d(e,\"FENGARI_VERSION_RELEASE\",function(){return n.FENGARI_VERSION_RELEASE}),r.d(e,\"luastring_eq\",function(){return n.luastring_eq}),r.d(e,\"luastring_indexOf\",function(){return n.luastring_indexOf}),r.d(e,\"luastring_of\",function(){return n.luastring_of}),r.d(e,\"to_jsstring\",function(){return n.to_jsstring}),r.d(e,\"to_luastring\",function(){return n.to_luastring}),r.d(e,\"to_uristring\",function(){return n.to_uristring}),r.d(e,\"lua\",function(){return n.lua}),r.d(e,\"lauxlib\",function(){return n.lauxlib}),r.d(e,\"lualib\",function(){return n.lualib});var a=r(18);r.d(e,\"interop\",function(){return a});var u=n.lua.LUA_ERRRUN,s=n.lua.LUA_ERRSYNTAX,o=n.lua.LUA_OK,l=n.lua.LUA_VERSION_MAJOR,i=n.lua.LUA_VERSION_MINOR,c=n.lua.lua_Debug,f=n.lua.lua_getinfo,_=n.lua.lua_getstack,p=n.lua.lua_gettop,v=n.lua.lua_insert,h=n.lua.lua_pcall,L=n.lua.lua_pop,d=n.lua.lua_pushcfunction,A=n.lua.lua_pushstring,g=n.lua.lua_remove,T=n.lua.lua_setglobal,x=n.lua.lua_tojsstring,b=n.lauxlib.luaL_loadbuffer,k=n.lauxlib.luaL_newstate,O=n.lauxlib.luaL_requiref,E=a.checkjs,m=a.luaopen_js,U=a.push,N=a.tojs,R=k();function y(t,e){if(\"string\"==typeof t)t=Object(n.to_luastring)(t);else if(!(t instanceof Uint8Array))throw new TypeError(\"expects an array of bytes or javascript string\");e=e?Object(n.to_luastring)(e):null;var r,a=b(R,t,null,e);if(r=a===s?new SyntaxError(x(R,-1)):N(R,-1),L(R,1),a!==o)throw r;return r}if(n.lualib.luaL_openlibs(R),O(R,Object(n.to_luastring)(\"js\"),m,1),L(R,1),A(R,Object(n.to_luastring)(n.FENGARI_COPYRIGHT)),T(R,Object(n.to_luastring)(\"_COPYRIGHT\")),\"undefined\"!=typeof document&&document instanceof HTMLDocument){var S=function(t){var e=new c;return _(t,2,e)&&f(t,Object(n.to_luastring)(\"Sl\"),e),U(t,new ErrorEvent(\"error\",{bubbles:!0,cancelable:!0,message:x(t,1),error:N(t,1),filename:e.short_src?Object(n.to_jsstring)(e.short_src):void 0,lineno:e.currentline>0?e.currentline:void 0})),1},w=function(t,e,r){var n,a=b(R,e,null,r);if(a===s){var l=x(R,-1),i=t.src?t.src:document.location,c=new SyntaxError(l,i,void 0);n=new ErrorEvent(\"error\",{message:l,error:c,filename:i,lineno:void 0})}else if(a===o){var f=p(R);d(R,S),v(R,f),Object.defineProperty(document,\"currentScript\",{value:t,configurable:!0}),a=h(R,0,0,f),delete document.currentScript,g(R,f),a===u&&(n=E(R,-1))}a!==o&&(void 0===n&&(n=new ErrorEvent(\"error\",{message:x(R,-1),error:N(R,-1)})),L(R,1),window.dispatchEvent(n)&&console.error(\"uncaught exception\",n.error))},I=function(t,e,r){if(t.status>=200&&t.status<300){var a=t.response;a=\"string\"==typeof a?Object(n.to_luastring)(t.response):new Uint8Array(a),w(e,a,r)}else e.dispatchEvent(new Event(\"error\"))},M=/^(.*?\\/.*?)([\\t ]*;.*)?$/,P=/^(\\d+)\\.(\\d+)$/,C=function(t){if(\"SCRIPT\"===t.tagName){var e=M.exec(t.type);if(e){var r=e[1];if(\"application/lua\"===r||\"text/lua\"===r){if(t.hasAttribute(\"lua-version\")){var a=P.exec(t.getAttribute(\"lua-version\"));if(!a||a[1]!==l||a[2]!==i)return}!function(t){if(t.src){var e=Object(n.to_luastring)(\"@\"+t.src);if(\"complete\"===document.readyState||t.async)if(\"function\"==typeof fetch)fetch(t.src,{method:\"GET\",credentials:function(t){switch(t){case\"anonymous\":return\"omit\";case\"use-credentials\":return\"include\";default:return\"same-origin\"}}(t.crossorigin),redirect:\"follow\",integrity:t.integrity}).then(function(t){if(t.ok)return t.arrayBuffer();throw new Error(\"unable to fetch\")}).then(function(r){var n=new Uint8Array(r);w(t,n,e)}).catch(function(e){t.dispatchEvent(new Event(\"error\"))});else{var r=new XMLHttpRequest;r.open(\"GET\",t.src,!0),r.responseType=\"arraybuffer\",r.onreadystatechange=function(){4===r.readyState&&I(r,t,e)},r.send()}else{var a=new XMLHttpRequest;a.open(\"GET\",t.src,!1),a.send(),I(a,t,e)}}else{var u=Object(n.to_luastring)(t.innerHTML),s=t.id?Object(n.to_luastring)(\"=\"+t.id):u;w(t,u,s)}}(t)}}}};\"undefined\"!=typeof MutationObserver?new MutationObserver(function(t,e){for(var r=0;r<t.length;r++)for(var n=t[r],a=0;a<n.addedNodes.length;a++)C(n.addedNodes[a])}).observe(document,{childList:!0,subtree:!0}):console.warn&&console.warn(\"fengari-web: MutationObserver not found; lua script tags will not be run when inserted\");Array.prototype.forEach.call(document.querySelectorAll('script[type^=\"application/lua\"], script[type^=\"text/lua\"]'),C)}},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_MULTRET,u=n.LUA_OPADD,s=n.LUA_OPBAND,o=n.LUA_OPBNOT,l=n.LUA_OPBOR,i=n.LUA_OPBXOR,c=n.LUA_OPDIV,f=n.LUA_OPIDIV,_=n.LUA_OPMOD,p=n.LUA_OPSHL,v=n.LUA_OPSHR,h=n.LUA_OPUNM,L=n.constant_types,d=L.LUA_TBOOLEAN,A=L.LUA_TLIGHTUSERDATA,g=L.LUA_TLNGSTR,T=L.LUA_TNIL,x=L.LUA_TNUMFLT,b=L.LUA_TNUMINT,k=L.LUA_TTABLE,O=n.to_luastring,E=r(4).lua_assert,m=r(21),U=r(6),N=r(16),R=r(23),y=r(9),S=r(15),w=N.OpCodesI,I=U.TValue,M={OPR_ADD:0,OPR_SUB:1,OPR_MUL:2,OPR_MOD:3,OPR_POW:4,OPR_DIV:5,OPR_IDIV:6,OPR_BAND:7,OPR_BOR:8,OPR_BXOR:9,OPR_SHL:10,OPR_SHR:11,OPR_CONCAT:12,OPR_EQ:13,OPR_LT:14,OPR_LE:15,OPR_NE:16,OPR_GT:17,OPR_GE:18,OPR_AND:19,OPR_OR:20,OPR_NOBINOPR:21},P={OPR_MINUS:0,OPR_BNOT:1,OPR_NOT:2,OPR_LEN:3,OPR_NOUNOPR:4},C=function(t){return t.t!==t.f},D=function(t,e){var r=R.expkind;if(C(t))return!1;switch(t.k){case r.VKINT:return!e||new I(b,t.u.ival);case r.VKFLT:return!e||new I(x,t.u.nval);default:return!1}},V=function(t,e,r){var n,a=e+r-1;if(t.pc>t.lasttarget&&(n=t.f.code[t.pc-1]).opcode===w.OP_LOADNIL){var u=n.A,s=u+n.B;if(u<=e&&e<=s+1||e<=u&&u<=a+1)return u<e&&(e=u),s>a&&(a=s),N.SETARG_A(n,e),void N.SETARG_B(n,a-e)}tt(t,w.OP_LOADNIL,e,r-1,0)},B=function(t,e){return t.f.code[e.u.info]},G=function(t,e){var r=t.f.code[e].sBx;return-1===r?-1:e+1+r},K=function(t,e,r){var n=t.f.code[e],a=r-(e+1);E(-1!==r),Math.abs(a)>N.MAXARG_sBx&&m.luaX_syntaxerror(t.ls,O(\"control structure too long\",!0)),N.SETARG_sBx(n,a)},F=function(t,e,r){if(-1===r)return e;if(-1===e)e=r;else{for(var n=e,a=G(t,n);-1!==a;)a=G(t,n=a);K(t,n,r)}return e},j=function(t){var e=t.jpc;t.jpc=-1;var r=rt(t,w.OP_JMP,0,-1);return r=F(t,r,e)},H=function(t,e,r,n,a){return tt(t,e,r,n,a),j(t)},X=function(t){return t.lasttarget=t.pc,t.pc},z=function(t,e){return e>=1&&N.testTMode(t.f.code[e-1].opcode)?e-1:e},Y=function(t,e){return t.f.code[z(t,e)]},J=function(t,e,r){var n=z(t,e),a=t.f.code[n];return a.opcode===w.OP_TESTSET&&(r!==N.NO_REG&&r!==a.B?N.SETARG_A(a,r):t.f.code[n]=N.CREATE_ABC(w.OP_TEST,a.B,0,a.C),!0)},Z=function(t,e){for(;-1!==e;e=G(t,e))J(t,e,N.NO_REG)},q=function(t,e,r,n,a){for(;-1!==e;){var u=G(t,e);J(t,e,n)?K(t,e,r):K(t,e,a),e=u}},W=function(t,e){X(t),t.jpc=F(t,t.jpc,e)},Q=function(t,e,r){r===t.pc?W(t,e):(E(r<t.pc),q(t,e,r,N.NO_REG,r))},$=function(t,e){var r=t.f;return function(t){q(t,t.jpc,t.pc,N.NO_REG,t.pc),t.jpc=-1}(t),r.code[t.pc]=e,r.lineinfo[t.pc]=t.ls.lastline,t.pc++},tt=function(t,e,r,n,a){return E(N.getOpMode(e)===N.iABC),E(N.getBMode(e)!==N.OpArgN||0===n),E(N.getCMode(e)!==N.OpArgN||0===a),E(r<=N.MAXARG_A&&n<=N.MAXARG_B&&a<=N.MAXARG_C),$(t,N.CREATE_ABC(e,r,n,a))},et=function(t,e,r,n){return E(N.getOpMode(e)===N.iABx||N.getOpMode(e)===N.iAsBx),E(N.getCMode(e)===N.OpArgN),E(r<=N.MAXARG_A&&n<=N.MAXARG_Bx),$(t,N.CREATE_ABx(e,r,n))},rt=function(t,e,r,n){return et(t,e,r,n+N.MAXARG_sBx)},nt=function(t,e){return E(e<=N.MAXARG_Ax),$(t,N.CREATE_Ax(w.OP_EXTRAARG,e))},at=function(t,e,r){if(r<=N.MAXARG_Bx)return et(t,w.OP_LOADK,e,r);var n=et(t,w.OP_LOADKX,e,0);return nt(t,r),n},ut=function(t,e){var r=t.freereg+e;r>t.f.maxstacksize&&(r>=255&&m.luaX_syntaxerror(t.ls,O(\"function or expression needs too many registers\",!0)),t.f.maxstacksize=r)},st=function(t,e){ut(t,e),t.freereg+=e},ot=function(t,e){!N.ISK(e)&&e>=t.nactvar&&(t.freereg--,E(e===t.freereg))},lt=function(t,e){e.k===R.expkind.VNONRELOC&&ot(t,e.u.info)},it=function(t,e,r){var n=e.k===R.expkind.VNONRELOC?e.u.info:-1,a=r.k===R.expkind.VNONRELOC?r.u.info:-1;n>a?(ot(t,n),ot(t,a)):(ot(t,a),ot(t,n))},ct=function(t,e,r){var n=t.f,a=y.luaH_get(t.L,t.ls.h,e);if(a.ttisinteger()){var u=a.value;if(u<t.nk&&n.k[u].ttype()===r.ttype()&&n.k[u].value===r.value)return u}var s=t.nk;return y.luaH_setfrom(t.L,t.ls.h,e,new U.TValue(b,s)),n.k[s]=r,t.nk++,s},ft=function(t,e){var r=new I(A,e),n=new I(b,e);return ct(t,r,n)},_t=function(t,e){var r=new I(x,e);return ct(t,r,r)},pt=function(t,e){var r=new I(d,e);return ct(t,r,r)},vt=function(t,e,r){var n=R.expkind;if(e.k===n.VCALL)N.SETARG_C(B(t,e),r+1);else if(e.k===n.VVARARG){var u=B(t,e);N.SETARG_B(u,r+1),N.SETARG_A(u,t.freereg),st(t,1)}else E(r===a)},ht=function(t,e){var r=R.expkind;e.k===r.VCALL?(E(2===B(t,e).C),e.k=r.VNONRELOC,e.u.info=B(t,e).A):e.k===r.VVARARG&&(N.SETARG_B(B(t,e),2),e.k=r.VRELOCABLE)},Lt=function(t,e){var r=R.expkind;switch(e.k){case r.VLOCAL:e.k=r.VNONRELOC;break;case r.VUPVAL:e.u.info=tt(t,w.OP_GETUPVAL,0,e.u.info,0),e.k=r.VRELOCABLE;break;case r.VINDEXED:var n;ot(t,e.u.ind.idx),e.u.ind.vt===r.VLOCAL?(ot(t,e.u.ind.t),n=w.OP_GETTABLE):(E(e.u.ind.vt===r.VUPVAL),n=w.OP_GETTABUP),e.u.info=tt(t,n,0,e.u.ind.t,e.u.ind.idx),e.k=r.VRELOCABLE;break;case r.VVARARG:case r.VCALL:ht(t,e)}},dt=function(t,e,r,n){return X(t),tt(t,w.OP_LOADBOOL,e,r,n)},At=function(t,e,r){var n=R.expkind;switch(Lt(t,e),e.k){case n.VNIL:V(t,r,1);break;case n.VFALSE:case n.VTRUE:tt(t,w.OP_LOADBOOL,r,e.k===n.VTRUE,0);break;case n.VK:at(t,r,e.u.info);break;case n.VKFLT:at(t,r,_t(t,e.u.nval));break;case n.VKINT:at(t,r,ft(t,e.u.ival));break;case n.VRELOCABLE:var a=B(t,e);N.SETARG_A(a,r);break;case n.VNONRELOC:r!==e.u.info&&tt(t,w.OP_MOVE,r,e.u.info,0);break;default:return void E(e.k===n.VJMP)}e.u.info=r,e.k=n.VNONRELOC},gt=function(t,e){e.k!==R.expkind.VNONRELOC&&(st(t,1),At(t,e,t.freereg-1))},Tt=function(t,e){for(;-1!==e;e=G(t,e)){if(Y(t,e).opcode!==w.OP_TESTSET)return!0}return!1},xt=function(t,e,r){var n=R.expkind;if(At(t,e,r),e.k===n.VJMP&&(e.t=F(t,e.t,e.u.info)),C(e)){var a,u=-1,s=-1;if(Tt(t,e.t)||Tt(t,e.f)){var o=e.k===n.VJMP?-1:j(t);u=dt(t,r,0,1),s=dt(t,r,1,0),W(t,o)}a=X(t),q(t,e.f,a,r,u),q(t,e.t,a,r,s)}e.f=e.t=-1,e.u.info=r,e.k=n.VNONRELOC},bt=function(t,e){Lt(t,e),lt(t,e),st(t,1),xt(t,e,t.freereg-1)},kt=function(t,e){if(Lt(t,e),e.k===R.expkind.VNONRELOC){if(!C(e))return e.u.info;if(e.u.info>=t.nactvar)return xt(t,e,e.u.info),e.u.info}return bt(t,e),e.u.info},Ot=function(t,e){C(e)?kt(t,e):Lt(t,e)},Et=function(t,e){var r=R.expkind,n=!1;switch(Ot(t,e),e.k){case r.VTRUE:e.u.info=pt(t,!0),n=!0;break;case r.VFALSE:e.u.info=pt(t,!1),n=!0;break;case r.VNIL:e.u.info=function(t){var e=new I(T,null),r=new I(k,t.ls.h);return ct(t,r,e)}(t),n=!0;break;case r.VKINT:e.u.info=ft(t,e.u.ival),n=!0;break;case r.VKFLT:e.u.info=_t(t,e.u.nval),n=!0;break;case r.VK:n=!0}return n&&(e.k=r.VK,e.u.info<=N.MAXINDEXRK)?N.RKASK(e.u.info):kt(t,e)},mt=function(t,e){var r=Y(t,e.u.info);E(N.testTMode(r.opcode)&&r.opcode!==w.OP_TESTSET&&r.opcode!==w.OP_TEST),N.SETARG_A(r,!r.A)},Ut=function(t,e,r){if(e.k===R.expkind.VRELOCABLE){var n=B(t,e);if(n.opcode===w.OP_NOT)return t.pc--,H(t,w.OP_TEST,n.B,0,!r)}return gt(t,e),lt(t,e),H(t,w.OP_TESTSET,N.NO_REG,e.u.info,r)},Nt=function(t,e){var r,n=R.expkind;switch(Lt(t,e),e.k){case n.VJMP:mt(t,e),r=e.u.info;break;case n.VK:case n.VKFLT:case n.VKINT:case n.VTRUE:r=-1;break;default:r=Ut(t,e,0)}e.f=F(t,e.f,r),W(t,e.t),e.t=-1},Rt=function(t,e){var r,n=R.expkind;switch(Lt(t,e),e.k){case n.VJMP:r=e.u.info;break;case n.VNIL:case n.VFALSE:r=-1;break;default:r=Ut(t,e,1)}e.t=F(t,e.t,r),W(t,e.f),e.f=-1},yt=function(t,e,r){var n,a,u=R.expkind;if(!(n=D(e,!0))||!(a=D(r,!0))||!function(t,e,r){switch(t){case s:case l:case i:case p:case v:case o:return!1!==S.tointeger(e)&&!1!==S.tointeger(r);case c:case f:case _:return 0!==r.value;default:return 1}}(t,n,a))return 0;var h=new I;if(U.luaO_arith(null,t,n,a,h),h.ttisinteger())e.k=u.VKINT,e.u.ival=h.value;else{var L=h.value;if(isNaN(L)||0===L)return!1;e.k=u.VKFLT,e.u.nval=L}return!0},St=function(t,e,r,n,a){var u=Et(t,n),s=Et(t,r);it(t,r,n),r.u.info=tt(t,e,0,s,u),r.k=R.expkind.VRELOCABLE,wt(t,a)},wt=function(t,e){t.f.lineinfo[t.pc-1]=e};t.exports.BinOpr=M,t.exports.NO_JUMP=-1,t.exports.UnOpr=P,t.exports.getinstruction=B,t.exports.luaK_checkstack=ut,t.exports.luaK_code=$,t.exports.luaK_codeABC=tt,t.exports.luaK_codeABx=et,t.exports.luaK_codeAsBx=rt,t.exports.luaK_codek=at,t.exports.luaK_concat=F,t.exports.luaK_dischargevars=Lt,t.exports.luaK_exp2RK=Et,t.exports.luaK_exp2anyreg=kt,t.exports.luaK_exp2anyregup=function(t,e){(e.k!==R.expkind.VUPVAL||C(e))&&kt(t,e)},t.exports.luaK_exp2nextreg=bt,t.exports.luaK_exp2val=Ot,t.exports.luaK_fixline=wt,t.exports.luaK_getlabel=X,t.exports.luaK_goiffalse=Rt,t.exports.luaK_goiftrue=Nt,t.exports.luaK_indexed=function(t,e,r){var n=R.expkind;E(!C(e)&&(R.vkisinreg(e.k)||e.k===n.VUPVAL)),e.u.ind.t=e.u.info,e.u.ind.idx=Et(t,r),e.u.ind.vt=e.k===n.VUPVAL?n.VUPVAL:n.VLOCAL,e.k=n.VINDEXED},t.exports.luaK_infix=function(t,e,r){switch(e){case M.OPR_AND:Nt(t,r);break;case M.OPR_OR:Rt(t,r);break;case M.OPR_CONCAT:bt(t,r);break;case M.OPR_ADD:case M.OPR_SUB:case M.OPR_MUL:case M.OPR_DIV:case M.OPR_IDIV:case M.OPR_MOD:case M.OPR_POW:case M.OPR_BAND:case M.OPR_BOR:case M.OPR_BXOR:case M.OPR_SHL:case M.OPR_SHR:D(r,!1)||Et(t,r);break;default:Et(t,r)}},t.exports.luaK_intK=ft,t.exports.luaK_jump=j,t.exports.luaK_jumpto=function(t,e){return Q(t,j(t),e)},t.exports.luaK_nil=V,t.exports.luaK_numberK=_t,t.exports.luaK_patchclose=function(t,e,r){for(r++;-1!==e;e=G(t,e)){var n=t.f.code[e];E(n.opcode===w.OP_JMP&&(0===n.A||n.A>=r)),N.SETARG_A(n,r)}},t.exports.luaK_patchlist=Q,t.exports.luaK_patchtohere=W,t.exports.luaK_posfix=function(t,e,r,n,a){var s=R.expkind;switch(e){case M.OPR_AND:E(-1===r.t),Lt(t,n),n.f=F(t,n.f,r.f),r.to(n);break;case M.OPR_OR:E(-1===r.f),Lt(t,n),n.t=F(t,n.t,r.t),r.to(n);break;case M.OPR_CONCAT:Ot(t,n);var o=B(t,n);n.k===s.VRELOCABLE&&o.opcode===w.OP_CONCAT?(E(r.u.info===o.B-1),lt(t,r),N.SETARG_B(o,r.u.info),r.k=s.VRELOCABLE,r.u.info=n.u.info):(bt(t,n),St(t,w.OP_CONCAT,r,n,a));break;case M.OPR_ADD:case M.OPR_SUB:case M.OPR_MUL:case M.OPR_DIV:case M.OPR_IDIV:case M.OPR_MOD:case M.OPR_POW:case M.OPR_BAND:case M.OPR_BOR:case M.OPR_BXOR:case M.OPR_SHL:case M.OPR_SHR:yt(e+u,r,n)||St(t,e+w.OP_ADD,r,n,a);break;case M.OPR_EQ:case M.OPR_LT:case M.OPR_LE:case M.OPR_NE:case M.OPR_GT:case M.OPR_GE:!function(t,e,r,n){var a,u=R.expkind;r.k===u.VK?a=N.RKASK(r.u.info):(E(r.k===u.VNONRELOC),a=r.u.info);var s=Et(t,n);switch(it(t,r,n),e){case M.OPR_NE:r.u.info=H(t,w.OP_EQ,0,a,s);break;case M.OPR_GT:case M.OPR_GE:var o=e-M.OPR_NE+w.OP_EQ;r.u.info=H(t,o,1,s,a);break;default:var l=e-M.OPR_EQ+w.OP_EQ;r.u.info=H(t,l,1,a,s)}r.k=u.VJMP}(t,e,r,n)}return r},t.exports.luaK_prefix=function(t,e,r,n){var a=new R.expdesc;switch(a.k=R.expkind.VKINT,a.u.ival=a.u.nval=a.u.info=0,a.t=-1,a.f=-1,e){case P.OPR_MINUS:case P.OPR_BNOT:if(yt(e+h,r,a))break;case P.OPR_LEN:!function(t,e,r,n){var a=kt(t,r);lt(t,r),r.u.info=tt(t,e,0,a,0),r.k=R.expkind.VRELOCABLE,wt(t,n)}(t,e+w.OP_UNM,r,n);break;case P.OPR_NOT:!function(t,e){var r=R.expkind;switch(Lt(t,e),e.k){case r.VNIL:case r.VFALSE:e.k=r.VTRUE;break;case r.VK:case r.VKFLT:case r.VKINT:case r.VTRUE:e.k=r.VFALSE;break;case r.VJMP:mt(t,e);break;case r.VRELOCABLE:case r.VNONRELOC:gt(t,e),lt(t,e),e.u.info=tt(t,w.OP_NOT,0,e.u.info,0),e.k=r.VRELOCABLE}var n=e.f;e.f=e.t,e.t=n,Z(t,e.f),Z(t,e.t)}(t,r)}},t.exports.luaK_reserveregs=st,t.exports.luaK_ret=function(t,e,r){tt(t,w.OP_RETURN,e,r+1,0)},t.exports.luaK_self=function(t,e,r){kt(t,e);var n=e.u.info;lt(t,e),e.u.info=t.freereg,e.k=R.expkind.VNONRELOC,st(t,2),tt(t,w.OP_SELF,e.u.info,n,Et(t,r)),lt(t,r)},t.exports.luaK_setlist=function(t,e,r,n){var u=(r-1)/N.LFIELDS_PER_FLUSH+1,s=n===a?0:n;E(0!==n&&n<=N.LFIELDS_PER_FLUSH),u<=N.MAXARG_C?tt(t,w.OP_SETLIST,e,s,u):u<=N.MAXARG_Ax?(tt(t,w.OP_SETLIST,e,s,0),nt(t,u)):m.luaX_syntaxerror(t.ls,O(\"constructor too long\",!0)),t.freereg=e+1},t.exports.luaK_setmultret=function(t,e){vt(t,e,a)},t.exports.luaK_setoneret=ht,t.exports.luaK_setreturns=vt,t.exports.luaK_storevar=function(t,e,r){var n=R.expkind;switch(e.k){case n.VLOCAL:return lt(t,r),void xt(t,r,e.u.info);case n.VUPVAL:var a=kt(t,r);tt(t,w.OP_SETUPVAL,a,e.u.info,0);break;case n.VINDEXED:var u=e.u.ind.vt===n.VLOCAL?w.OP_SETTABLE:w.OP_SETTABUP,s=Et(t,r);tt(t,u,e.u.ind.t,e.u.ind.idx,s)}lt(t,r)},t.exports.luaK_stringK=function(t,e){var r=new I(g,e);return ct(t,r,r)}},function(t,e,r){\"use strict\";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=r(1),u=a.LUA_SIGNATURE,s=a.constant_types,o=s.LUA_TBOOLEAN,l=s.LUA_TLNGSTR,i=s.LUA_TNIL,c=s.LUA_TNUMFLT,f=s.LUA_TNUMINT,_=s.LUA_TSHRSTR,p=a.thread_status.LUA_ERRSYNTAX,v=a.is_luastring,h=a.luastring_eq,L=a.to_luastring,d=r(8),A=r(13),g=r(6),T=r(16),x=T.MAXARG_sBx,b=T.POS_A,k=T.POS_Ax,O=T.POS_B,E=T.POS_Bx,m=T.POS_C,U=T.POS_OP,N=T.SIZE_A,R=T.SIZE_Ax,y=T.SIZE_B,S=T.SIZE_Bx,w=T.SIZE_C,I=T.SIZE_OP,M=r(4).lua_assert,P=r(10).luaS_bless,C=r(20),D=C.luaZ_read,V=C.ZIO,B=[25,147,13,10,26,10],G=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.intSize=4,this.size_tSize=4,this.instructionSize=4,this.integerSize=4,this.numberSize=8,M(r instanceof V,\"BytecodeParser only operates on a ZIO\"),M(v(n)),64===n[0]||61===n[0]?this.name=n.subarray(1):n[0]==u[0]?this.name=L(\"binary string\",!0):this.name=n,this.L=e,this.Z=r,this.arraybuffer=new ArrayBuffer(Math.max(this.intSize,this.size_tSize,this.instructionSize,this.integerSize,this.numberSize)),this.dv=new DataView(this.arraybuffer),this.u8=new Uint8Array(this.arraybuffer)}return function(t,e,r){e&&n(t.prototype,e),r&&n(t,r)}(t,[{key:\"read\",value:function(t){var e=new Uint8Array(t);return 0!==D(this.Z,e,0,t)&&this.error(\"truncated\"),e}},{key:\"LoadByte\",value:function(){return 0!==D(this.Z,this.u8,0,1)&&this.error(\"truncated\"),this.u8[0]}},{key:\"LoadInt\",value:function(){return 0!==D(this.Z,this.u8,0,this.intSize)&&this.error(\"truncated\"),this.dv.getInt32(0,!0)}},{key:\"LoadNumber\",value:function(){return 0!==D(this.Z,this.u8,0,this.numberSize)&&this.error(\"truncated\"),this.dv.getFloat64(0,!0)}},{key:\"LoadInteger\",value:function(){return 0!==D(this.Z,this.u8,0,this.integerSize)&&this.error(\"truncated\"),this.dv.getInt32(0,!0)}},{key:\"LoadSize_t\",value:function(){return this.LoadInteger()}},{key:\"LoadString\",value:function(){var t=this.LoadByte();return 255===t&&(t=this.LoadSize_t()),0===t?null:P(this.L,this.read(t-1))}},{key:\"LoadCode\",value:function(e){for(var r=this.LoadInt(),n=t,a=0;a<r;a++){0!==D(this.Z,this.u8,0,this.instructionSize)&&this.error(\"truncated\");var u=this.dv.getUint32(0,!0);e.code[a]={code:u,opcode:u>>U&n.MASK1(I,0),A:u>>b&n.MASK1(N,0),B:u>>O&n.MASK1(y,0),C:u>>m&n.MASK1(w,0),Bx:u>>E&n.MASK1(S,0),Ax:u>>k&n.MASK1(R,0),sBx:(u>>E&n.MASK1(S,0))-x}}}},{key:\"LoadConstants\",value:function(t){for(var e=this.LoadInt(),r=0;r<e;r++){var n=this.LoadByte();switch(n){case i:t.k.push(new g.TValue(i,null));break;case o:t.k.push(new g.TValue(o,0!==this.LoadByte()));break;case c:t.k.push(new g.TValue(c,this.LoadNumber()));break;case f:t.k.push(new g.TValue(f,this.LoadInteger()));break;case _:case l:t.k.push(new g.TValue(l,this.LoadString()));break;default:this.error(\"unrecognized constant '\".concat(n,\"'\"))}}}},{key:\"LoadProtos\",value:function(t){for(var e=this.LoadInt(),r=0;r<e;r++)t.p[r]=new A.Proto(this.L),this.LoadFunction(t.p[r],t.source)}},{key:\"LoadUpvalues\",value:function(t){for(var e=this.LoadInt(),r=0;r<e;r++)t.upvalues[r]={name:null,instack:this.LoadByte(),idx:this.LoadByte()}}},{key:\"LoadDebug\",value:function(t){for(var e=this.LoadInt(),r=0;r<e;r++)t.lineinfo[r]=this.LoadInt();e=this.LoadInt();for(var n=0;n<e;n++)t.locvars[n]={varname:this.LoadString(),startpc:this.LoadInt(),endpc:this.LoadInt()};e=this.LoadInt();for(var a=0;a<e;a++)t.upvalues[a].name=this.LoadString()}},{key:\"LoadFunction\",value:function(t,e){t.source=this.LoadString(),null===t.source&&(t.source=e),t.linedefined=this.LoadInt(),t.lastlinedefined=this.LoadInt(),t.numparams=this.LoadByte(),t.is_vararg=0!==this.LoadByte(),t.maxstacksize=this.LoadByte(),this.LoadCode(t),this.LoadConstants(t),this.LoadUpvalues(t),this.LoadProtos(t),this.LoadDebug(t)}},{key:\"checkliteral\",value:function(t,e){var r=this.read(t.length);h(r,t)||this.error(e)}},{key:\"checkHeader\",value:function(){this.checkliteral(u.subarray(1),\"not a\"),83!==this.LoadByte()&&this.error(\"version mismatch in\"),0!==this.LoadByte()&&this.error(\"format mismatch in\"),this.checkliteral(B,\"corrupted\"),this.intSize=this.LoadByte(),this.size_tSize=this.LoadByte(),this.instructionSize=this.LoadByte(),this.integerSize=this.LoadByte(),this.numberSize=this.LoadByte(),this.checksize(this.intSize,4,\"int\"),this.checksize(this.size_tSize,4,\"size_t\"),this.checksize(this.instructionSize,4,\"instruction\"),this.checksize(this.integerSize,4,\"integer\"),this.checksize(this.numberSize,8,\"number\"),22136!==this.LoadInteger()&&this.error(\"endianness mismatch in\"),370.5!==this.LoadNumber()&&this.error(\"float format mismatch in\")}},{key:\"error\",value:function(t){g.luaO_pushfstring(this.L,L(\"%s: %s precompiled chunk\"),this.name,L(t)),d.luaD_throw(this.L,p)}},{key:\"checksize\",value:function(t,e,r){t!==e&&this.error(\"\".concat(r,\" size mismatch in\"))}}],[{key:\"MASK1\",value:function(t,e){return~(-1<<t)<<e}}]),t}();t.exports.luaU_undump=function(t,e,r){var n=new G(t,e,r);n.checkHeader();var a=A.luaF_newLclosure(t,n.LoadByte());return d.luaD_inctop(t),t.stack[t.top-1].setclLvalue(a),a.p=new A.Proto(t),n.LoadFunction(a.p,null),M(a.nupvalues===a.p.upvalues.length),a}},function(t,e,r){\"use strict\";var n=r(1),a=n.LUA_SIGNATURE,u=n.LUA_VERSION_MAJOR,s=n.LUA_VERSION_MINOR,o=n.constant_types,l=o.LUA_TBOOLEAN,i=o.LUA_TLNGSTR,c=o.LUA_TNIL,f=o.LUA_TNUMFLT,_=o.LUA_TNUMINT,p=o.LUA_TSHRSTR,v=n.luastring_of,h=v(25,147,13,10,26,10),L=16*Number(u)+Number(s),d=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.L=null,this.write=null,this.data=null,this.strip=NaN,this.status=NaN},A=function(t,e,r){0===r.status&&e>0&&(r.status=r.writer(r.L,t,e,r.data))},g=function(t,e){A(v(t),1,e)},T=function(t,e){var r=new ArrayBuffer(4);new DataView(r).setInt32(0,t,!0);var n=new Uint8Array(r);A(n,4,e)},x=function(t,e){var r=new ArrayBuffer(4);new DataView(r).setInt32(0,t,!0);var n=new Uint8Array(r);A(n,4,e)},b=function(t,e){var r=new ArrayBuffer(8);new DataView(r).setFloat64(0,t,!0);var n=new Uint8Array(r);A(n,8,e)},k=function(t,e){if(null===t)g(0,e);else{var r=t.tsslen()+1,n=t.getstr();r<255?g(r,e):(g(255,e),x(r,e)),A(n,r-1,e)}},O=function(t,e){var r=t.p.length;T(r,e);for(var n=0;n<r;n++)E(t.p[n],t.source,e)},E=function(t,e,r){r.strip||t.source===e?k(null,r):k(t.source,r),T(t.linedefined,r),T(t.lastlinedefined,r),g(t.numparams,r),g(t.is_vararg?1:0,r),g(t.maxstacksize,r),function(t,e){var r=t.code.map(function(t){return t.code});T(r.length,e);for(var n=0;n<r.length;n++)T(r[n],e)}(t,r),function(t,e){var r=t.k.length;T(r,e);for(var n=0;n<r;n++){var a=t.k[n];switch(g(a.ttype(),e),a.ttype()){case c:break;case l:g(a.value?1:0,e);break;case f:b(a.value,e);break;case _:x(a.value,e);break;case p:case i:k(a.tsvalue(),e)}}}(t,r),function(t,e){var r=t.upvalues.length;T(r,e);for(var n=0;n<r;n++)g(t.upvalues[n].instack?1:0,e),g(t.upvalues[n].idx,e)}(t,r),O(t,r),function(t,e){var r=e.strip?0:t.lineinfo.length;T(r,e);for(var n=0;n<r;n++)T(t.lineinfo[n],e);r=e.strip?0:t.locvars.length,T(r,e);for(var a=0;a<r;a++)k(t.locvars[a].varname,e),T(t.locvars[a].startpc,e),T(t.locvars[a].endpc,e);r=e.strip?0:t.upvalues.length,T(r,e);for(var u=0;u<r;u++)k(t.upvalues[u].name,e)}(t,r)};t.exports.luaU_dump=function(t,e,r,n,u){var s=new d;return s.L=t,s.writer=r,s.data=n,s.strip=u,s.status=0,function(t){A(a,a.length,t),g(L,t),g(0,t),A(h,h.length,t),g(4,t),g(4,t),g(4,t),g(4,t),g(8,t),x(22136,t),b(370.5,t)}(s),g(e.upvalues.length,s),E(e,null,s),s.status}},function(t,e,r){var n;!function(){\"use strict\";var a={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\\x25]+/,modulo:/^\\x25{2}/,placeholder:/^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\\d]*)/i,key_access:/^\\.([a-z_][a-z_\\d]*)/i,index_access:/^\\[(\\d+)\\]/,sign:/^[\\+\\-]/};function u(t){return function(t,e){var r,n,s,o,l,i,c,f,_,p=1,v=t.length,h=\"\";for(n=0;n<v;n++)if(\"string\"==typeof t[n])h+=t[n];else if(Array.isArray(t[n])){if((o=t[n])[2])for(r=e[p],s=0;s<o[2].length;s++){if(!r.hasOwnProperty(o[2][s]))throw new Error(u('[sprintf] property \"%s\" does not exist',o[2][s]));r=r[o[2][s]]}else r=o[1]?e[o[1]]:e[p++];if(a.not_type.test(o[8])&&a.not_primitive.test(o[8])&&r instanceof Function&&(r=r()),a.numeric_arg.test(o[8])&&\"number\"!=typeof r&&isNaN(r))throw new TypeError(u(\"[sprintf] expecting number but found %T\",r));switch(a.number.test(o[8])&&(f=r>=0),o[8]){case\"b\":r=parseInt(r,10).toString(2);break;case\"c\":r=String.fromCharCode(parseInt(r,10));break;case\"d\":case\"i\":r=parseInt(r,10);break;case\"j\":r=JSON.stringify(r,null,o[6]?parseInt(o[6]):0);break;case\"e\":r=o[7]?parseFloat(r).toExponential(o[7]):parseFloat(r).toExponential();break;case\"f\":r=o[7]?parseFloat(r).toFixed(o[7]):parseFloat(r);break;case\"g\":r=o[7]?String(Number(r.toPrecision(o[7]))):parseFloat(r);break;case\"o\":r=(parseInt(r,10)>>>0).toString(8);break;case\"s\":r=String(r),r=o[7]?r.substring(0,o[7]):r;break;case\"t\":r=String(!!r),r=o[7]?r.substring(0,o[7]):r;break;case\"T\":r=Object.prototype.toString.call(r).slice(8,-1).toLowerCase(),r=o[7]?r.substring(0,o[7]):r;break;case\"u\":r=parseInt(r,10)>>>0;break;case\"v\":r=r.valueOf(),r=o[7]?r.substring(0,o[7]):r;break;case\"x\":r=(parseInt(r,10)>>>0).toString(16);break;case\"X\":r=(parseInt(r,10)>>>0).toString(16).toUpperCase()}a.json.test(o[8])?h+=r:(!a.number.test(o[8])||f&&!o[3]?_=\"\":(_=f?\"+\":\"-\",r=r.toString().replace(a.sign,\"\")),i=o[4]?\"0\"===o[4]?\"0\":o[4].charAt(1):\" \",c=o[6]-(_+r).length,l=o[6]&&c>0?i.repeat(c):\"\",h+=o[5]?_+r+l:\"0\"===i?_+l+r:l+_+r)}return h}(function(t){if(o[t])return o[t];var e,r=t,n=[],u=0;for(;r;){if(null!==(e=a.text.exec(r)))n.push(e[0]);else if(null!==(e=a.modulo.exec(r)))n.push(\"%\");else{if(null===(e=a.placeholder.exec(r)))throw new SyntaxError(\"[sprintf] unexpected placeholder\");if(e[2]){u|=1;var s=[],l=e[2],i=[];if(null===(i=a.key.exec(l)))throw new SyntaxError(\"[sprintf] failed to parse named argument key\");for(s.push(i[1]);\"\"!==(l=l.substring(i[0].length));)if(null!==(i=a.key_access.exec(l)))s.push(i[1]);else{if(null===(i=a.index_access.exec(l)))throw new SyntaxError(\"[sprintf] failed to parse named argument key\");s.push(i[1])}e[2]=s}else u|=2;if(3===u)throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\");n.push(e)}r=r.substring(e[0].length)}return o[t]=n}(t),arguments)}function s(t,e){return u.apply(null,[t].concat(e||[]))}var o=Object.create(null);e.sprintf=u,e.vsprintf=s,\"undefined\"!=typeof window&&(window.sprintf=u,window.vsprintf=s,void 0===(n=function(){return{sprintf:u,vsprintf:s}}.call(e,r,e,t))||(t.exports=n))}()},function(t,e,r){\"use strict\";var n=r(2).lua_pop,a=r(7).luaL_requiref,u=r(5).to_luastring,s={};t.exports.luaL_openlibs=function(t){for(var e in s)a(t,u(e),s[e],1),n(t,1)};var o=r(17),l=r(24).luaopen_base,i=r(25).luaopen_coroutine,c=r(31).luaopen_debug,f=r(30).luaopen_math,_=r(32).luaopen_package,p=r(27).luaopen_os,v=r(28).luaopen_string,h=r(26).luaopen_table,L=r(29).luaopen_utf8;s._G=l,s[o.LUA_LOADLIBNAME]=_,s[o.LUA_COLIBNAME]=i,s[o.LUA_TABLIBNAME]=h,s[o.LUA_OSLIBNAME]=p,s[o.LUA_STRLIBNAME]=v,s[o.LUA_MATHLIBNAME]=f,s[o.LUA_UTF8LIBNAME]=L,s[o.LUA_DBLIBNAME]=c;var d=r(33).luaopen_fengari;s[o.LUA_FENGARILIBNAME]=d}])});", repl = "(set package.path :./?.lua)\r\n(local js (require :js))\r\n\13\n(local fennel (require :fennel))\r\n(set package.loaded.fennel fennel)\r\n\13\n(fn log [...] (js.global.console:log ...))\r\n\13\n\13\n(local env (setmetatable {:js js :fennel fennel :log log}\r\n                         {:__index _G}))\r\n\13\n(set env._ENV env)\r\n\13\n;; minimal shims just to allow the compilers to load in Fengari\r\n(let [noop #nil]\r\n  (set package.loaded.ffi {:typeof noop})\r\n  (set _G.os {:getenv noop})\r\n  (set _G.io {:open noop})\r\n  (set _G.bit {:band #(band $1 $2) :rshift #(rshift $1 $2)})\r\n  (set _G.unpack table.unpack))\r\n\13\n(print _VERSION)\r\n\13\n(local socket (js.new js.global.WebSocket \"ws://localhost:{{port}}/ws\"))\r\n\13\n(fn print [x]\r\n  (js.global.console:log x))\r\n\13\n(local opts {:moduleName \"fennel\"\13\n             :env env\r\n             :pp fennel.view\r\n             :readChunk (fn [{: stack-size}]\r\n                          (socket:send (if (> stack-size 0) \"..\" \">> \"))\r\n                          (let [input (coroutine.yield)]\r\n                            (print (.. :input: input))\r\n                            (.. input \"\\n\")))\r\n             :onValues (fn [xs]\r\n                         (print (.. :output: (table.concat xs \"\\t\") \"\\n\"))\r\n                         (socket:send (.. \"\" (table.concat xs \"\\t\") \"\\n\")))\r\n             :onError (fn [_ err-msg]\r\n                        (print (.. :output: (table.concat [err-msg] \"\\t\") \"\\n\"))\r\n                        (socket:send (.. \"\" err-msg \"\")))})\r\n\13\n(var repl nil)\r\n\13\n(socket:addEventListener\r\n :open\r\n (fn [_ event]\r\n   (print :open)\r\n   (set repl (coroutine.create (partial fennel.repl opts)))\r\n   (coroutine.resume repl \"_VERSION\")))\r\n\13\n\13\n(socket:addEventListener\r\n :message\r\n (fn [_ event]\r\n   (print (.. \"Message: \" event.data))\r\n   (coroutine.resume repl event.data)))\r\n\13\n{}\r\n"}, path = _76_}













 local opts = {p = 9000, d = "./", t = "localhost"}



 getopt.std("i:b:d:p:l:t:ah", opts)

 if opts.h then
 print(help_string)
 os.exit(0) elseif opts.a then


 print("Builtin landing pages:")
 for name, _77_ in pairs(builtin) do local description = _77_["description"]
 print(("  " .. name .. " - " .. description)) end
 os.exit(0) else end

 if (not opts.i and not opts.b) then
 print("ERROR: You need to supply either an index file with -i index.html\nor a builtin index file with -b builitin.\n\nFor a list of builtin index pages use the -l command\n\nexample:\n./websocket-stdio -b echo\n")







 print(help_string)
 os.exit(0) else end

 local ws_server = websocket_stdio_lib["new-server"](opts, builtin)

 do local bound_port = select(3, ws_server:localname())
 print(string.format("Now listening on port %d\n", bound_port)) end

 assert(ws_server:listen()) return ws_server:loop()
